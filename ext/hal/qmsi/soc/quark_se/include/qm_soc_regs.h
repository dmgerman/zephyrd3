DECL|CLK_EXTERN_DIV_DEF_MASK|macro|CLK_EXTERN_DIV_DEF_MASK
DECL|CLK_GPIO_DB_DIV_DEF_MASK|macro|CLK_GPIO_DB_DIV_DEF_MASK
DECL|CLK_PERIPH_ALL|enumerator|CLK_PERIPH_ALL = 0x3FFFFF /**< Quark SE peripherals Mask. */
DECL|CLK_PERIPH_CLK|enumerator|CLK_PERIPH_CLK = BIT(1), /**< Peripheral Clock Enable. */
DECL|CLK_PERIPH_DIV_DEF_MASK|macro|CLK_PERIPH_DIV_DEF_MASK
DECL|CLK_PERIPH_GPIO_DB|enumerator|CLK_PERIPH_GPIO_DB = BIT(8), /**< GPIO Debounce Clock Enable. */
DECL|CLK_PERIPH_GPIO_INTERRUPT|enumerator|CLK_PERIPH_GPIO_INTERRUPT = BIT(7), /**< GPIO Interrupt Clock Enable. */
DECL|CLK_PERIPH_GPIO_REGISTER|enumerator|CLK_PERIPH_GPIO_REGISTER = BIT(13), /**< GPIO Clock Gate Enable. */
DECL|CLK_PERIPH_I2C_M0_REGISTER|enumerator|CLK_PERIPH_I2C_M0_REGISTER =
DECL|CLK_PERIPH_I2C_M0|enumerator|CLK_PERIPH_I2C_M0 = BIT(2), /**< I2C Master 0 Clock Enable. */
DECL|CLK_PERIPH_I2C_M1_REGISTER|enumerator|CLK_PERIPH_I2C_M1_REGISTER =
DECL|CLK_PERIPH_I2C_M1|enumerator|CLK_PERIPH_I2C_M1 = BIT(3), /**< I2C Master 1 Clock Enable. */
DECL|CLK_PERIPH_I2S_REGISTER|enumerator|CLK_PERIPH_I2S_REGISTER = BIT(21), /**< I2S Clock Gate Enable. */
DECL|CLK_PERIPH_I2S|enumerator|CLK_PERIPH_I2S = BIT(9), /**< I2S Clock Enable. */
DECL|CLK_PERIPH_PWM_REGISTER|enumerator|CLK_PERIPH_PWM_REGISTER = BIT(12), /**< PWM Clock Gate Enable. */
DECL|CLK_PERIPH_REGISTER|enumerator|CLK_PERIPH_REGISTER = BIT(0), /**< Peripheral Clock Gate Enable. */
DECL|CLK_PERIPH_RTC_REGISTER|enumerator|CLK_PERIPH_RTC_REGISTER = BIT(11), /**< RTC Clock Gate Enable. */
DECL|CLK_PERIPH_SPI_M0_REGISTER|enumerator|CLK_PERIPH_SPI_M0_REGISTER =
DECL|CLK_PERIPH_SPI_M0|enumerator|CLK_PERIPH_SPI_M0 = BIT(5), /**< SPI Master 0 Clock Enable. */
DECL|CLK_PERIPH_SPI_M1_REGISTER|enumerator|CLK_PERIPH_SPI_M1_REGISTER =
DECL|CLK_PERIPH_SPI_M1|enumerator|CLK_PERIPH_SPI_M1 = BIT(6), /**< SPI Master 1 Clock Enable. */
DECL|CLK_PERIPH_SPI_S_REGISTER|enumerator|CLK_PERIPH_SPI_S_REGISTER =
DECL|CLK_PERIPH_SPI_S|enumerator|CLK_PERIPH_SPI_S = BIT(4), /**< SPI Slave Clock Enable. */
DECL|CLK_PERIPH_UARTA_REGISTER|enumerator|CLK_PERIPH_UARTA_REGISTER = BIT(17), /**< UARTA Clock Gate Enable. */
DECL|CLK_PERIPH_UARTB_REGISTER|enumerator|CLK_PERIPH_UARTB_REGISTER = BIT(18), /**< UARTB Clock Gate Enable. */
DECL|CLK_PERIPH_WDT_REGISTER|enumerator|CLK_PERIPH_WDT_REGISTER = BIT(10), /**< Watchdog Clock Enable. */
DECL|CLK_RTC_DIV_DEF_MASK|macro|CLK_RTC_DIV_DEF_MASK
DECL|CLK_SYS_CLK_DIV_DEF_MASK|macro|CLK_SYS_CLK_DIV_DEF_MASK
DECL|DMA_HW_IF_I2C_MASTER_0_RX|enumerator|DMA_HW_IF_I2C_MASTER_0_RX = 0xd, /**< I2C_Master_0_RX */
DECL|DMA_HW_IF_I2C_MASTER_0_TX|enumerator|DMA_HW_IF_I2C_MASTER_0_TX = 0xc, /**< I2C_Master_0_TX */
DECL|DMA_HW_IF_I2C_MASTER_1_RX|enumerator|DMA_HW_IF_I2C_MASTER_1_RX = 0xf, /**< I2C_Master_1_RX */
DECL|DMA_HW_IF_I2C_MASTER_1_TX|enumerator|DMA_HW_IF_I2C_MASTER_1_TX = 0xe, /**< I2C_Master_1_TX */
DECL|DMA_HW_IF_I2S_CAPTURE|enumerator|DMA_HW_IF_I2S_CAPTURE = 0xb, /**< I2S_Capture channel */
DECL|DMA_HW_IF_I2S_PLAYBACK|enumerator|DMA_HW_IF_I2S_PLAYBACK = 0xa, /**< I2S_Playback channel */
DECL|DMA_HW_IF_SPI_MASTER_0_RX|enumerator|DMA_HW_IF_SPI_MASTER_0_RX = 0x5, /**< SPI_Master_0_RX */
DECL|DMA_HW_IF_SPI_MASTER_0_TX|enumerator|DMA_HW_IF_SPI_MASTER_0_TX = 0x4, /**< SPI_Master_0_TX */
DECL|DMA_HW_IF_SPI_MASTER_1_RX|enumerator|DMA_HW_IF_SPI_MASTER_1_RX = 0x7, /**< SPI_Master_1_RX */
DECL|DMA_HW_IF_SPI_MASTER_1_TX|enumerator|DMA_HW_IF_SPI_MASTER_1_TX = 0x6, /**< SPI_Master_1_TX */
DECL|DMA_HW_IF_SPI_SLAVE_RX|enumerator|DMA_HW_IF_SPI_SLAVE_RX = 0x9, /**< SPI_Slave_RX */
DECL|DMA_HW_IF_SPI_SLAVE_TX|enumerator|DMA_HW_IF_SPI_SLAVE_TX = 0x8, /**< SPI_Slave_TX */
DECL|DMA_HW_IF_UART_A_RX|enumerator|DMA_HW_IF_UART_A_RX = 0x1, /**< UART_A_RX */
DECL|DMA_HW_IF_UART_A_TX|enumerator|DMA_HW_IF_UART_A_TX = 0x0, /**< UART_A_TX */
DECL|DMA_HW_IF_UART_B_RX|enumerator|DMA_HW_IF_UART_B_RX = 0x3, /**< UART_B_RX */
DECL|DMA_HW_IF_UART_B_TX|enumerator|DMA_HW_IF_UART_B_TX = 0x2, /**< UART_B_TX*/
DECL|ER_DONE|macro|ER_DONE
DECL|ER_REQ|macro|ER_REQ
DECL|FIX_1|macro|FIX_1
DECL|FIX_2|macro|FIX_2
DECL|FIX_3|macro|FIX_3
DECL|HAS_4_TIMERS|macro|HAS_4_TIMERS
DECL|HAS_AONPT_BUSY_BIT|macro|HAS_AONPT_BUSY_BIT
DECL|HAS_AON_GPIO|macro|HAS_AON_GPIO
DECL|HAS_APIC|macro|HAS_APIC
DECL|HAS_FLASH_WRITE_DISABLE|macro|HAS_FLASH_WRITE_DISABLE
DECL|HAS_MAILBOX_LAKEMONT_DEST|macro|HAS_MAILBOX_LAKEMONT_DEST
DECL|HAS_MAILBOX_SENSOR_SUB_SYSTEM_DEST|macro|HAS_MAILBOX_SENSOR_SUB_SYSTEM_DEST
DECL|HAS_MAILBOX|macro|HAS_MAILBOX
DECL|HAS_MAILBOX|macro|HAS_MAILBOX
DECL|HAS_SW_SOCWATCH|macro|HAS_SW_SOCWATCH
DECL|HAS_USB|macro|HAS_USB
DECL|HAS_WDT_CLOCK_ENABLE|macro|HAS_WDT_CLOCK_ENABLE
DECL|HAS_WDT_PAUSE|macro|HAS_WDT_PAUSE
DECL|MASS_ERASE_INFO|macro|MASS_ERASE_INFO
DECL|MASS_ERASE|macro|MASS_ERASE
DECL|NUM_FLASH_CONTROLLERS|macro|NUM_FLASH_CONTROLLERS
DECL|NUM_MAILBOXES|macro|NUM_MAILBOXES
DECL|NUM_PWM_CONTROLLER_INTERRUPTS|macro|NUM_PWM_CONTROLLER_INTERRUPTS
DECL|NUM_WDT_CONTROLLERS|macro|NUM_WDT_CONTROLLERS
DECL|OSC0_CFG0_OSC0_XTAL_COUNT_VALUE_MASK|macro|OSC0_CFG0_OSC0_XTAL_COUNT_VALUE_MASK
DECL|OSC0_CFG0_OSC0_XTAL_COUNT_VALUE_OFFS|macro|OSC0_CFG0_OSC0_XTAL_COUNT_VALUE_OFFS
DECL|OSC0_CFG1_FTRIMOTP_MASK|macro|OSC0_CFG1_FTRIMOTP_MASK
DECL|OSC0_CFG1_FTRIMOTP_OFFS|macro|OSC0_CFG1_FTRIMOTP_OFFS
DECL|OSC0_CFG1_OSC0_FADJ_XTAL_MASK|macro|OSC0_CFG1_OSC0_FADJ_XTAL_MASK
DECL|OSC0_CFG1_OSC0_FADJ_XTAL_OFFS|macro|OSC0_CFG1_OSC0_FADJ_XTAL_OFFS
DECL|OSC0_CFG1_SI_FREQ_SEL_MASK|macro|OSC0_CFG1_SI_FREQ_SEL_MASK
DECL|OSC0_CFG1_SI_FREQ_SEL_OFFS|macro|OSC0_CFG1_SI_FREQ_SEL_OFFS
DECL|PWM_START|macro|PWM_START
DECL|QM_AC_HP_COMPARATORS_MASK|macro|QM_AC_HP_COMPARATORS_MASK
DECL|QM_AONC_0_BASE|macro|QM_AONC_0_BASE
DECL|QM_AONC_0|enumerator|typedef enum { QM_AONC_0 = 0, QM_AONC_NUM } qm_aonc_t;
DECL|QM_AONC_DISABLE|macro|QM_AONC_DISABLE
DECL|QM_AONC_ENABLE|macro|QM_AONC_ENABLE
DECL|QM_AONC_NUM|enumerator|typedef enum { QM_AONC_0 = 0, QM_AONC_NUM } qm_aonc_t;
DECL|QM_AONC|macro|QM_AONC
DECL|QM_AONC|macro|QM_AONC
DECL|QM_AONPT_CLR|macro|QM_AONPT_CLR
DECL|QM_AONPT_INTERRUPT|macro|QM_AONPT_INTERRUPT
DECL|QM_AONPT_RST|macro|QM_AONPT_RST
DECL|QM_AON_GPIO_0|enumerator|typedef enum { QM_GPIO_0 = 0, QM_AON_GPIO_0 = 1, QM_GPIO_NUM } qm_gpio_t;
DECL|QM_AON_GPIO_BASE|macro|QM_AON_GPIO_BASE
DECL|QM_AON_VR_EN|macro|QM_AON_VR_EN
DECL|QM_AON_VR_VSEL_1V2|macro|QM_AON_VR_VSEL_1V2
DECL|QM_AON_VR_VSEL_1V35|macro|QM_AON_VR_VSEL_1V35
DECL|QM_AON_VR_VSEL_1V8|macro|QM_AON_VR_VSEL_1V8
DECL|QM_AON_VR_VSEL_MASK|macro|QM_AON_VR_VSEL_MASK
DECL|QM_AON_VR_VSTRB|macro|QM_AON_VR_VSTRB
DECL|QM_CCU_DMA_CLK_EN|macro|QM_CCU_DMA_CLK_EN
DECL|QM_CCU_EXTERN_DIV_OFFSET|macro|QM_CCU_EXTERN_DIV_OFFSET
DECL|QM_CCU_EXT_CLK_DIV_EN|macro|QM_CCU_EXT_CLK_DIV_EN
DECL|QM_CCU_GPIO_DB_CLK_DIV_EN|macro|QM_CCU_GPIO_DB_CLK_DIV_EN
DECL|QM_CCU_GPIO_DB_CLK_EN|macro|QM_CCU_GPIO_DB_CLK_EN
DECL|QM_CCU_GPIO_DB_DIV_OFFSET|macro|QM_CCU_GPIO_DB_DIV_OFFSET
DECL|QM_CCU_MLAYER_AHB_CTL|macro|QM_CCU_MLAYER_AHB_CTL
DECL|QM_CCU_PERIPH_PCLK_DIV_EN|macro|QM_CCU_PERIPH_PCLK_DIV_EN
DECL|QM_CCU_PERIPH_PCLK_DIV_OFFSET|macro|QM_CCU_PERIPH_PCLK_DIV_OFFSET
DECL|QM_CCU_RTC_CLK_DIV_EN|macro|QM_CCU_RTC_CLK_DIV_EN
DECL|QM_CCU_RTC_CLK_DIV_OFFSET|macro|QM_CCU_RTC_CLK_DIV_OFFSET
DECL|QM_CCU_RTC_CLK_EN|macro|QM_CCU_RTC_CLK_EN
DECL|QM_CCU_SYS_CLK_DIV_EN|macro|QM_CCU_SYS_CLK_DIV_EN
DECL|QM_CCU_SYS_CLK_DIV_MASK|macro|QM_CCU_SYS_CLK_DIV_MASK
DECL|QM_CCU_SYS_CLK_DIV_OFFSET|macro|QM_CCU_SYS_CLK_DIV_OFFSET
DECL|QM_CCU_SYS_CLK_SEL|macro|QM_CCU_SYS_CLK_SEL
DECL|QM_CCU_USB_CLK_EN|macro|QM_CCU_USB_CLK_EN
DECL|QM_DMA_0|enumerator|QM_DMA_0, /**< DMA controller id. */
DECL|QM_DMA_BASE|macro|QM_DMA_BASE
DECL|QM_DMA_CFG_H_DEST_PER_MASK|macro|QM_DMA_CFG_H_DEST_PER_MASK
DECL|QM_DMA_CFG_H_DEST_PER_OFFSET|macro|QM_DMA_CFG_H_DEST_PER_OFFSET
DECL|QM_DMA_CFG_H_DS_UPD_EN_MASK|macro|QM_DMA_CFG_H_DS_UPD_EN_MASK
DECL|QM_DMA_CFG_H_DS_UPD_EN_OFFSET|macro|QM_DMA_CFG_H_DS_UPD_EN_OFFSET
DECL|QM_DMA_CFG_H_SRC_PER_MASK|macro|QM_DMA_CFG_H_SRC_PER_MASK
DECL|QM_DMA_CFG_H_SRC_PER_OFFSET|macro|QM_DMA_CFG_H_SRC_PER_OFFSET
DECL|QM_DMA_CFG_H_SS_UPD_EN_MASK|macro|QM_DMA_CFG_H_SS_UPD_EN_MASK
DECL|QM_DMA_CFG_H_SS_UPD_EN_OFFSET|macro|QM_DMA_CFG_H_SS_UPD_EN_OFFSET
DECL|QM_DMA_CFG_L_CH_SUSP_MASK|macro|QM_DMA_CFG_L_CH_SUSP_MASK
DECL|QM_DMA_CFG_L_DST_HS_POL_MASK|macro|QM_DMA_CFG_L_DST_HS_POL_MASK
DECL|QM_DMA_CFG_L_DST_HS_POL_OFFSET|macro|QM_DMA_CFG_L_DST_HS_POL_OFFSET
DECL|QM_DMA_CFG_L_FIFO_EMPTY_MASK|macro|QM_DMA_CFG_L_FIFO_EMPTY_MASK
DECL|QM_DMA_CFG_L_HS_SEL_DST_MASK|macro|QM_DMA_CFG_L_HS_SEL_DST_MASK
DECL|QM_DMA_CFG_L_HS_SEL_DST_OFFSET|macro|QM_DMA_CFG_L_HS_SEL_DST_OFFSET
DECL|QM_DMA_CFG_L_HS_SEL_SRC_MASK|macro|QM_DMA_CFG_L_HS_SEL_SRC_MASK
DECL|QM_DMA_CFG_L_HS_SEL_SRC_OFFSET|macro|QM_DMA_CFG_L_HS_SEL_SRC_OFFSET
DECL|QM_DMA_CFG_L_RELOAD_DST_MASK|macro|QM_DMA_CFG_L_RELOAD_DST_MASK
DECL|QM_DMA_CFG_L_RELOAD_SRC_MASK|macro|QM_DMA_CFG_L_RELOAD_SRC_MASK
DECL|QM_DMA_CFG_L_SRC_HS_POL_MASK|macro|QM_DMA_CFG_L_SRC_HS_POL_MASK
DECL|QM_DMA_CFG_L_SRC_HS_POL_OFFSET|macro|QM_DMA_CFG_L_SRC_HS_POL_OFFSET
DECL|QM_DMA_CHANNEL_0|enumerator|QM_DMA_CHANNEL_0 = 0, /**< DMA channel id for channel 0 */
DECL|QM_DMA_CHANNEL_1|enumerator|QM_DMA_CHANNEL_1, /**< DMA channel id for channel 1 */
DECL|QM_DMA_CHANNEL_2|enumerator|QM_DMA_CHANNEL_2, /**< DMA channel id for channel 2 */
DECL|QM_DMA_CHANNEL_3|enumerator|QM_DMA_CHANNEL_3, /**< DMA channel id for channel 3 */
DECL|QM_DMA_CHANNEL_4|enumerator|QM_DMA_CHANNEL_4, /**< DMA channel id for channel 4 */
DECL|QM_DMA_CHANNEL_5|enumerator|QM_DMA_CHANNEL_5, /**< DMA channel id for channel 5 */
DECL|QM_DMA_CHANNEL_6|enumerator|QM_DMA_CHANNEL_6, /**< DMA channel id for channel 6 */
DECL|QM_DMA_CHANNEL_7|enumerator|QM_DMA_CHANNEL_7, /**< DMA channel id for channel 7 */
DECL|QM_DMA_CHANNEL_NUM|enumerator|QM_DMA_CHANNEL_NUM /**< Number of DMA channels */
DECL|QM_DMA_CTL_H_BLOCK_TS_MASK|macro|QM_DMA_CTL_H_BLOCK_TS_MASK
DECL|QM_DMA_CTL_H_BLOCK_TS_MAX|macro|QM_DMA_CTL_H_BLOCK_TS_MAX
DECL|QM_DMA_CTL_H_BLOCK_TS_MIN|macro|QM_DMA_CTL_H_BLOCK_TS_MIN
DECL|QM_DMA_CTL_H_BLOCK_TS_OFFSET|macro|QM_DMA_CTL_H_BLOCK_TS_OFFSET
DECL|QM_DMA_CTL_L_DEST_MSIZE_MASK|macro|QM_DMA_CTL_L_DEST_MSIZE_MASK
DECL|QM_DMA_CTL_L_DEST_MSIZE_OFFSET|macro|QM_DMA_CTL_L_DEST_MSIZE_OFFSET
DECL|QM_DMA_CTL_L_DINC_MASK|macro|QM_DMA_CTL_L_DINC_MASK
DECL|QM_DMA_CTL_L_DINC_OFFSET|macro|QM_DMA_CTL_L_DINC_OFFSET
DECL|QM_DMA_CTL_L_DST_TR_WIDTH_MASK|macro|QM_DMA_CTL_L_DST_TR_WIDTH_MASK
DECL|QM_DMA_CTL_L_DST_TR_WIDTH_OFFSET|macro|QM_DMA_CTL_L_DST_TR_WIDTH_OFFSET
DECL|QM_DMA_CTL_L_INT_EN_MASK|macro|QM_DMA_CTL_L_INT_EN_MASK
DECL|QM_DMA_CTL_L_LLP_DST_EN_MASK|macro|QM_DMA_CTL_L_LLP_DST_EN_MASK
DECL|QM_DMA_CTL_L_LLP_SRC_EN_MASK|macro|QM_DMA_CTL_L_LLP_SRC_EN_MASK
DECL|QM_DMA_CTL_L_SINC_MASK|macro|QM_DMA_CTL_L_SINC_MASK
DECL|QM_DMA_CTL_L_SINC_OFFSET|macro|QM_DMA_CTL_L_SINC_OFFSET
DECL|QM_DMA_CTL_L_SRC_MSIZE_MASK|macro|QM_DMA_CTL_L_SRC_MSIZE_MASK
DECL|QM_DMA_CTL_L_SRC_MSIZE_OFFSET|macro|QM_DMA_CTL_L_SRC_MSIZE_OFFSET
DECL|QM_DMA_CTL_L_SRC_TR_WIDTH_MASK|macro|QM_DMA_CTL_L_SRC_TR_WIDTH_MASK
DECL|QM_DMA_CTL_L_SRC_TR_WIDTH_OFFSET|macro|QM_DMA_CTL_L_SRC_TR_WIDTH_OFFSET
DECL|QM_DMA_CTL_L_TT_FC_MASK|macro|QM_DMA_CTL_L_TT_FC_MASK
DECL|QM_DMA_CTL_L_TT_FC_OFFSET|macro|QM_DMA_CTL_L_TT_FC_OFFSET
DECL|QM_DMA_ENABLE_CLOCK|macro|QM_DMA_ENABLE_CLOCK
DECL|QM_DMA_INT_STATUS_BLOCK|macro|QM_DMA_INT_STATUS_BLOCK
DECL|QM_DMA_INT_STATUS_ERR|macro|QM_DMA_INT_STATUS_ERR
DECL|QM_DMA_INT_STATUS_TFR|macro|QM_DMA_INT_STATUS_TFR
DECL|QM_DMA_MISC_CFG_DMA_EN|macro|QM_DMA_MISC_CFG_DMA_EN
DECL|QM_DMA_MISC_CHAN_EN_WE_OFFSET|macro|QM_DMA_MISC_CHAN_EN_WE_OFFSET
DECL|QM_DMA_NUM|enumerator|QM_DMA_NUM /**< Number of DMA controllers. */
DECL|QM_DMA|macro|QM_DMA
DECL|QM_DMA|macro|QM_DMA
DECL|QM_FLASH_0|enumerator|typedef enum { QM_FLASH_0 = 0, QM_FLASH_1, QM_FLASH_NUM } qm_flash_t;
DECL|QM_FLASH_1|enumerator|typedef enum { QM_FLASH_0 = 0, QM_FLASH_1, QM_FLASH_NUM } qm_flash_t;
DECL|QM_FLASH_ADDRESS_MASK|macro|QM_FLASH_ADDRESS_MASK
DECL|QM_FLASH_ADDR_INC|macro|QM_FLASH_ADDR_INC
DECL|QM_FLASH_BASE_0|macro|QM_FLASH_BASE_0
DECL|QM_FLASH_BASE_1|macro|QM_FLASH_BASE_1
DECL|QM_FLASH_CLK_SLOW|macro|QM_FLASH_CLK_SLOW
DECL|QM_FLASH_CTRL_PRE_EN_MASK|macro|QM_FLASH_CTRL_PRE_EN_MASK
DECL|QM_FLASH_CTRL_PRE_FLUSH_MASK|macro|QM_FLASH_CTRL_PRE_FLUSH_MASK
DECL|QM_FLASH_LVE_MODE|macro|QM_FLASH_LVE_MODE
DECL|QM_FLASH_MAX_ADDR|macro|QM_FLASH_MAX_ADDR
DECL|QM_FLASH_MAX_ADDR|macro|QM_FLASH_MAX_ADDR
DECL|QM_FLASH_MAX_PAGE_NUM|macro|QM_FLASH_MAX_PAGE_NUM
DECL|QM_FLASH_MAX_US_COUNT|macro|QM_FLASH_MAX_US_COUNT
DECL|QM_FLASH_MAX_WAIT_STATES|macro|QM_FLASH_MAX_WAIT_STATES
DECL|QM_FLASH_MICRO_SEC_COUNT_MASK|macro|QM_FLASH_MICRO_SEC_COUNT_MASK
DECL|QM_FLASH_NUM|enumerator|typedef enum { QM_FLASH_0 = 0, QM_FLASH_1, QM_FLASH_NUM } qm_flash_t;
DECL|QM_FLASH_PAGE_MASK|macro|QM_FLASH_PAGE_MASK
DECL|QM_FLASH_PAGE_MASK|macro|QM_FLASH_PAGE_MASK
DECL|QM_FLASH_PAGE_SIZE_BITS|macro|QM_FLASH_PAGE_SIZE_BITS
DECL|QM_FLASH_PAGE_SIZE_BYTES|macro|QM_FLASH_PAGE_SIZE_BYTES
DECL|QM_FLASH_PAGE_SIZE_DWORDS|macro|QM_FLASH_PAGE_SIZE_DWORDS
DECL|QM_FLASH_REGION_DATA_BASE_OFFSET|macro|QM_FLASH_REGION_DATA_BASE_OFFSET
DECL|QM_FLASH_REGION_OTP_0_BASE|macro|QM_FLASH_REGION_OTP_0_BASE
DECL|QM_FLASH_REGION_OTP_0_BASE|macro|QM_FLASH_REGION_OTP_0_BASE
DECL|QM_FLASH_REGION_SYS_0_BASE|macro|QM_FLASH_REGION_SYS_0_BASE
DECL|QM_FLASH_REGION_SYS_0_BASE|macro|QM_FLASH_REGION_SYS_0_BASE
DECL|QM_FLASH_REGION_SYS_1_BASE|macro|QM_FLASH_REGION_SYS_1_BASE
DECL|QM_FLASH_REGION_SYS_1_BASE|macro|QM_FLASH_REGION_SYS_1_BASE
DECL|QM_FLASH_STTS_ROM_PROG|macro|QM_FLASH_STTS_ROM_PROG
DECL|QM_FLASH_TMG_DEF_MASK|macro|QM_FLASH_TMG_DEF_MASK
DECL|QM_FLASH_WAIT_STATE_MASK|macro|QM_FLASH_WAIT_STATE_MASK
DECL|QM_FLASH_WAIT_STATE_OFFSET|macro|QM_FLASH_WAIT_STATE_OFFSET
DECL|QM_FLASH_WRITE_DISABLE_OFFSET|macro|QM_FLASH_WRITE_DISABLE_OFFSET
DECL|QM_FLASH_WRITE_DISABLE_VAL|macro|QM_FLASH_WRITE_DISABLE_VAL
DECL|QM_FLASH|macro|QM_FLASH
DECL|QM_FLASH|macro|QM_FLASH
DECL|QM_FPR_0|enumerator|QM_FPR_0, /**< FPR 0. */
DECL|QM_FPR_1|enumerator|QM_FPR_1, /**< FPR 1. */
DECL|QM_FPR_2|enumerator|QM_FPR_2, /**< FPR 2. */
DECL|QM_FPR_3|enumerator|QM_FPR_3, /**< FPR 3. */
DECL|QM_FPR_GRANULARITY|macro|QM_FPR_GRANULARITY
DECL|QM_FPR_NUM|enumerator|QM_FPR_NUM
DECL|QM_GPIO_0|enumerator|typedef enum { QM_GPIO_0 = 0, QM_AON_GPIO_0 = 1, QM_GPIO_NUM } qm_gpio_t;
DECL|QM_GPIO_BASE|macro|QM_GPIO_BASE
DECL|QM_GPIO_NUM|enumerator|typedef enum { QM_GPIO_0 = 0, QM_AON_GPIO_0 = 1, QM_GPIO_NUM } qm_gpio_t;
DECL|QM_GPIO|macro|QM_GPIO
DECL|QM_GPIO|macro|QM_GPIO
DECL|QM_GPS0_BIT_FM|macro|QM_GPS0_BIT_FM
DECL|QM_GPS0_BIT_SENSOR_WAKEUP|macro|QM_GPS0_BIT_SENSOR_WAKEUP
DECL|QM_GPS0_BIT_X86_WAKEUP|macro|QM_GPS0_BIT_X86_WAKEUP
DECL|QM_I2C_0_BASE|macro|QM_I2C_0_BASE
DECL|QM_I2C_0|enumerator|typedef enum { QM_I2C_0 = 0, QM_I2C_1, QM_I2C_NUM } qm_i2c_t;
DECL|QM_I2C_1_BASE|macro|QM_I2C_1_BASE
DECL|QM_I2C_1|enumerator|typedef enum { QM_I2C_0 = 0, QM_I2C_1, QM_I2C_NUM } qm_i2c_t;
DECL|QM_I2C_FIFO_SIZE|macro|QM_I2C_FIFO_SIZE
DECL|QM_I2C_IC_CON_10BITADDR_MASTER_OFFSET|macro|QM_I2C_IC_CON_10BITADDR_MASTER_OFFSET
DECL|QM_I2C_IC_CON_10BITADDR_MASTER|macro|QM_I2C_IC_CON_10BITADDR_MASTER
DECL|QM_I2C_IC_CON_10BITADDR_SLAVE_OFFSET|macro|QM_I2C_IC_CON_10BITADDR_SLAVE_OFFSET
DECL|QM_I2C_IC_CON_10BITADDR_SLAVE|macro|QM_I2C_IC_CON_10BITADDR_SLAVE
DECL|QM_I2C_IC_CON_MASTER_MODE|macro|QM_I2C_IC_CON_MASTER_MODE
DECL|QM_I2C_IC_CON_RESTART_EN|macro|QM_I2C_IC_CON_RESTART_EN
DECL|QM_I2C_IC_CON_SLAVE_DISABLE|macro|QM_I2C_IC_CON_SLAVE_DISABLE
DECL|QM_I2C_IC_CON_SPEED_FS_FSP|macro|QM_I2C_IC_CON_SPEED_FS_FSP
DECL|QM_I2C_IC_CON_SPEED_MASK|macro|QM_I2C_IC_CON_SPEED_MASK
DECL|QM_I2C_IC_CON_SPEED_OFFSET|macro|QM_I2C_IC_CON_SPEED_OFFSET
DECL|QM_I2C_IC_CON_SPEED_SS|macro|QM_I2C_IC_CON_SPEED_SS
DECL|QM_I2C_IC_CON_STOP_DET_IFADDRESSED|macro|QM_I2C_IC_CON_STOP_DET_IFADDRESSED
DECL|QM_I2C_IC_DATA_CMD_LSB_MASK|macro|QM_I2C_IC_DATA_CMD_LSB_MASK
DECL|QM_I2C_IC_DATA_CMD_READ|macro|QM_I2C_IC_DATA_CMD_READ
DECL|QM_I2C_IC_DATA_CMD_STOP_BIT_CTRL|macro|QM_I2C_IC_DATA_CMD_STOP_BIT_CTRL
DECL|QM_I2C_IC_DMA_CR_RX_ENABLE|macro|QM_I2C_IC_DMA_CR_RX_ENABLE
DECL|QM_I2C_IC_DMA_CR_TX_ENABLE|macro|QM_I2C_IC_DMA_CR_TX_ENABLE
DECL|QM_I2C_IC_ENABLE_CONTROLLER_ABORT|macro|QM_I2C_IC_ENABLE_CONTROLLER_ABORT
DECL|QM_I2C_IC_ENABLE_CONTROLLER_EN|macro|QM_I2C_IC_ENABLE_CONTROLLER_EN
DECL|QM_I2C_IC_ENABLE_STATUS_IC_EN|macro|QM_I2C_IC_ENABLE_STATUS_IC_EN
DECL|QM_I2C_IC_HCNT_MAX|macro|QM_I2C_IC_HCNT_MAX
DECL|QM_I2C_IC_HCNT_MIN|macro|QM_I2C_IC_HCNT_MIN
DECL|QM_I2C_IC_INTR_MASK_ACTIVITY|macro|QM_I2C_IC_INTR_MASK_ACTIVITY
DECL|QM_I2C_IC_INTR_MASK_ALL|macro|QM_I2C_IC_INTR_MASK_ALL
DECL|QM_I2C_IC_INTR_MASK_GEN_CALL_DETECTED|macro|QM_I2C_IC_INTR_MASK_GEN_CALL_DETECTED
DECL|QM_I2C_IC_INTR_MASK_RD_REQ|macro|QM_I2C_IC_INTR_MASK_RD_REQ
DECL|QM_I2C_IC_INTR_MASK_RESTART_DETECTED|macro|QM_I2C_IC_INTR_MASK_RESTART_DETECTED
DECL|QM_I2C_IC_INTR_MASK_RX_DONE|macro|QM_I2C_IC_INTR_MASK_RX_DONE
DECL|QM_I2C_IC_INTR_MASK_RX_FULL|macro|QM_I2C_IC_INTR_MASK_RX_FULL
DECL|QM_I2C_IC_INTR_MASK_RX_OVER|macro|QM_I2C_IC_INTR_MASK_RX_OVER
DECL|QM_I2C_IC_INTR_MASK_RX_UNDER|macro|QM_I2C_IC_INTR_MASK_RX_UNDER
DECL|QM_I2C_IC_INTR_MASK_START_DETECTED|macro|QM_I2C_IC_INTR_MASK_START_DETECTED
DECL|QM_I2C_IC_INTR_MASK_STOP_DETECTED|macro|QM_I2C_IC_INTR_MASK_STOP_DETECTED
DECL|QM_I2C_IC_INTR_MASK_TX_ABORT|macro|QM_I2C_IC_INTR_MASK_TX_ABORT
DECL|QM_I2C_IC_INTR_MASK_TX_EMPTY|macro|QM_I2C_IC_INTR_MASK_TX_EMPTY
DECL|QM_I2C_IC_INTR_MASK_TX_OVER|macro|QM_I2C_IC_INTR_MASK_TX_OVER
DECL|QM_I2C_IC_INTR_STAT_GEN_CALL_DETECTED|macro|QM_I2C_IC_INTR_STAT_GEN_CALL_DETECTED
DECL|QM_I2C_IC_INTR_STAT_RD_REQ|macro|QM_I2C_IC_INTR_STAT_RD_REQ
DECL|QM_I2C_IC_INTR_STAT_RX_DONE|macro|QM_I2C_IC_INTR_STAT_RX_DONE
DECL|QM_I2C_IC_INTR_STAT_RX_FULL|macro|QM_I2C_IC_INTR_STAT_RX_FULL
DECL|QM_I2C_IC_INTR_STAT_RX_OVER|macro|QM_I2C_IC_INTR_STAT_RX_OVER
DECL|QM_I2C_IC_INTR_STAT_RX_UNDER|macro|QM_I2C_IC_INTR_STAT_RX_UNDER
DECL|QM_I2C_IC_INTR_STAT_START_DETECTED|macro|QM_I2C_IC_INTR_STAT_START_DETECTED
DECL|QM_I2C_IC_INTR_STAT_STOP_DETECTED|macro|QM_I2C_IC_INTR_STAT_STOP_DETECTED
DECL|QM_I2C_IC_INTR_STAT_TX_ABRT|macro|QM_I2C_IC_INTR_STAT_TX_ABRT
DECL|QM_I2C_IC_INTR_STAT_TX_EMPTY|macro|QM_I2C_IC_INTR_STAT_TX_EMPTY
DECL|QM_I2C_IC_INTR_STAT_TX_OVER|macro|QM_I2C_IC_INTR_STAT_TX_OVER
DECL|QM_I2C_IC_LCNT_MAX|macro|QM_I2C_IC_LCNT_MAX
DECL|QM_I2C_IC_LCNT_MIN|macro|QM_I2C_IC_LCNT_MIN
DECL|QM_I2C_IC_RAW_INTR_STAT_GEN_CALL|macro|QM_I2C_IC_RAW_INTR_STAT_GEN_CALL
DECL|QM_I2C_IC_RAW_INTR_STAT_RESTART_DETECTED|macro|QM_I2C_IC_RAW_INTR_STAT_RESTART_DETECTED
DECL|QM_I2C_IC_RAW_INTR_STAT_RX_FULL|macro|QM_I2C_IC_RAW_INTR_STAT_RX_FULL
DECL|QM_I2C_IC_RAW_INTR_STAT_TX_ABRT|macro|QM_I2C_IC_RAW_INTR_STAT_TX_ABRT
DECL|QM_I2C_IC_STATUS_BUSY_MASK|macro|QM_I2C_IC_STATUS_BUSY_MASK
DECL|QM_I2C_IC_STATUS_RFF|macro|QM_I2C_IC_STATUS_RFF
DECL|QM_I2C_IC_STATUS_RFNE|macro|QM_I2C_IC_STATUS_RFNE
DECL|QM_I2C_IC_STATUS_TFE|macro|QM_I2C_IC_STATUS_TFE
DECL|QM_I2C_IC_STATUS_TNF|macro|QM_I2C_IC_STATUS_TNF
DECL|QM_I2C_IC_TAR_MASK|macro|QM_I2C_IC_TAR_MASK
DECL|QM_I2C_IC_TX_ABRT_SOURCE_ABRT_SBYTE_NORSTRT|macro|QM_I2C_IC_TX_ABRT_SOURCE_ABRT_SBYTE_NORSTRT
DECL|QM_I2C_IC_TX_ABRT_SOURCE_ALL_MASK|macro|QM_I2C_IC_TX_ABRT_SOURCE_ALL_MASK
DECL|QM_I2C_IC_TX_ABRT_SOURCE_ARB_LOST|macro|QM_I2C_IC_TX_ABRT_SOURCE_ARB_LOST
DECL|QM_I2C_IC_TX_ABRT_SOURCE_NAK_MASK|macro|QM_I2C_IC_TX_ABRT_SOURCE_NAK_MASK
DECL|QM_I2C_NUM|enumerator|typedef enum { QM_I2C_0 = 0, QM_I2C_1, QM_I2C_NUM } qm_i2c_t;
DECL|QM_I2C|macro|QM_I2C
DECL|QM_I2C|macro|QM_I2C
DECL|QM_INT_CONTROLLER|macro|QM_INT_CONTROLLER
DECL|QM_IOAPIC_BASE|macro|QM_IOAPIC_BASE
DECL|QM_IOAPIC_NUM_RTES|macro|QM_IOAPIC_NUM_RTES
DECL|QM_IOAPIC_REG_REDTBL|macro|QM_IOAPIC_REG_REDTBL
DECL|QM_IOAPIC_REG_VER|macro|QM_IOAPIC_REG_VER
DECL|QM_IOAPIC|macro|QM_IOAPIC
DECL|QM_IOAPIC|macro|QM_IOAPIC
DECL|QM_ISR_EOI|macro|QM_ISR_EOI
DECL|QM_ISR_EOI|macro|QM_ISR_EOI
DECL|QM_LAPIC_BASE|macro|QM_LAPIC_BASE
DECL|QM_LAPIC|macro|QM_LAPIC
DECL|QM_LAPIC|macro|QM_LAPIC
DECL|QM_MAILBOX_BASE|macro|QM_MAILBOX_BASE
DECL|QM_MAILBOX|macro|QM_MAILBOX
DECL|QM_MAILBOX|macro|QM_MAILBOX
DECL|QM_MBOX_CHALL_INT_STS|macro|QM_MBOX_CHALL_INT_STS
DECL|QM_MBOX_CHALL_STS|macro|QM_MBOX_CHALL_STS
DECL|QM_MBOX_CH_CTRL_INT|macro|QM_MBOX_CH_CTRL_INT
DECL|QM_MBOX_CH_CTRL_MASK|macro|QM_MBOX_CH_CTRL_MASK
DECL|QM_MBOX_CH_CTRL_SHIFT|macro|QM_MBOX_CH_CTRL_SHIFT
DECL|QM_MBOX_CH_STS_CTRL_INT|macro|QM_MBOX_CH_STS_CTRL_INT
DECL|QM_MBOX_CH_STS|macro|QM_MBOX_CH_STS
DECL|QM_MBOX_HOST_HALT_MASK_MASK|macro|QM_MBOX_HOST_HALT_MASK_MASK
DECL|QM_MBOX_HOST_HALT_MASK_OFFSET|macro|QM_MBOX_HOST_HALT_MASK_OFFSET
DECL|QM_MBOX_HOST_MASK_MASK|macro|QM_MBOX_HOST_MASK_MASK
DECL|QM_MBOX_HOST_MASK_OFFSET|macro|QM_MBOX_HOST_MASK_OFFSET
DECL|QM_MBOX_SS_HALT_MASK_MASK|macro|QM_MBOX_SS_HALT_MASK_MASK
DECL|QM_MBOX_SS_HALT_MASK_OFFSET|macro|QM_MBOX_SS_HALT_MASK_OFFSET
DECL|QM_MBOX_SS_MASK_MASK|macro|QM_MBOX_SS_MASK_MASK
DECL|QM_MBOX_SS_MASK_OFFSET|macro|QM_MBOX_SS_MASK_OFFSET
DECL|QM_MBOX_STATUS_MASK|macro|QM_MBOX_STATUS_MASK
DECL|QM_MPR_0|enumerator|QM_MPR_0 = 0, /**< Memory Protection Region 0. */
DECL|QM_MPR_1|enumerator|QM_MPR_1, /**< Memory Protection Region 1. */
DECL|QM_MPR_2|enumerator|QM_MPR_2, /**< Memory Protection Region 2. */
DECL|QM_MPR_3|enumerator|QM_MPR_3, /**< Memory Protection Region 3. */
DECL|QM_MPR_BASE|macro|QM_MPR_BASE
DECL|QM_MPR_EN_LOCK_MASK|macro|QM_MPR_EN_LOCK_MASK
DECL|QM_MPR_EN_LOCK_OFFSET|macro|QM_MPR_EN_LOCK_OFFSET
DECL|QM_MPR_GRANULARITY|macro|QM_MPR_GRANULARITY
DECL|QM_MPR_NUM|enumerator|QM_MPR_NUM /**< Number of Memory Protection Regions. */
DECL|QM_MPR_RD_EN_MASK|macro|QM_MPR_RD_EN_MASK
DECL|QM_MPR_RD_EN_OFFSET|macro|QM_MPR_RD_EN_OFFSET
DECL|QM_MPR_UP_BOUND_OFFSET|macro|QM_MPR_UP_BOUND_OFFSET
DECL|QM_MPR_VSTS_VALID|macro|QM_MPR_VSTS_VALID
DECL|QM_MPR_WR_EN_MASK|macro|QM_MPR_WR_EN_MASK
DECL|QM_MPR_WR_EN_OFFSET|macro|QM_MPR_WR_EN_OFFSET
DECL|QM_MPR|macro|QM_MPR
DECL|QM_MPR|macro|QM_MPR
DECL|QM_NUM_AON_GPIO_PINS|macro|QM_NUM_AON_GPIO_PINS
DECL|QM_NUM_GPIO_PINS|macro|QM_NUM_GPIO_PINS
DECL|QM_OSC0_EN_CRYSTAL|macro|QM_OSC0_EN_CRYSTAL
DECL|QM_OSC0_EN_SI_OSC|macro|QM_OSC0_EN_SI_OSC
DECL|QM_OSC0_LOCK_SI|macro|QM_OSC0_LOCK_SI
DECL|QM_OSC0_LOCK_XTAL|macro|QM_OSC0_LOCK_XTAL
DECL|QM_OSC0_MODE_SEL|macro|QM_OSC0_MODE_SEL
DECL|QM_OSC0_MODE_SEL|macro|QM_OSC0_MODE_SEL
DECL|QM_OSC0_PD|macro|QM_OSC0_PD
DECL|QM_OSC0_PD|macro|QM_OSC0_PD
DECL|QM_OSC0_SI_FREQ_SEL_DEF_MASK|macro|QM_OSC0_SI_FREQ_SEL_DEF_MASK
DECL|QM_OSC1_PD|macro|QM_OSC1_PD
DECL|QM_PMUX_SLEW0|macro|QM_PMUX_SLEW0
DECL|QM_PMUX_SLEW1|macro|QM_PMUX_SLEW1
DECL|QM_PMUX_SLEW2|macro|QM_PMUX_SLEW2
DECL|QM_PMUX_SLEW3|macro|QM_PMUX_SLEW3
DECL|QM_PMUX_SLEW_4MA_DRIVER|macro|QM_PMUX_SLEW_4MA_DRIVER
DECL|QM_PWM_0|enumerator|typedef enum { QM_PWM_0 = 0, QM_PWM_NUM } qm_pwm_t;
DECL|QM_PWM_BASE|macro|QM_PWM_BASE
DECL|QM_PWM_CONF_INT_EN_MASK|macro|QM_PWM_CONF_INT_EN_MASK
DECL|QM_PWM_CONF_MODE_MASK|macro|QM_PWM_CONF_MODE_MASK
DECL|QM_PWM_ID_0|enumerator|QM_PWM_ID_0 = 0,
DECL|QM_PWM_ID_1|enumerator|QM_PWM_ID_1,
DECL|QM_PWM_ID_2|enumerator|QM_PWM_ID_2,
DECL|QM_PWM_ID_3|enumerator|QM_PWM_ID_3,
DECL|QM_PWM_ID_NUM|enumerator|QM_PWM_ID_NUM
DECL|QM_PWM_INTERRUPT_MASK_OFFSET|macro|QM_PWM_INTERRUPT_MASK_OFFSET
DECL|QM_PWM_MODE_PWM_VALUE|macro|QM_PWM_MODE_PWM_VALUE
DECL|QM_PWM_MODE_TIMER_COUNT_VALUE|macro|QM_PWM_MODE_TIMER_COUNT_VALUE
DECL|QM_PWM_MODE_TIMER_FREE_RUNNING_VALUE|macro|QM_PWM_MODE_TIMER_FREE_RUNNING_VALUE
DECL|QM_PWM_NUM|enumerator|typedef enum { QM_PWM_0 = 0, QM_PWM_NUM } qm_pwm_t;
DECL|QM_PWM_TIMERNCONTROLREG_TIMER_ENABLE|macro|QM_PWM_TIMERNCONTROLREG_TIMER_ENABLE
DECL|QM_PWM_TIMERNCONTROLREG_TIMER_INTERRUPT_MASK|macro|QM_PWM_TIMERNCONTROLREG_TIMER_INTERRUPT_MASK
DECL|QM_PWM_TIMERNCONTROLREG_TIMER_MODE|macro|QM_PWM_TIMERNCONTROLREG_TIMER_MODE
DECL|QM_PWM_TIMERNCONTROLREG_TIMER_PWM|macro|QM_PWM_TIMERNCONTROLREG_TIMER_PWM
DECL|QM_PWM|macro|QM_PWM
DECL|QM_PWM|macro|QM_PWM
DECL|QM_P_STS_ARC_HALT|macro|QM_P_STS_ARC_HALT
DECL|QM_P_STS_HALT_INTERRUPT_REDIRECTION|macro|QM_P_STS_HALT_INTERRUPT_REDIRECTION
DECL|QM_RTC_0|enumerator|typedef enum { QM_RTC_0 = 0, QM_RTC_NUM } qm_rtc_t;
DECL|QM_RTC_BASE|macro|QM_RTC_BASE
DECL|QM_RTC_CCR_ENABLE|macro|QM_RTC_CCR_ENABLE
DECL|QM_RTC_CCR_INTERRUPT_ENABLE|macro|QM_RTC_CCR_INTERRUPT_ENABLE
DECL|QM_RTC_CCR_INTERRUPT_MASK|macro|QM_RTC_CCR_INTERRUPT_MASK
DECL|QM_RTC_NUM|enumerator|typedef enum { QM_RTC_0 = 0, QM_RTC_NUM } qm_rtc_t;
DECL|QM_RTC|macro|QM_RTC
DECL|QM_RTC|macro|QM_RTC
DECL|QM_SCSS_CCU_BASE|macro|QM_SCSS_CCU_BASE
DECL|QM_SCSS_CCU_C2_LP_EN|macro|QM_SCSS_CCU_C2_LP_EN
DECL|QM_SCSS_CCU_SS_LPS_EN|macro|QM_SCSS_CCU_SS_LPS_EN
DECL|QM_SCSS_CCU_SYS_CLK_SEL|macro|QM_SCSS_CCU_SYS_CLK_SEL
DECL|QM_SCSS_CCU|macro|QM_SCSS_CCU
DECL|QM_SCSS_CCU|macro|QM_SCSS_CCU
DECL|QM_SCSS_CMP_BASE|macro|QM_SCSS_CMP_BASE
DECL|QM_SCSS_CMP|macro|QM_SCSS_CMP
DECL|QM_SCSS_CMP|macro|QM_SCSS_CMP
DECL|QM_SCSS_GP_BASE|macro|QM_SCSS_GP_BASE
DECL|QM_SCSS_GP|macro|QM_SCSS_GP
DECL|QM_SCSS_GP|macro|QM_SCSS_GP
DECL|QM_SCSS_HOST_VR_EN|macro|QM_SCSS_HOST_VR_EN
DECL|QM_SCSS_HOST_VR_VREG_SEL|macro|QM_SCSS_HOST_VR_VREG_SEL
DECL|QM_SCSS_INFO_BASE|macro|QM_SCSS_INFO_BASE
DECL|QM_SCSS_INFO|macro|QM_SCSS_INFO
DECL|QM_SCSS_INFO|macro|QM_SCSS_INFO
DECL|QM_SCSS_MEM_BASE|macro|QM_SCSS_MEM_BASE
DECL|QM_SCSS_MEM|macro|QM_SCSS_MEM
DECL|QM_SCSS_MEM|macro|QM_SCSS_MEM
DECL|QM_SCSS_PERIPHERAL_BASE|macro|QM_SCSS_PERIPHERAL_BASE
DECL|QM_SCSS_PERIPHERAL|macro|QM_SCSS_PERIPHERAL
DECL|QM_SCSS_PERIPHERAL|macro|QM_SCSS_PERIPHERAL
DECL|QM_SCSS_PLAT1P8_VR_EN|macro|QM_SCSS_PLAT1P8_VR_EN
DECL|QM_SCSS_PLAT1P8_VR_VREG_SEL|macro|QM_SCSS_PLAT1P8_VR_VREG_SEL
DECL|QM_SCSS_PLAT3P3_VR_EN|macro|QM_SCSS_PLAT3P3_VR_EN
DECL|QM_SCSS_PLAT3P3_VR_VREG_SEL|macro|QM_SCSS_PLAT3P3_VR_VREG_SEL
DECL|QM_SCSS_PM1C_SLPEN|macro|QM_SCSS_PM1C_SLPEN
DECL|QM_SCSS_PMUX_BASE|macro|QM_SCSS_PMUX_BASE
DECL|QM_SCSS_PMUX|macro|QM_SCSS_PMUX
DECL|QM_SCSS_PMUX|macro|QM_SCSS_PMUX
DECL|QM_SCSS_PMU_BASE|macro|QM_SCSS_PMU_BASE
DECL|QM_SCSS_PMU|macro|QM_SCSS_PMU
DECL|QM_SCSS_PMU|macro|QM_SCSS_PMU
DECL|QM_SCSS_SLP_CFG_LPMODE_EN|macro|QM_SCSS_SLP_CFG_LPMODE_EN
DECL|QM_SCSS_SLP_CFG_RTC_DIS|macro|QM_SCSS_SLP_CFG_RTC_DIS
DECL|QM_SCSS_SS_BASE|macro|QM_SCSS_SS_BASE
DECL|QM_SCSS_SS|macro|QM_SCSS_SS
DECL|QM_SCSS_SS|macro|QM_SCSS_SS
DECL|QM_SCSS_VR_EN|macro|QM_SCSS_VR_EN
DECL|QM_SCSS_VR_ROK|macro|QM_SCSS_VR_ROK
DECL|QM_SCSS_VR_VREG_SEL|macro|QM_SCSS_VR_VREG_SEL
DECL|QM_SI_OSC_1V2_MODE|macro|QM_SI_OSC_1V2_MODE
DECL|QM_SPI_CTRLR0_DFS_32_MASK|macro|QM_SPI_CTRLR0_DFS_32_MASK
DECL|QM_SPI_CTRLR0_DFS_32_OFFSET|macro|QM_SPI_CTRLR0_DFS_32_OFFSET
DECL|QM_SPI_CTRLR0_FRF_MASK|macro|QM_SPI_CTRLR0_FRF_MASK
DECL|QM_SPI_CTRLR0_FRF_OFFSET|macro|QM_SPI_CTRLR0_FRF_OFFSET
DECL|QM_SPI_CTRLR0_SCPOL_SCPH_MASK|macro|QM_SPI_CTRLR0_SCPOL_SCPH_MASK
DECL|QM_SPI_CTRLR0_SCPOL_SCPH_OFFSET|macro|QM_SPI_CTRLR0_SCPOL_SCPH_OFFSET
DECL|QM_SPI_CTRLR0_SLV_OE|macro|QM_SPI_CTRLR0_SLV_OE
DECL|QM_SPI_CTRLR0_TMOD_MASK|macro|QM_SPI_CTRLR0_TMOD_MASK
DECL|QM_SPI_CTRLR0_TMOD_OFFSET|macro|QM_SPI_CTRLR0_TMOD_OFFSET
DECL|QM_SPI_DMACR_RDMAE|macro|QM_SPI_DMACR_RDMAE
DECL|QM_SPI_DMACR_TDMAE|macro|QM_SPI_DMACR_TDMAE
DECL|QM_SPI_IMR_MASK_ALL|macro|QM_SPI_IMR_MASK_ALL
DECL|QM_SPI_IMR_RXFIM|macro|QM_SPI_IMR_RXFIM
DECL|QM_SPI_IMR_RXOIM|macro|QM_SPI_IMR_RXOIM
DECL|QM_SPI_IMR_RXUIM|macro|QM_SPI_IMR_RXUIM
DECL|QM_SPI_IMR_TXEIM|macro|QM_SPI_IMR_TXEIM
DECL|QM_SPI_IMR_TXOIM|macro|QM_SPI_IMR_TXOIM
DECL|QM_SPI_ISR_RXFIS|macro|QM_SPI_ISR_RXFIS
DECL|QM_SPI_ISR_RXOIS|macro|QM_SPI_ISR_RXOIS
DECL|QM_SPI_ISR_RXUIS|macro|QM_SPI_ISR_RXUIS
DECL|QM_SPI_ISR_TXEIS|macro|QM_SPI_ISR_TXEIS
DECL|QM_SPI_ISR_TXOIS|macro|QM_SPI_ISR_TXOIS
DECL|QM_SPI_MST_0_BASE|macro|QM_SPI_MST_0_BASE
DECL|QM_SPI_MST_0|enumerator|QM_SPI_MST_0 = 0,
DECL|QM_SPI_MST_1_BASE|macro|QM_SPI_MST_1_BASE
DECL|QM_SPI_MST_1|enumerator|QM_SPI_MST_1,
DECL|QM_SPI_NUM|enumerator|QM_SPI_NUM
DECL|QM_SPI_RISR_RXFIR|macro|QM_SPI_RISR_RXFIR
DECL|QM_SPI_RISR_RXOIR|macro|QM_SPI_RISR_RXOIR
DECL|QM_SPI_RISR_RXUIR|macro|QM_SPI_RISR_RXUIR
DECL|QM_SPI_RISR_TXEIR|macro|QM_SPI_RISR_TXEIR
DECL|QM_SPI_RISR_TXOIR|macro|QM_SPI_RISR_TXOIR
DECL|QM_SPI_SLV_0|enumerator|QM_SPI_SLV_0,
DECL|QM_SPI_SLV_BASE|macro|QM_SPI_SLV_BASE
DECL|QM_SPI_SR_BUSY|macro|QM_SPI_SR_BUSY
DECL|QM_SPI_SR_RFF|macro|QM_SPI_SR_RFF
DECL|QM_SPI_SR_RFNE|macro|QM_SPI_SR_RFNE
DECL|QM_SPI_SR_TFE|macro|QM_SPI_SR_TFE
DECL|QM_SPI_SR_TFNF|macro|QM_SPI_SR_TFNF
DECL|QM_SPI_SSIENR_SSIENR|macro|QM_SPI_SSIENR_SSIENR
DECL|QM_SPI|macro|QM_SPI
DECL|QM_SPI|macro|QM_SPI
DECL|QM_SS_CFG_ARC_RUN_REQ_A|macro|QM_SS_CFG_ARC_RUN_REQ_A
DECL|QM_SS_STS_HALT_INTERRUPT_REDIRECTION|macro|QM_SS_STS_HALT_INTERRUPT_REDIRECTION
DECL|QM_UART_0_BASE|macro|QM_UART_0_BASE
DECL|QM_UART_0|enumerator|typedef enum { QM_UART_0 = 0, QM_UART_1, QM_UART_NUM } qm_uart_t;
DECL|QM_UART_1_BASE|macro|QM_UART_1_BASE
DECL|QM_UART_1|enumerator|typedef enum { QM_UART_0 = 0, QM_UART_1, QM_UART_NUM } qm_uart_t;
DECL|QM_UART_CFG_BAUD_DLF_MASK|macro|QM_UART_CFG_BAUD_DLF_MASK
DECL|QM_UART_CFG_BAUD_DLF_OFFS|macro|QM_UART_CFG_BAUD_DLF_OFFS
DECL|QM_UART_CFG_BAUD_DLF_UNPACK|macro|QM_UART_CFG_BAUD_DLF_UNPACK
DECL|QM_UART_CFG_BAUD_DLH_MASK|macro|QM_UART_CFG_BAUD_DLH_MASK
DECL|QM_UART_CFG_BAUD_DLH_OFFS|macro|QM_UART_CFG_BAUD_DLH_OFFS
DECL|QM_UART_CFG_BAUD_DLH_UNPACK|macro|QM_UART_CFG_BAUD_DLH_UNPACK
DECL|QM_UART_CFG_BAUD_DLL_MASK|macro|QM_UART_CFG_BAUD_DLL_MASK
DECL|QM_UART_CFG_BAUD_DLL_OFFS|macro|QM_UART_CFG_BAUD_DLL_OFFS
DECL|QM_UART_CFG_BAUD_DLL_UNPACK|macro|QM_UART_CFG_BAUD_DLL_UNPACK
DECL|QM_UART_CFG_BAUD_DL_PACK|macro|QM_UART_CFG_BAUD_DL_PACK
DECL|QM_UART_FCR_DEFAULT_TX_RX_THRESHOLD|macro|QM_UART_FCR_DEFAULT_TX_RX_THRESHOLD
DECL|QM_UART_FCR_FIFOE|macro|QM_UART_FCR_FIFOE
DECL|QM_UART_FCR_RFIFOR|macro|QM_UART_FCR_RFIFOR
DECL|QM_UART_FCR_TX_0_RX_1_2_THRESHOLD|macro|QM_UART_FCR_TX_0_RX_1_2_THRESHOLD
DECL|QM_UART_FCR_XFIFOR|macro|QM_UART_FCR_XFIFOR
DECL|QM_UART_FIFO_DEPTH|macro|QM_UART_FIFO_DEPTH
DECL|QM_UART_FIFO_HALF_DEPTH|macro|QM_UART_FIFO_HALF_DEPTH
DECL|QM_UART_IER_ELSI|macro|QM_UART_IER_ELSI
DECL|QM_UART_IER_ERBFI|macro|QM_UART_IER_ERBFI
DECL|QM_UART_IER_ETBEI|macro|QM_UART_IER_ETBEI
DECL|QM_UART_IER_PTIME|macro|QM_UART_IER_PTIME
DECL|QM_UART_IIR_CHAR_TIMEOUT|macro|QM_UART_IIR_CHAR_TIMEOUT
DECL|QM_UART_IIR_IID_MASK|macro|QM_UART_IIR_IID_MASK
DECL|QM_UART_IIR_RECV_DATA_AVAIL|macro|QM_UART_IIR_RECV_DATA_AVAIL
DECL|QM_UART_IIR_RECV_LINE_STATUS|macro|QM_UART_IIR_RECV_LINE_STATUS
DECL|QM_UART_IIR_THR_EMPTY|macro|QM_UART_IIR_THR_EMPTY
DECL|QM_UART_LCR_BREAK|macro|QM_UART_LCR_BREAK
DECL|QM_UART_LCR_DLAB|macro|QM_UART_LCR_DLAB
DECL|QM_UART_LSR_BI|macro|QM_UART_LSR_BI
DECL|QM_UART_LSR_DR|macro|QM_UART_LSR_DR
DECL|QM_UART_LSR_ERROR_BITS|macro|QM_UART_LSR_ERROR_BITS
DECL|QM_UART_LSR_FE|macro|QM_UART_LSR_FE
DECL|QM_UART_LSR_OE|macro|QM_UART_LSR_OE
DECL|QM_UART_LSR_PE|macro|QM_UART_LSR_PE
DECL|QM_UART_LSR_RFE|macro|QM_UART_LSR_RFE
DECL|QM_UART_LSR_TEMT|macro|QM_UART_LSR_TEMT
DECL|QM_UART_LSR_THRE|macro|QM_UART_LSR_THRE
DECL|QM_UART_MCR_AFCE|macro|QM_UART_MCR_AFCE
DECL|QM_UART_MCR_LOOPBACK|macro|QM_UART_MCR_LOOPBACK
DECL|QM_UART_MCR_RTS|macro|QM_UART_MCR_RTS
DECL|QM_UART_NUM|enumerator|typedef enum { QM_UART_0 = 0, QM_UART_1, QM_UART_NUM } qm_uart_t;
DECL|QM_UART|macro|QM_UART
DECL|QM_UART|macro|QM_UART
DECL|QM_USB_0_BASE|macro|QM_USB_0_BASE
DECL|QM_USB_0|enumerator|typedef enum { QM_USB_0 = 0, QM_USB_NUM } qm_usb_t;
DECL|QM_USB_EP_DIR_IN_MASK|macro|QM_USB_EP_DIR_IN_MASK
DECL|QM_USB_IN_EP_0|enumerator|QM_USB_IN_EP_0 = 0,
DECL|QM_USB_IN_EP_1|enumerator|QM_USB_IN_EP_1 = 1,
DECL|QM_USB_IN_EP_2|enumerator|QM_USB_IN_EP_2 = 2,
DECL|QM_USB_IN_EP_3|enumerator|QM_USB_IN_EP_3 = 3,
DECL|QM_USB_IN_EP_4|enumerator|QM_USB_IN_EP_4 = 4,
DECL|QM_USB_IN_EP_5|enumerator|QM_USB_IN_EP_5 = 5,
DECL|QM_USB_IN_EP_NUM|macro|QM_USB_IN_EP_NUM
DECL|QM_USB_MAX_PACKET_SIZE|macro|QM_USB_MAX_PACKET_SIZE
DECL|QM_USB_NUM|enumerator|typedef enum { QM_USB_0 = 0, QM_USB_NUM } qm_usb_t;
DECL|QM_USB_OUT_EP_0|enumerator|QM_USB_OUT_EP_0 = 6,
DECL|QM_USB_OUT_EP_1|enumerator|QM_USB_OUT_EP_1 = 7,
DECL|QM_USB_OUT_EP_2|enumerator|QM_USB_OUT_EP_2 = 8,
DECL|QM_USB_OUT_EP_3|enumerator|QM_USB_OUT_EP_3 = 9
DECL|QM_USB_OUT_EP_NUM|macro|QM_USB_OUT_EP_NUM
DECL|QM_USB_PLL_CFG0_DEFAULT|macro|QM_USB_PLL_CFG0_DEFAULT
DECL|QM_USB_PLL_CFG0|macro|QM_USB_PLL_CFG0
DECL|QM_USB_PLL_CFG0|macro|QM_USB_PLL_CFG0
DECL|QM_USB_PLL_LOCK|macro|QM_USB_PLL_LOCK
DECL|QM_USB_PLL_PDLD|macro|QM_USB_PLL_PDLD
DECL|QM_USB|macro|QM_USB
DECL|QM_USB|macro|QM_USB
DECL|QM_WDT_0_BASE|macro|QM_WDT_0_BASE
DECL|QM_WDT_0|enumerator|typedef enum { QM_WDT_0 = 0, QM_WDT_NUM } qm_wdt_t;
DECL|QM_WDT_CLOCK_EN_MASK|macro|QM_WDT_CLOCK_EN_MASK
DECL|QM_WDT_CR_RMOD_OFFSET|macro|QM_WDT_CR_RMOD_OFFSET
DECL|QM_WDT_CR_RMOD|macro|QM_WDT_CR_RMOD
DECL|QM_WDT_CR_WDT_ENABLE|macro|QM_WDT_CR_WDT_ENABLE
DECL|QM_WDT_NUM|enumerator|typedef enum { QM_WDT_0 = 0, QM_WDT_NUM } qm_wdt_t;
DECL|QM_WDT_RELOAD_VALUE|macro|QM_WDT_RELOAD_VALUE
DECL|QM_WDT_TORR_TOP_MASK|macro|QM_WDT_TORR_TOP_MASK
DECL|QM_WDT|macro|QM_WDT
DECL|QM_WDT|macro|QM_WDT
DECL|QUARK_SE|macro|QUARK_SE
DECL|ROM_RD_DIS_L|macro|ROM_RD_DIS_L
DECL|ROM_RD_DIS_U|macro|ROM_RD_DIS_U
DECL|ROM_VERSION_ADDRESS|macro|ROM_VERSION_ADDRESS
DECL|ROM_VERSION_ADDRESS|macro|ROM_VERSION_ADDRESS
DECL|WR_ADDR_OFFSET|macro|WR_ADDR_OFFSET
DECL|WR_DONE|macro|WR_DONE
DECL|WR_REQ|macro|WR_REQ
DECL|__REGISTERS_H__|macro|__REGISTERS_H__
DECL|aon_vr|member|QM_RW uint32_t aon_vr; /**< AON Voltage Regulator */
DECL|aonc_cfg|member|QM_RW uint32_t aonc_cfg; /**< Always-on counter enable. */
DECL|aonc_cnt|member|QM_RW uint32_t aonc_cnt; /**< Always-on counter register. */
DECL|aonpt_cfg|member|aonpt_cfg; /**< Always-on periodic timer configuration register. */
DECL|aonpt_cnt|member|QM_RW uint32_t aonpt_cnt; /**< Always-on periodic timer. */
DECL|aonpt_ctrl|member|QM_RW uint32_t aonpt_ctrl; /**< Always-on periodic timer control. */
DECL|aonpt_stat|member|aonpt_stat; /**< Always-on periodic timer status register. */
DECL|apic_reg_pad_t|typedef|} apic_reg_pad_t;
DECL|apr|member|QM_RW apic_reg_pad_t apr; /**< Arbitration priority */
DECL|baudr|member|QM_RW uint32_t baudr; /**< Baud Rate Select */
DECL|baudr|member|uint32_t baudr; /**< Baud Rate Select. */
DECL|ccu_ext_clock_ctl|member|ccu_ext_clock_ctl; /**< External Clock Control Register. */
DECL|ccu_gpio_db_clk_ctl|member|ccu_gpio_db_clk_ctl; /**< Peripheral Clock Divider Control 1. */
DECL|ccu_lp_clk_ctl|member|QM_RW uint32_t ccu_lp_clk_ctl; /**< System Low Power Clock Control. */
DECL|ccu_mlayer_ahb_ctl|member|QM_RW uint32_t ccu_mlayer_ahb_ctl; /**< AHB Control Register. */
DECL|ccu_periph_clk_div_ctl0|member|ccu_periph_clk_div_ctl0; /**< Peripheral Clock Divider Control. 0 */
DECL|ccu_periph_clk_gate_ctl|member|ccu_periph_clk_gate_ctl; /**< Peripheral Clock Gate Control. */
DECL|ccu_ss_periph_clk_gate_ctl|member|QM_RW uint32_t ccu_ss_periph_clk_gate_ctl;
DECL|ccu_sys_clk_ctl|member|QM_RW uint32_t ccu_sys_clk_ctl; /**< System Clock Control Register. */
DECL|cfg_high|member|QM_RW uint32_t cfg_high; /**< CFG */
DECL|cfg_high|member|QM_RW uint32_t cfg_high; /**< DmaCfgReg */
DECL|cfg_high|member|uint32_t cfg_high; /**< Channel Configuration Upper. */
DECL|cfg_lock|member|QM_RW uint32_t cfg_lock; /**< Configuration Lock */
DECL|cfg_low|member|QM_RW uint32_t cfg_low; /**< CFG */
DECL|cfg_low|member|QM_RW uint32_t cfg_low; /**< DmaCfgReg */
DECL|cfg_low|member|uint32_t cfg_low; /**< Channel Configuration Lower. */
DECL|ch_ctrl|member|QM_RW uint32_t ch_ctrl; /**< Channel Control Word */
DECL|ch_data|member|QM_RW uint32_t ch_data[4]; /**< Channel Payload Data Word 0 */
DECL|ch_sts|member|QM_RW uint32_t ch_sts; /**< Channel status */
DECL|chan_en_high|member|QM_RW uint32_t chan_en_high; /**< ChEnReg */
DECL|chan_en_low|member|QM_RW uint32_t chan_en_low; /**< ChEnReg */
DECL|chan_reg|member|QM_RW qm_dma_chan_reg_t chan_reg[8]; /**< Channel Register */
DECL|channel|member|} channel[QM_DMA_CHANNEL_NUM];
DECL|channel|member|} channel[QM_PWM_ID_NUM];
DECL|clear_block_high|member|QM_RW uint32_t clear_block_high; /**< ClearBlock */
DECL|clear_block_low|member|QM_RW uint32_t clear_block_low; /**< ClearBlock */
DECL|clear_dst_trans_high|member|QM_RW uint32_t clear_dst_trans_high; /**< ClearDstTran */
DECL|clear_dst_trans_low|member|QM_RW uint32_t clear_dst_trans_low; /**< ClearDstTran */
DECL|clear_err_high|member|QM_RW uint32_t clear_err_high; /**< ClearErr */
DECL|clear_err_low|member|QM_RW uint32_t clear_err_low; /**< ClearErr */
DECL|clear_src_trans_high|member|QM_RW uint32_t clear_src_trans_high; /**< ClearSrcTran */
DECL|clear_src_trans_low|member|QM_RW uint32_t clear_src_trans_low; /**< ClearSrcTran */
DECL|clear_tfr_high|member|QM_RW uint32_t clear_tfr_high; /**< ClearTfr */
DECL|clear_tfr_low|member|QM_RW uint32_t clear_tfr_low; /**< ClearTfr */
DECL|clk_periph_t|typedef|} clk_periph_t;
DECL|cmp_en|member|QM_RW uint32_t cmp_en; /**< Comparator enable. */
DECL|cmp_pwr|member|QM_RW uint32_t cmp_pwr; /**< Comparator power enable register. */
DECL|cmp_ref_pol|member|cmp_ref_pol; /**< Comparator reference polarity select register. */
DECL|cmp_ref_sel|member|QM_RW uint32_t cmp_ref_sel; /**< Comparator reference select. */
DECL|cmp_stat_clr|member|QM_RW uint32_t cmp_stat_clr; /**< Comparator clear register. */
DECL|controlreg|member|QM_RW uint32_t controlreg; /**< Control */
DECL|controlreg|member|uint32_t controlreg; /**< Control Register. */
DECL|con|member|uint32_t con; /**< Control Register. */
DECL|ctrl_high|member|QM_RW uint32_t ctrl_high; /**< CTL */
DECL|ctrl_low|member|QM_RW uint32_t ctrl_low; /**< CTL */
DECL|ctrl_low|member|uint32_t ctrl_low; /**< Channel Control Lower. */
DECL|ctrlr0|member|QM_RW uint32_t ctrlr0; /**< Control Register 0 */
DECL|ctrlr0|member|uint32_t ctrlr0; /**< Control Register 0. */
DECL|ctrlr1|member|QM_RW uint32_t ctrlr1; /**< Control Register 1 */
DECL|ctrl|member|QM_RW uint32_t ctrl; /**< CTRL. */
DECL|ctrl|member|uint32_t ctrl;
DECL|currentvalue|member|QM_RW uint32_t currentvalue; /**< Current Value */
DECL|daintmsk|member|QM_RW uint32_t daintmsk; /**< Device Interrupt Mask Register. */
DECL|daint|member|QM_R uint32_t daint; /**< Device Interrupt Register. */
DECL|dar_high|member|QM_RW uint32_t dar_high; /**< DAR */
DECL|dar_low|member|QM_RW uint32_t dar_low; /**< DAR */
DECL|dcfg|member|QM_RW uint32_t dcfg; /**< Device config. */
DECL|dctl|member|QM_RW uint32_t dctl; /**< Device control. */
DECL|dfr|member|QM_RW apic_reg_pad_t dfr; /**< Destination format */
DECL|diepctl|member|QM_RW uint32_t diepctl;
DECL|diepdma|member|QM_RW uint32_t diepdma;
DECL|diepempmsk|member|QM_RW uint32_t diepempmsk; /**< IN EP FIFO Empty Intr Mask. */
DECL|diepint|member|QM_RW uint32_t diepint;
DECL|diepmsk|member|QM_RW uint32_t diepmsk; /**< IN EP Common Interrupt Mask. */
DECL|dieptsiz|member|QM_RW uint32_t dieptsiz;
DECL|dieptxf1|member|QM_RW uint32_t dieptxf1;
DECL|dieptxf2|member|QM_RW uint32_t dieptxf2;
DECL|dieptxf3|member|QM_RW uint32_t dieptxf3;
DECL|dieptxf4|member|QM_RW uint32_t dieptxf4;
DECL|dieptxf5|member|QM_RW uint32_t dieptxf5;
DECL|dlf|member|QM_RW uint32_t dlf; /**< Divisor Latch Fraction */
DECL|dlf|member|uint32_t dlf; /**< Divisor Latch Fraction. */
DECL|dlh|member|uint32_t dlh; /**< Divisor Latch High. */
DECL|dll|member|uint32_t dll; /**< Divisor Latch Low. */
DECL|dmacr|member|QM_RW uint32_t dmacr; /**< DMA Control Register */
DECL|dmardlr|member|QM_RW uint32_t dmardlr; /**< DMA Receive Data Level */
DECL|dmasa|member|QM_RW uint32_t dmasa; /**< DMA Software Acknowledge */
DECL|dmatdlr|member|QM_RW uint32_t dmatdlr; /**< DMA Transmit Data Level */
DECL|doepctl|member|QM_RW uint32_t doepctl;
DECL|doepdma|member|QM_RW uint32_t doepdma;
DECL|doepint|member|QM_RW uint32_t doepint;
DECL|doepmsk|member|QM_RW uint32_t doepmsk; /**< OUT EP Common Interrupt Mask. */
DECL|doeptsiz|member|QM_RW uint32_t doeptsiz;
DECL|dr|member|QM_RW uint32_t dr[36]; /**< Data Register */
DECL|dst_sg_high|member|QM_RW uint32_t dst_sg_high; /**< DSR */
DECL|dst_sg_low|member|QM_RW uint32_t dst_sg_low; /**< DSR */
DECL|dst_stat_addr_high|member|QM_RW uint32_t dst_stat_addr_high; /**< DSTATAR */
DECL|dst_stat_addr_low|member|QM_RW uint32_t dst_stat_addr_low; /**< DSTATAR */
DECL|dst_stat_high|member|QM_RW uint32_t dst_stat_high; /**< DSTAT */
DECL|dst_stat_low|member|QM_RW uint32_t dst_stat_low; /**< DSTAT */
DECL|dsts|member|QM_RW uint32_t dsts; /**< Device Status. */
DECL|dthrctl|member|QM_RW uint32_t dthrctl; /**< Device Threshold Ctrl. */
DECL|dtxfsts|member|QM_RW uint32_t dtxfsts;
DECL|dvbusdis|member|QM_RW uint32_t dvbusdis; /**< VBUS discharge time register. */
DECL|dvbuspulse|member|QM_RW uint32_t dvbuspulse; /**< Device VBUS discharge time. */
DECL|enable|member|uint32_t enable; /**< Enable. */
DECL|eoi|member|QM_RW apic_reg_pad_t eoi; /**< EOI register. */
DECL|eoi|member|QM_RW apic_reg_pad_t eoi; /**< End of interrupt */
DECL|eoi|member|QM_RW uint32_t eoi; /**< End Of Interrupt */
DECL|esr|member|QM_RW apic_reg_pad_t esr; /**< Error status */
DECL|flash_stts|member|QM_RW uint32_t flash_stts; /**< FLASH_STTS. */
DECL|flash_wr_ctrl|member|QM_RW uint32_t flash_wr_ctrl; /**< FLASH_WR_CTRL. */
DECL|flash_wr_data|member|QM_RW uint32_t flash_wr_data; /**< FLASH_WR_DATA. */
DECL|fpr_rd_cfg|member|QM_RW uint32_t fpr_rd_cfg[4]; /**< 4 FPR_RD_CFG registers. */
DECL|fpr_rd_cfg|member|uint32_t fpr_rd_cfg[QM_FPR_NUM];
DECL|fs_scl_hcnt|member|uint32_t fs_scl_hcnt; /**< Fast Speed Clock SCL High Count. */
DECL|fs_scl_lcnt|member|uint32_t fs_scl_lcnt; /**< Fast Speed I2C Clock SCL Low Count. */
DECL|fs_spklen|member|uint32_t fs_spklen; /**< SS and FS Spike Suppression Limit. */
DECL|gahbcfg|member|QM_RW uint32_t gahbcfg; /**< AHB Configuration. */
DECL|gdfifocfg|member|QM_RW uint32_t gdfifocfg; /**< Global DFIFO Configuration. */
DECL|ghwcfg1|member|QM_R uint32_t ghwcfg1; /**< HW config - Endpoint direction. */
DECL|ghwcfg2|member|QM_R uint32_t ghwcfg2; /**< HW config 2. */
DECL|ghwcfg3|member|QM_R uint32_t ghwcfg3; /**< HW config 3. */
DECL|ghwcfg4|member|QM_R uint32_t ghwcfg4; /**< HW config 4. */
DECL|gintmsk|member|QM_RW uint32_t gintmsk; /**< Interrupt Mask. */
DECL|gintsts|member|QM_RW uint32_t gintsts; /**< Interrupt Status. */
DECL|gnptxfsiz|member|QM_R uint32_t gnptxfsiz; /**< Non-periodic Transmit FIFO Size. */
DECL|gotgctl|member|QM_RW uint32_t gotgctl; /**< OTG Control. */
DECL|gotgint|member|QM_RW uint32_t gotgint; /**< OTG Interrupt. */
DECL|gp0|member|QM_RW uint32_t gp0; /**< General Purpose Scratchpad Register 0 */
DECL|gp1|member|QM_RW uint32_t gp1; /**< General Purpose Scratchpad Register 1 */
DECL|gp2|member|QM_RW uint32_t gp2; /**< General Purpose Scratchpad Register 2 */
DECL|gp3|member|QM_RW uint32_t gp3; /**< General Purpose Scratchpad Register 3 */
DECL|gpio_config_reg1|member|QM_RW uint32_t gpio_config_reg1; /**< GPIO Configuration Register 1 */
DECL|gpio_config_reg2|member|QM_RW uint32_t gpio_config_reg2; /**< GPIO Configuration Register 2 */
DECL|gpio_debounce|member|QM_RW uint32_t gpio_debounce; /**< Debounce Enable */
DECL|gpio_debounce|member|uint32_t gpio_debounce; /**< Debounce Enable. */
DECL|gpio_ext_porta|member|QM_RW uint32_t gpio_ext_porta; /**< Port A External Port */
DECL|gpio_int_bothedge|member|QM_RW uint32_t gpio_int_bothedge; /**< Interrupt both edge type */
DECL|gpio_int_bothedge|member|uint32_t gpio_int_bothedge; /**< Interrupt both edge type. */
DECL|gpio_int_polarity|member|QM_RW uint32_t gpio_int_polarity; /**< Interrupt Polarity */
DECL|gpio_int_polarity|member|uint32_t gpio_int_polarity; /**< Interrupt Polarity. */
DECL|gpio_inten|member|QM_RW uint32_t gpio_inten; /**< Interrupt Enable */
DECL|gpio_inten|member|uint32_t gpio_inten; /**< Interrupt Enable. */
DECL|gpio_intmask|member|QM_RW uint32_t gpio_intmask; /**< Interrupt Mask */
DECL|gpio_intmask|member|uint32_t gpio_intmask; /**< Interrupt Mask. */
DECL|gpio_intstatus|member|QM_RW uint32_t gpio_intstatus; /**< Interrupt Status */
DECL|gpio_inttype_level|member|QM_RW uint32_t gpio_inttype_level; /**< Interrupt Type */
DECL|gpio_inttype_level|member|uint32_t gpio_inttype_level; /**< Interrupt Type. */
DECL|gpio_ls_sync|member|QM_RW uint32_t gpio_ls_sync; /**< Synchronization Level */
DECL|gpio_ls_sync|member|uint32_t gpio_ls_sync; /**< Synchronization Level. */
DECL|gpio_porta_eoi|member|QM_RW uint32_t gpio_porta_eoi; /**< Clear Interrupt */
DECL|gpio_raw_intstatus|member|QM_RW uint32_t gpio_raw_intstatus; /**< Raw Interrupt Status */
DECL|gpio_swporta_ctl|member|QM_RW uint32_t gpio_swporta_ctl; /**< Port A Data Source */
DECL|gpio_swporta_ctl|member|uint32_t gpio_swporta_ctl; /**< Port A Data Source. */
DECL|gpio_swporta_ddr|member|QM_RW uint32_t gpio_swporta_ddr; /**< Port A Data Direction */
DECL|gpio_swporta_ddr|member|uint32_t gpio_swporta_ddr; /**< Port A Data Direction. */
DECL|gpio_swporta_dr|member|QM_RW uint32_t gpio_swporta_dr; /**< Port A Data */
DECL|gpio_swporta_dr|member|uint32_t gpio_swporta_dr; /**< Port A Data. */
DECL|gps0|member|QM_RW uint32_t gps0; /**< General Purpose Sticky Register 0 */
DECL|gps1|member|QM_RW uint32_t gps1; /**< General Purpose Sticky Register 1 */
DECL|gps2|member|QM_RW uint32_t gps2; /**< General Purpose Sticky Register 2 */
DECL|gps3|member|QM_RW uint32_t gps3; /**< General Purpose Sticky Register 3 */
DECL|grstctl|member|QM_RW uint32_t grstctl; /**< Reset Register. */
DECL|grxfsiz|member|QM_R uint32_t grxfsiz; /**< Receive FIFO Size. */
DECL|grxstsp|member|QM_R uint32_t grxstsp; /**< Receive Status Read/Pop. */
DECL|grxstsr|member|QM_R uint32_t grxstsr; /**< Receive Status Read/Pop. */
DECL|gsnpsid|member|QM_R uint32_t gsnpsid; /**< Synopsys ID. */
DECL|gusbcfg|member|QM_RW uint32_t gusbcfg; /**< USB Configuration. */
DECL|host_vr|member|QM_RW uint32_t host_vr; /**< Host Voltage Regulator */
DECL|htx|member|QM_RW uint32_t htx; /**< Halt Transmission */
DECL|htx|member|uint32_t htx; /**< Halt Transmission. */
DECL|ic_ack_general_call|member|QM_RW uint32_t ic_ack_general_call; /**< General Call Ack */
DECL|ic_clr_activity|member|QM_RW uint32_t ic_clr_activity; /**< Clear ACTIVITY Interrupt */
DECL|ic_clr_gen_call|member|QM_RW uint32_t ic_clr_gen_call; /**< Clear GEN_CALL Interrupt */
DECL|ic_clr_intr|member|ic_clr_intr; /**< Clear Combined and Individual Interrupt */
DECL|ic_clr_rd_req|member|QM_RW uint32_t ic_clr_rd_req; /**< Clear RD_REQ Interrupt */
DECL|ic_clr_rx_done|member|QM_RW uint32_t ic_clr_rx_done; /**< Clear RX_DONE Interrupt */
DECL|ic_clr_rx_over|member|QM_RW uint32_t ic_clr_rx_over; /**< Clear RX_OVER Interrupt */
DECL|ic_clr_rx_under|member|QM_RW uint32_t ic_clr_rx_under; /**< Clear RX_UNDER Interrupt */
DECL|ic_clr_start_det|member|QM_RW uint32_t ic_clr_start_det; /**< Clear START_DET Interrupt */
DECL|ic_clr_stop_det|member|QM_RW uint32_t ic_clr_stop_det; /**< Clear STOP_DET Interrupt */
DECL|ic_clr_tx_abrt|member|QM_RW uint32_t ic_clr_tx_abrt; /**< Clear TX_ABRT Interrupt */
DECL|ic_clr_tx_over|member|QM_RW uint32_t ic_clr_tx_over; /**< Clear TX_OVER Interrupt */
DECL|ic_comp_param_1|member|QM_RW uint32_t ic_comp_param_1; /**< Configuration Parameters */
DECL|ic_comp_type|member|QM_RW uint32_t ic_comp_type; /**< Component Type */
DECL|ic_comp_version|member|QM_RW uint32_t ic_comp_version; /**< Component Version */
DECL|ic_con|member|QM_RW uint32_t ic_con; /**< Control Register */
DECL|ic_data_cmd|member|QM_RW uint32_t ic_data_cmd; /**< Data Buffer and Command */
DECL|ic_dma_cr|member|QM_RW uint32_t ic_dma_cr; /**< DMA Control Register for Tx and Rx
DECL|ic_dma_rdlr|member|QM_RW uint32_t ic_dma_rdlr; /**< I2C Receive Data Level Register */
DECL|ic_dma_tdlr|member|QM_RW uint32_t ic_dma_tdlr; /**< DMA Transmit Data Level Register */
DECL|ic_enable_status|member|QM_RW uint32_t ic_enable_status; /**< Enable Status */
DECL|ic_enable|member|QM_RW uint32_t ic_enable; /**< Enable */
DECL|ic_fs_scl_hcnt|member|QM_RW uint32_t ic_fs_scl_hcnt; /**< Fast Speed Clock SCL High Count */
DECL|ic_fs_scl_lcnt|member|ic_fs_scl_lcnt; /**< Fast Speed I2C Clock SCL Low Count */
DECL|ic_fs_spklen|member|QM_RW uint32_t ic_fs_spklen; /**< SS and FS Spike Suppression Limit */
DECL|ic_hs_maddr|member|QM_RW uint32_t ic_hs_maddr; /**< High Speed Master ID */
DECL|ic_hs_scl_hcnt|member|ic_hs_scl_hcnt; /**< High Speed I2C Clock SCL High Count */
DECL|ic_hs_scl_lcnt|member|ic_hs_scl_lcnt; /**< High Speed I2C Clock SCL Low Count */
DECL|ic_hs_spklen|member|QM_RW uint32_t ic_hs_spklen; /**< HS spike suppression limit */
DECL|ic_intr_mask|member|QM_RW uint32_t ic_intr_mask; /**< Interrupt Mask */
DECL|ic_intr_mask|member|uint32_t ic_intr_mask; /**< I2C Interrupt Mask. */
DECL|ic_intr_stat|member|QM_RW uint32_t ic_intr_stat; /**< Interrupt Status */
DECL|ic_raw_intr_stat|member|QM_RW uint32_t ic_raw_intr_stat; /**< Raw Interrupt Status */
DECL|ic_rx_tl|member|QM_RW uint32_t ic_rx_tl; /**< Receive FIFO Threshold Level */
DECL|ic_rxflr|member|QM_RW uint32_t ic_rxflr; /**< Receive FIFO Level */
DECL|ic_sar|member|QM_RW uint32_t ic_sar; /**< Slave Address */
DECL|ic_sda_hold|member|QM_RW uint32_t ic_sda_hold; /**< SDA Hold */
DECL|ic_sda_setup|member|QM_RW uint32_t ic_sda_setup; /**< SDA Setup */
DECL|ic_ss_scl_hcnt|member|ic_ss_scl_hcnt; /**< Standard Speed Clock SCL High Count */
DECL|ic_ss_scl_lcnt|member|ic_ss_scl_lcnt; /**< Standard Speed Clock SCL Low Count */
DECL|ic_status|member|QM_RW uint32_t ic_status; /**< Status */
DECL|ic_tar|member|QM_RW uint32_t ic_tar; /**< Master Target Address */
DECL|ic_tx_abrt_source|member|QM_RW uint32_t ic_tx_abrt_source; /**< Transmit Abort Source */
DECL|ic_tx_tl|member|QM_RW uint32_t ic_tx_tl; /**< Transmit FIFO Threshold Level */
DECL|ic_txflr|member|QM_RW uint32_t ic_txflr; /**< Transmit FIFO Level */
DECL|icr|member|QM_RW apic_reg_pad_t icr[2]; /**< Interrupt command */
DECL|icr|member|QM_RW uint32_t icr; /**< Interrupt Clear Register */
DECL|id_high|member|QM_RW uint32_t id_high; /**< DmaIdReg */
DECL|id_low|member|QM_RW uint32_t id_low; /**< DmaIdReg */
DECL|idr|member|QM_RW uint32_t idr; /**< Identification Register */
DECL|id|member|QM_RW apic_reg_pad_t id; /**< LAPIC ID */
DECL|id|member|QM_RW uint32_t id;
DECL|id|member|QM_RW uint32_t id; /**< Identification Register */
DECL|ier_dlh|member|QM_RW uint32_t ier_dlh; /**< Interrupt Enable / Divisor Latch High */
DECL|ier|member|uint32_t ier; /**< Interrupt Enable Register. */
DECL|iir_fcr|member|QM_RW uint32_t iir_fcr; /**< Interrupt Identification / FIFO Control */
DECL|imr|member|QM_RW uint32_t imr; /**< Interrupt Mask Register */
DECL|in_ep_reg|member|qm_usb_in_ep_reg_t in_ep_reg[QM_USB_IN_EP_NUM];
DECL|int_reg|member|QM_RW qm_dma_int_reg_t int_reg; /**< Interrupt Register */
DECL|intstatus|member|QM_RW uint32_t intstatus; /**< Interrupt Status */
DECL|ioregsel|member|QM_RW apic_reg_pad_t ioregsel; /**< Register selector. */
DECL|iowin|member|QM_RW apic_reg_pad_t iowin; /**< Register window. */
DECL|irr|member|QM_RW apic_reg_pad_t irr[8]; /**< Interrupt request */
DECL|isr|member|QM_RW apic_reg_pad_t isr[8]; /**< In-service */
DECL|isr|member|QM_RW uint32_t isr; /**< Interrupt Status Register */
DECL|lcr|member|QM_RW uint32_t lcr; /**< Line Control */
DECL|lcr|member|uint32_t lcr; /**< Line Control. */
DECL|ldr|member|QM_RW apic_reg_pad_t ldr; /**< Logical destination */
DECL|llp_high|member|QM_RW uint32_t llp_high; /**< LLP */
DECL|llp_low|member|QM_RW uint32_t llp_low; /**< LLP */
DECL|llp_low|member|uint32_t llp_low; /**< Channel Linked List Pointer. */
DECL|loadcount2|member|uint32_t loadcount2; /**< Load Count 2. */
DECL|loadcount|member|QM_RW uint32_t loadcount; /**< Load Count */
DECL|loadcount|member|uint32_t loadcount; /**< Load Count 1. */
DECL|lsr|member|QM_RW uint32_t lsr; /**< Line Status */
DECL|lvtcmci|member|QM_RW apic_reg_pad_t lvtcmci; /**< Corrected Machine Check vector */
DECL|lvterr|member|QM_RW apic_reg_pad_t lvterr; /**< Error vector */
DECL|lvtlint0|member|QM_RW apic_reg_pad_t lvtlint0; /**< Local interrupt 0 vector */
DECL|lvtlint1|member|QM_RW apic_reg_pad_t lvtlint1; /**< Local interrupt 1 vector */
DECL|lvtpmcr|member|QM_RW apic_reg_pad_t lvtpmcr; /**< Perfmon counter vector */
DECL|lvttimer|member|QM_RW apic_reg_pad_t lvttimer; /**< Timer vector */
DECL|lvttimer|member|uint32_t lvttimer; /**< Timer Entry in Local Vector Table. */
DECL|lvtts|member|QM_RW apic_reg_pad_t lvtts; /**< Thermal sensor vector */
DECL|mask_block_high|member|QM_RW uint32_t mask_block_high; /**< MaskBlock */
DECL|mask_block_low|member|QM_RW uint32_t mask_block_low; /**< MaskBlock */
DECL|mask_dst_trans_high|member|QM_RW uint32_t mask_dst_trans_high; /**< MaskDstTran */
DECL|mask_dst_trans_low|member|QM_RW uint32_t mask_dst_trans_low; /**< MaskDstTran */
DECL|mask_err_high|member|QM_RW uint32_t mask_err_high; /**< MaskErr */
DECL|mask_err_low|member|QM_RW uint32_t mask_err_low; /**< MaskErr */
DECL|mask_src_trans_high|member|QM_RW uint32_t mask_src_trans_high; /**< MaskSrcTran */
DECL|mask_src_trans_low|member|QM_RW uint32_t mask_src_trans_low; /**< MaskSrcTran */
DECL|mask_tfr_high|member|QM_RW uint32_t mask_tfr_high; /**< MaskTfr */
DECL|mask_tfr_low|member|QM_RW uint32_t mask_tfr_low; /**< MaskTfr */
DECL|mbox_chall_sts|member|QM_RW uint32_t mbox_chall_sts; /**< All channel status */
DECL|mbox|member|qm_mailbox_t mbox[NUM_MAILBOXES]; /**< 8 Mailboxes */
DECL|mcr|member|QM_RW uint32_t mcr; /**< MODEM Control */
DECL|mcr|member|uint32_t mcr; /**< Modem Control. */
DECL|mem_ctrl|member|QM_RW uint32_t mem_ctrl; /**< Memory control */
DECL|misc_cfg_low|member|uint32_t misc_cfg_low; /**< DMA Configuration. */
DECL|misc_reg|member|QM_RW qm_dma_misc_reg_t misc_reg; /**< Miscellaneous Register */
DECL|mpr_cfg|member|QM_RW uint32_t mpr_cfg[4]; /**< MPR CFG */
DECL|mpr_cfg|member|uint32_t mpr_cfg[QM_MPR_NUM]; /**< MPR Configuration Register. */
DECL|mpr_vdata|member|QM_RW uint32_t mpr_vdata; /**< MPR_VDATA */
DECL|mpr_vsts|member|QM_RW uint32_t mpr_vsts; /**< MPR_VSTS */
DECL|mpr_vsts|member|QM_RW uint32_t mpr_vsts; /**< Protection Status Register. */
DECL|mpr_wr_cfg|member|mpr_wr_cfg; /**< Flash Write Protection Control Register. */
DECL|msr|member|QM_RW uint32_t msr; /**< MODEM Status */
DECL|msticr|member|QM_RW uint32_t msticr; /**< Multi-Master Interrupt Clear Register */
DECL|mwcr|member|QM_RW uint32_t mwcr; /**< Microwire Control Register */
DECL|osc0_cfg0|member|QM_RW uint32_t osc0_cfg0; /**< Hybrid Oscillator Configuration 0. */
DECL|osc0_cfg1|member|QM_RW uint32_t osc0_cfg1; /**< Hybrid Oscillator configuration 1. */
DECL|osc0_stat1|member|QM_RW uint32_t osc0_stat1; /**< Hybrid Oscillator status 1. */
DECL|osc1_cfg0|member|QM_RW uint32_t osc1_cfg0; /**< RTC Oscillator Configuration 0. */
DECL|osc1_stat0|member|QM_RW uint32_t osc1_stat0; /**< RTC Oscillator status 0. */
DECL|osc_lock_0|member|QM_RW uint32_t osc_lock_0; /**< Clocks Lock Register. */
DECL|out_ep_reg|member|qm_usb_out_ep_reg_t out_ep_reg[QM_USB_OUT_EP_NUM];
DECL|p_lvl2|member|QM_RW uint32_t p_lvl2; /**< Processor level 2 */
DECL|p_sts|member|QM_RW uint32_t p_sts; /**< Processor Status */
DECL|padding|member|QM_RW uint32_t padding[0xC0]; /* Padding (0x400-0xFC)/4 */
DECL|padding|member|QM_RW uint32_t padding[0xC4]; /* (0x400 - 0xF0) / 4 */
DECL|padding|member|QM_RW uint32_t padding[0xCF]; /* (0x400 - 0xC4) / 4 */
DECL|pad|member|QM_RW uint32_t pad[3];
DECL|periph_cfg0|member|QM_RW uint32_t periph_cfg0; /**< Peripheral Configuration */
DECL|plat1p8_vr|member|QM_RW uint32_t plat1p8_vr; /**< Platform 1p8 voltage regulator */
DECL|plat3p3_vr|member|QM_RW uint32_t plat3p3_vr; /**< Platform 3p3 voltage regulator */
DECL|pm1c|member|QM_RW uint32_t pm1c; /**< Power management 1 control */
DECL|pm_lock|member|QM_RW uint32_t pm_lock; /**< Power Management Lock */
DECL|pm_wait|member|QM_RW uint32_t pm_wait; /**< Power Management Wait */
DECL|pmnetcs|member|QM_RW uint32_t pmnetcs;
DECL|pmux_in_en_lock|member|QM_RW uint32_t pmux_in_en_lock; /**< Pin Mux Slew Rate Lock */
DECL|pmux_in_en|member|QM_RW uint32_t pmux_in_en[4]; /**< Pin Mux Input Enable */
DECL|pmux_pullup_lock|member|QM_RW uint32_t pmux_pullup_lock; /**< Pin Mux Pullup Lock */
DECL|pmux_pullup|member|QM_RW uint32_t pmux_pullup[4]; /**< Pin Mux Pullup */
DECL|pmux_sel_lock|member|QM_RW uint32_t pmux_sel_lock[3]; /**< Pin Mux Select Lock */
DECL|pmux_sel|member|QM_RW uint32_t pmux_sel[5]; /**< Pin Mux Select */
DECL|pmux_slew_lock|member|QM_RW uint32_t pmux_slew_lock; /**< Pin Mux Slew Rate Lock */
DECL|pmux_slew|member|QM_RW uint32_t pmux_slew[4]; /**< Pin Mux Slew Rate */
DECL|ppr|member|QM_RW apic_reg_pad_t ppr; /**< Processor priority */
DECL|qm_aonc_context_t|macro|qm_aonc_context_t
DECL|qm_aonc_reg_t|typedef|} qm_aonc_reg_t;
DECL|qm_aonc_t|typedef|typedef enum { QM_AONC_0 = 0, QM_AONC_NUM } qm_aonc_t;
DECL|qm_dma_chan_reg_t|typedef|} qm_dma_chan_reg_t;
DECL|qm_dma_channel_id_t|typedef|} qm_dma_channel_id_t;
DECL|qm_dma_context_t|typedef|} qm_dma_context_t;
DECL|qm_dma_handshake_interface_t|typedef|} qm_dma_handshake_interface_t;
DECL|qm_dma_int_reg_t|typedef|} qm_dma_int_reg_t;
DECL|qm_dma_misc_reg_t|typedef|} qm_dma_misc_reg_t;
DECL|qm_dma_reg_t|typedef|} qm_dma_reg_t;
DECL|qm_dma_t|typedef|} qm_dma_t;
DECL|qm_flash_context_t|typedef|} qm_flash_context_t;
DECL|qm_flash_reg_t|typedef|} qm_flash_reg_t;
DECL|qm_flash_t|typedef|typedef enum { QM_FLASH_0 = 0, QM_FLASH_1, QM_FLASH_NUM } qm_flash_t;
DECL|qm_fpr_context_t|typedef|} qm_fpr_context_t;
DECL|qm_fpr_id_t|typedef|} qm_fpr_id_t;
DECL|qm_gpio_context_t|typedef|} qm_gpio_context_t;
DECL|qm_gpio_reg_t|typedef|} qm_gpio_reg_t;
DECL|qm_gpio_t|typedef|typedef enum { QM_GPIO_0 = 0, QM_AON_GPIO_0 = 1, QM_GPIO_NUM } qm_gpio_t;
DECL|qm_i2c_context_t|typedef|} qm_i2c_context_t;
DECL|qm_i2c_reg_t|typedef|} qm_i2c_reg_t;
DECL|qm_i2c_t|typedef|typedef enum { QM_I2C_0 = 0, QM_I2C_1, QM_I2C_NUM } qm_i2c_t;
DECL|qm_ioapic_reg_t|typedef|} qm_ioapic_reg_t;
DECL|qm_irq_context_t|typedef|} qm_irq_context_t;
DECL|qm_lapic_reg_t|typedef|} qm_lapic_reg_t;
DECL|qm_mailbox_reg_t|typedef|} qm_mailbox_reg_t;
DECL|qm_mailbox_t|typedef|} qm_mailbox_t;
DECL|qm_mpr_context_t|typedef|} qm_mpr_context_t;
DECL|qm_mpr_id_t|typedef|} qm_mpr_id_t;
DECL|qm_mpr_reg_t|typedef|} qm_mpr_reg_t;
DECL|qm_pic_timer_context_t|typedef|} qm_pic_timer_context_t;
DECL|qm_pwm_channel_t|typedef|} qm_pwm_channel_t;
DECL|qm_pwm_context_t|typedef|} qm_pwm_context_t;
DECL|qm_pwm_id_t|typedef|} qm_pwm_id_t;
DECL|qm_pwm_reg_t|typedef|} qm_pwm_reg_t;
DECL|qm_pwm_t|typedef|typedef enum { QM_PWM_0 = 0, QM_PWM_NUM } qm_pwm_t;
DECL|qm_rtc_context_t|macro|qm_rtc_context_t
DECL|qm_rtc_reg_t|typedef|} qm_rtc_reg_t;
DECL|qm_rtc_t|typedef|typedef enum { QM_RTC_0 = 0, QM_RTC_NUM } qm_rtc_t;
DECL|qm_scss_ccu_reg_t|typedef|} qm_scss_ccu_reg_t;
DECL|qm_scss_cmp_reg_t|typedef|} qm_scss_cmp_reg_t;
DECL|qm_scss_gp_reg_t|typedef|} qm_scss_gp_reg_t;
DECL|qm_scss_info_reg_t|typedef|} qm_scss_info_reg_t;
DECL|qm_scss_mem_reg_t|typedef|} qm_scss_mem_reg_t;
DECL|qm_scss_peripheral_reg_t|typedef|} qm_scss_peripheral_reg_t;
DECL|qm_scss_pmu_reg_t|typedef|} qm_scss_pmu_reg_t;
DECL|qm_scss_pmux_reg_t|typedef|} qm_scss_pmux_reg_t;
DECL|qm_scss_ss_reg_t|typedef|} qm_scss_ss_reg_t;
DECL|qm_spi_context_t|typedef|} qm_spi_context_t;
DECL|qm_spi_reg_t|typedef|} qm_spi_reg_t;
DECL|qm_spi_t|typedef|} qm_spi_t;
DECL|qm_uart_context_t|typedef|} qm_uart_context_t;
DECL|qm_uart_reg_t|typedef|} qm_uart_reg_t;
DECL|qm_uart_t|typedef|typedef enum { QM_UART_0 = 0, QM_UART_1, QM_UART_NUM } qm_uart_t;
DECL|qm_usb_ep_idx_t|typedef|} qm_usb_ep_idx_t;
DECL|qm_usb_in_ep_reg_t|typedef|} qm_usb_in_ep_reg_t;
DECL|qm_usb_out_ep_reg_t|typedef|} qm_usb_out_ep_reg_t;
DECL|qm_usb_reg_t|typedef|} qm_usb_reg_t;
DECL|qm_usb_t|typedef|typedef enum { QM_USB_0 = 0, QM_USB_NUM } qm_usb_t;
DECL|qm_wdt_context_t|typedef|} qm_wdt_context_t;
DECL|qm_wdt_reg_t|typedef|} qm_wdt_reg_t;
DECL|qm_wdt_t|typedef|typedef enum { QM_WDT_0 = 0, QM_WDT_NUM } qm_wdt_t;
DECL|raw_block_high|member|QM_RW uint32_t raw_block_high; /**< RawBlock */
DECL|raw_block_low|member|QM_RW uint32_t raw_block_low; /**< RawBlock */
DECL|raw_dst_trans_high|member|QM_RW uint32_t raw_dst_trans_high; /**< RawDstTran */
DECL|raw_dst_trans_low|member|QM_RW uint32_t raw_dst_trans_low; /**< RawDstTran */
DECL|raw_err_high|member|QM_RW uint32_t raw_err_high; /**< RawErr */
DECL|raw_err_low|member|QM_RW uint32_t raw_err_low; /**< RawErr */
DECL|raw_src_trans_high|member|QM_RW uint32_t raw_src_trans_high; /**< RawSrcTran */
DECL|raw_src_trans_low|member|QM_RW uint32_t raw_src_trans_low; /**< RawSrcTran */
DECL|raw_tfr_high|member|QM_RW uint32_t raw_tfr_high; /**< RawTfr */
DECL|raw_tfr_low|member|QM_RW uint32_t raw_tfr_low; /**< RawTfr */
DECL|rbr_thr_dll|member|QM_RW uint32_t rbr_thr_dll; /**< Rx Buffer/ Tx Holding/ Div Latch Low */
DECL|redtbl_entries|member|uint32_t redtbl_entries[QM_IOAPIC_NUM_RTES];
DECL|reg|member|QM_RW uint32_t reg;
DECL|reserved0|member|QM_RW apic_reg_pad_t reserved0[2];
DECL|reserved1|member|QM_R uint32_t reserved1;
DECL|reserved1|member|QM_R uint32_t reserved1;
DECL|reserved1|member|QM_R uint32_t reserved1[43];
DECL|reserved1|member|QM_RW apic_reg_pad_t reserved1[4];
DECL|reserved1|member|QM_RW uint32_t reserved1;
DECL|reserved1|member|QM_RW uint32_t reserved1[19];
DECL|reserved1|member|QM_RW uint32_t reserved1[3];
DECL|reserved1|member|QM_RW uint32_t reserved1[9];
DECL|reserved1|member|QM_RW uint32_t reserved1[9];
DECL|reserved2|member|QM_R uint32_t reserved2;
DECL|reserved2|member|QM_R uint32_t reserved2[2];
DECL|reserved2|member|QM_R uint32_t reserved2[442];
DECL|reserved2|member|QM_RW apic_reg_pad_t reserved2[6];
DECL|reserved2|member|QM_RW uint32_t reserved2;
DECL|reserved2|member|QM_RW uint32_t reserved2;
DECL|reserved2|member|QM_RW uint32_t reserved2[5];
DECL|reserved3|member|QM_R uint32_t reserved3;
DECL|reserved3|member|QM_RW apic_reg_pad_t reserved3[4];
DECL|reserved3|member|QM_RW uint32_t reserved3;
DECL|reserved3|member|QM_RW uint32_t reserved3[3];
DECL|reserved4|member|QM_R uint32_t reserved4[2];
DECL|reserved4|member|QM_RW uint32_t reserved4[6];
DECL|reserved5|member|QM_R uint32_t reserved5[50];
DECL|reserved6|member|QM_R uint32_t reserved6[80];
DECL|reserved|member|QM_R uint32_t reserved;
DECL|reserved|member|QM_R uint32_t reserved;
DECL|reserved|member|QM_R uint32_t reserved[5];
DECL|reserved|member|QM_RW apic_reg_pad_t reserved[2];
DECL|reserved|member|QM_RW uint32_t reserved;
DECL|reserved|member|QM_RW uint32_t reserved;
DECL|reserved|member|QM_RW uint32_t reserved;
DECL|reserved|member|QM_RW uint32_t reserved[12]; /**< Reserved (SW HS) */
DECL|reserved|member|QM_RW uint32_t reserved[20];
DECL|reserved|member|QM_RW uint32_t reserved[23];
DECL|reserved|member|QM_RW uint32_t reserved[2];
DECL|reserved|member|QM_RW uint32_t reserved[2];
DECL|reserved|member|QM_RW uint32_t reserved[4];
DECL|reserved|member|QM_RW uint32_t reserved[4]; /**< Reserved */
DECL|reserved|member|QM_RW uint32_t reserved[6];
DECL|reserved|member|QM_RW uint32_t reserved[9];
DECL|rev|member|QM_RW uint32_t rev; /**< Revision Register */
DECL|risr|member|QM_RW uint32_t risr; /**< Raw Interrupt Status Register */
DECL|rom_wr_ctrl|member|QM_RW uint32_t rom_wr_ctrl; /**< ROM_WR_CTRL. */
DECL|rom_wr_data|member|QM_RW uint32_t rom_wr_data; /**< ROM_WR_DATA. */
DECL|rrd|member|QM_RW apic_reg_pad_t rrd; /**< Remote read */
DECL|rstc|member|QM_RW uint32_t rstc; /**< Reset Control */
DECL|rsts|member|QM_RW uint32_t rsts; /**< Reset Status */
DECL|rtc_ccr|member|QM_RW uint32_t rtc_ccr; /**< Counter Control Register */
DECL|rtc_ccvr|member|QM_RW uint32_t rtc_ccvr; /**< Current Counter Value Register */
DECL|rtc_clr|member|QM_RW uint32_t rtc_clr; /**< Counter Load Register */
DECL|rtc_cmr|member|QM_RW uint32_t rtc_cmr; /**< Current Match Register */
DECL|rtc_comp_version|member|QM_RW uint32_t rtc_comp_version; /**< End of Interrupt Register */
DECL|rtc_eoi|member|QM_RW uint32_t rtc_eoi; /**< End of Interrupt Register */
DECL|rtc_rstat|member|QM_RW uint32_t rtc_rstat; /**< Interrupt Raw Status Register */
DECL|rtc_stat|member|QM_RW uint32_t rtc_stat; /**< Interrupt Status Register */
DECL|rx_sample_dly|member|QM_RW uint32_t rx_sample_dly; /**< RX Sample Delay Register */
DECL|rx_tl|member|uint32_t rx_tl; /** Receive FIFO threshold register. */
DECL|rxflr|member|QM_RW uint32_t rxflr; /**< Receive FIFO Level Register */
DECL|rxftlr|member|QM_RW uint32_t rxftlr; /**< Receive FIFO Threshold Level */
DECL|rxoicr|member|QM_RW uint32_t rxoicr; /**< Rx FIFO Overflow Interrupt Clear Register */
DECL|rxuicr|member|QM_RW uint32_t rxuicr; /**< Rx FIFO Underflow Interrupt Clear Register*/
DECL|sar_high|member|QM_RW uint32_t sar_high; /**< SAR */
DECL|sar_low|member|QM_RW uint32_t sar_low; /**< SAR */
DECL|sar|member|uint32_t sar; /**< Slave Address. */
DECL|scr|member|QM_RW uint32_t scr; /**< Scratchpad */
DECL|scr|member|uint32_t scr; /**< Scratchpad. */
DECL|ser|member|QM_RW uint32_t ser; /**< Slave Enable Register */
DECL|ser|member|uint32_t ser; /**< Slave Enable Register. */
DECL|slp_cfg|member|QM_RW uint32_t slp_cfg; /**< Sleeping Configuration */
DECL|src_sg_high|member|QM_RW uint32_t src_sg_high; /**< SGR */
DECL|src_sg_low|member|QM_RW uint32_t src_sg_low; /**< SGR */
DECL|src_stat_addr_high|member|QM_RW uint32_t src_stat_addr_high; /**< SSTATAR */
DECL|src_stat_addr_low|member|QM_RW uint32_t src_stat_addr_low; /**< SSTATAR */
DECL|src_stat_high|member|QM_RW uint32_t src_stat_high; /**< SSTAT */
DECL|src_stat_low|member|QM_RW uint32_t src_stat_low; /**< SSTAT */
DECL|sr|member|QM_RW uint32_t sr; /**< Status Register */
DECL|ss_cfg|member|QM_RW uint32_t ss_cfg; /**< Sensor Subsystem Configuration */
DECL|ss_scl_hcnt|member|uint32_t ss_scl_hcnt; /**< Standard Speed Clock SCL High Count. */
DECL|ss_scl_lcnt|member|uint32_t ss_scl_lcnt; /**< Standard Speed Clock SCL Low Count. */
DECL|ss_sts|member|QM_RW uint32_t ss_sts; /**< Sensor Subsystem status */
DECL|ssi_comp_version|member|QM_RW uint32_t ssi_comp_version; /**< coreKit Version ID register */
DECL|ssienr|member|QM_RW uint32_t ssienr; /**< SSI Enable Register */
DECL|status_block_high|member|QM_RW uint32_t status_block_high; /**< StatusBlock */
DECL|status_block_low|member|QM_RW uint32_t status_block_low; /**< StatusBlock */
DECL|status_dst_trans_high|member|QM_RW uint32_t status_dst_trans_high; /**< StatusDstTran */
DECL|status_dst_trans_low|member|QM_RW uint32_t status_dst_trans_low; /**< StatusDstTran */
DECL|status_err_high|member|QM_RW uint32_t status_err_high; /**< StatusErr */
DECL|status_err_low|member|QM_RW uint32_t status_err_low; /**< StatusErr */
DECL|status_int_high|member|QM_RW uint32_t status_int_high; /**< StatusInt */
DECL|status_int_low|member|QM_RW uint32_t status_int_low; /**< StatusInt */
DECL|status_src_trans_high|member|QM_RW uint32_t status_src_trans_high; /**< StatusSrcTran */
DECL|status_src_trans_low|member|QM_RW uint32_t status_src_trans_low; /**< StatusSrcTran */
DECL|status_tfr_high|member|QM_RW uint32_t status_tfr_high; /**< StatusTfr */
DECL|status_tfr_low|member|QM_RW uint32_t status_tfr_low; /**< StatusTfr */
DECL|svr|member|QM_RW apic_reg_pad_t svr; /**< Spurious vector */
DECL|test_aonc_instance|variable|test_aonc_instance
DECL|test_aonc|variable|test_aonc
DECL|test_dma_instance|variable|test_dma_instance
DECL|test_dma|variable|test_dma
DECL|test_flash_instance|variable|test_flash_instance
DECL|test_flash_page|variable|test_flash_page
DECL|test_flash|variable|test_flash
DECL|test_gpio_instance|variable|test_gpio_instance
DECL|test_gpio|variable|test_gpio
DECL|test_high|member|QM_RW uint32_t test_high; /**< DmaTestReg */
DECL|test_i2c_instance|variable|test_i2c_instance
DECL|test_i2c|variable|test_i2c
DECL|test_ioapic|variable|test_ioapic
DECL|test_lapic|variable|test_lapic
DECL|test_low|member|QM_RW uint32_t test_low; /**< DmaTestReg */
DECL|test_mailbox|variable|test_mailbox
DECL|test_mpr|variable|test_mpr
DECL|test_pwm_instance|variable|test_pwm_instance
DECL|test_pwm|variable|test_pwm
DECL|test_rom_version|variable|test_rom_version
DECL|test_rtc_instance|variable|test_rtc_instance
DECL|test_rtc|variable|test_rtc
DECL|test_scss_ccu|variable|test_scss_ccu
DECL|test_scss_cmp|variable|test_scss_cmp
DECL|test_scss_gp|variable|test_scss_gp
DECL|test_scss_info|variable|test_scss_info
DECL|test_scss_mem|variable|test_scss_mem
DECL|test_scss_peripheral|variable|test_scss_peripheral
DECL|test_scss_pmux|variable|test_scss_pmux
DECL|test_scss_pmu|variable|test_scss_pmu
DECL|test_scss_ss|variable|test_scss_ss
DECL|test_spi_controllers|variable|test_spi_controllers
DECL|test_spi|variable|test_spi
DECL|test_uart_instance|variable|test_uart_instance
DECL|test_uart|variable|test_uart
DECL|test_usb_pll|variable|test_usb_pll
DECL|test_usb|variable|test_usb
DECL|test_wdt_instance|variable|test_wdt_instance
DECL|test_wdt|variable|test_wdt
DECL|timer_ccr|member|QM_RW apic_reg_pad_t timer_ccr; /**< Timer current count */
DECL|timer_dcr|member|QM_RW apic_reg_pad_t timer_dcr; /**< Timer divide configuration */
DECL|timer_dcr|member|uint32_t timer_dcr; /**< Divide Configuration Register. */
DECL|timer_icr|member|QM_RW apic_reg_pad_t timer_icr; /**< Timer initial count */
DECL|timer_icr|member|uint32_t timer_icr; /**< Initial Count Register. */
DECL|timer_loadcount2|member|timer_loadcount2[QM_PWM_ID_NUM]; /**< Timer Load Count 2 */
DECL|timerscompversion|member|QM_RW uint32_t timerscompversion; /**< Timers Component Version */
DECL|timerseoi|member|QM_RW uint32_t timerseoi; /**< Timers End Of Interrupt */
DECL|timersintstatus|member|QM_RW uint32_t timersintstatus; /**< Timers Interrupt Status */
DECL|timersrawintstatus|member|QM_RW uint32_t timersrawintstatus; /**< Timers Raw Interrupt Status */
DECL|timer|member|qm_pwm_channel_t timer[QM_PWM_ID_NUM]; /**< 4 Timers */
DECL|tmg_ctrl|member|QM_RW uint32_t tmg_ctrl; /**< TMG_CTRL. */
DECL|tmg_ctrl|member|uint32_t tmg_ctrl;
DECL|tmr|member|QM_RW apic_reg_pad_t tmr[8]; /**< Trigger mode */
DECL|tpr|member|QM_RW apic_reg_pad_t tpr; /**< Task priority*/
DECL|tx_tl|member|uint32_t tx_tl; /** Transmit FIFO threshold register. */
DECL|txflr|member|QM_RW uint32_t txflr; /**< Transmit FIFO Level Register */
DECL|txftlr|member|QM_RW uint32_t txftlr; /**< Transmit FIFO Threshold Level */
DECL|txoicr|member|QM_RW uint32_t txoicr; /**< Tx FIFO Overflow Interrupt Clear Register*/
DECL|usb_phy_cfg0|member|QM_RW uint32_t usb_phy_cfg0; /**< USB Configuration */
DECL|usb_pll_cfg0|member|QM_RW uint32_t usb_pll_cfg0; /**< USB Phase lock look configuration. */
DECL|usr|member|QM_RW uint32_t usr; /**< UART Status */
DECL|version|member|QM_RW apic_reg_pad_t version; /**< LAPIC version*/
DECL|vr_lock|member|QM_RW uint32_t vr_lock; /**< Voltage regulator lock */
DECL|wdt_ccvr|member|QM_RW uint32_t wdt_ccvr; /**< Current Counter Value Register */
DECL|wdt_comp_param_1|member|wdt_comp_param_1; /**< Component Parameters Register 1 */
DECL|wdt_comp_param_2|member|QM_RW uint32_t wdt_comp_param_2; /**< Component Parameters */
DECL|wdt_comp_param_3|member|QM_RW uint32_t wdt_comp_param_3; /**< Component Parameters */
DECL|wdt_comp_param_4|member|QM_RW uint32_t wdt_comp_param_4; /**< Component Parameters */
DECL|wdt_comp_param_5|member|QM_RW uint32_t wdt_comp_param_5; /**< Component Parameters */
DECL|wdt_comp_type|member|QM_RW uint32_t wdt_comp_type; /**< Component Type Register */
DECL|wdt_comp_version|member|QM_RW uint32_t wdt_comp_version; /**< Component Version Register */
DECL|wdt_crr|member|QM_RW uint32_t wdt_crr; /**< Current Restart Register */
DECL|wdt_cr|member|QM_RW uint32_t wdt_cr; /**< Control Register */
DECL|wdt_cr|member|uint32_t wdt_cr; /**< Control Register. */
DECL|wdt_eoi|member|QM_RW uint32_t wdt_eoi; /**< Interrupt Clear Register */
DECL|wdt_stat|member|QM_RW uint32_t wdt_stat; /**< Interrupt Status Register */
DECL|wdt_torr|member|QM_RW uint32_t wdt_torr; /**< Timeout Range Register */
DECL|wdt_torr|member|uint32_t wdt_torr; /**< Timeout Range Register. */
DECL|wo_sp|member|QM_RW uint32_t wo_sp; /**< Write-One-to-Set Scratchpad Register */
DECL|wo_st|member|wo_st; /**< Write-One-to-Set Sticky Scratchpad Register */
