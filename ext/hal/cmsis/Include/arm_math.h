DECL|A0|member|float32_t A0; /**< The derived gain, A0 = Kp + Ki + Kd . */
DECL|A0|member|q15_t A0; /**< The derived gain, A0 = Kp + Ki + Kd . */
DECL|A0|member|q31_t A0; /**< The derived gain, A0 = Kp + Ki + Kd . */
DECL|A1|member|float32_t A1; /**< The derived gain, A1 = -Kp - 2Kd. */
DECL|A1|member|q15_t A1;
DECL|A1|member|q31_t A1; /**< The derived gain A1 = -Kp - 2Kd | Kd.*/
DECL|A1|member|q31_t A1; /**< The derived gain, A1 = -Kp - 2Kd. */
DECL|A2|member|float32_t A2; /**< The derived gain, A2 = Kd . */
DECL|A2|member|q15_t A2;
DECL|A2|member|q31_t A2; /**< The derived gain, A2 = Kd . */
DECL|ALIGN4|macro|ALIGN4
DECL|ALIGN4|macro|ALIGN4
DECL|ALIGN4|macro|ALIGN4
DECL|ARM_MATH_ARGUMENT_ERROR|enumerator|ARM_MATH_ARGUMENT_ERROR = -1, /**< One or more arguments are incorrect */
DECL|ARM_MATH_CM0_FAMILY|macro|ARM_MATH_CM0_FAMILY
DECL|ARM_MATH_CM0_FAMILY|macro|ARM_MATH_CM0_FAMILY
DECL|ARM_MATH_LENGTH_ERROR|enumerator|ARM_MATH_LENGTH_ERROR = -2, /**< Length of data buffer is incorrect */
DECL|ARM_MATH_NANINF|enumerator|ARM_MATH_NANINF = -4, /**< Not-a-number (NaN) or infinity is generated */
DECL|ARM_MATH_SINGULAR|enumerator|ARM_MATH_SINGULAR = -5, /**< Generated by matrix inversion if the input matrix is singular and cannot be inverted. */
DECL|ARM_MATH_SIZE_MISMATCH|enumerator|ARM_MATH_SIZE_MISMATCH = -3, /**< Size of matrices is not compatible with the operation. */
DECL|ARM_MATH_SUCCESS|enumerator|ARM_MATH_SUCCESS = 0, /**< No error */
DECL|ARM_MATH_TEST_FAILURE|enumerator|ARM_MATH_TEST_FAILURE = -6 /**< Test Failed */
DECL|CMSIS_UNUSED|macro|CMSIS_UNUSED
DECL|CMSIS_UNUSED|macro|CMSIS_UNUSED
DECL|CMSIS_UNUSED|macro|CMSIS_UNUSED
DECL|CMSIS_UNUSED|macro|CMSIS_UNUSED
DECL|CMSIS_UNUSED|macro|CMSIS_UNUSED
DECL|CMSIS_UNUSED|macro|CMSIS_UNUSED
DECL|CONTROLLER_Q31_SHIFT|macro|CONTROLLER_Q31_SHIFT
DECL|DELTA_Q15|macro|DELTA_Q15
DECL|DELTA_Q31|macro|DELTA_Q31
DECL|FAST_MATH_Q15_SHIFT|macro|FAST_MATH_Q15_SHIFT
DECL|FAST_MATH_Q31_SHIFT|macro|FAST_MATH_Q31_SHIFT
DECL|FAST_MATH_TABLE_SIZE|macro|FAST_MATH_TABLE_SIZE
DECL|IAR_ONLY_LOW_OPTIMIZATION_ENTER|macro|IAR_ONLY_LOW_OPTIMIZATION_ENTER
DECL|IAR_ONLY_LOW_OPTIMIZATION_ENTER|macro|IAR_ONLY_LOW_OPTIMIZATION_ENTER
DECL|IAR_ONLY_LOW_OPTIMIZATION_ENTER|macro|IAR_ONLY_LOW_OPTIMIZATION_ENTER
DECL|IAR_ONLY_LOW_OPTIMIZATION_ENTER|macro|IAR_ONLY_LOW_OPTIMIZATION_ENTER
DECL|IAR_ONLY_LOW_OPTIMIZATION_ENTER|macro|IAR_ONLY_LOW_OPTIMIZATION_ENTER
DECL|IAR_ONLY_LOW_OPTIMIZATION_ENTER|macro|IAR_ONLY_LOW_OPTIMIZATION_ENTER
DECL|IAR_ONLY_LOW_OPTIMIZATION_ENTER|macro|IAR_ONLY_LOW_OPTIMIZATION_ENTER
DECL|IAR_ONLY_LOW_OPTIMIZATION_EXIT|macro|IAR_ONLY_LOW_OPTIMIZATION_EXIT
DECL|IAR_ONLY_LOW_OPTIMIZATION_EXIT|macro|IAR_ONLY_LOW_OPTIMIZATION_EXIT
DECL|IAR_ONLY_LOW_OPTIMIZATION_EXIT|macro|IAR_ONLY_LOW_OPTIMIZATION_EXIT
DECL|IAR_ONLY_LOW_OPTIMIZATION_EXIT|macro|IAR_ONLY_LOW_OPTIMIZATION_EXIT
DECL|IAR_ONLY_LOW_OPTIMIZATION_EXIT|macro|IAR_ONLY_LOW_OPTIMIZATION_EXIT
DECL|IAR_ONLY_LOW_OPTIMIZATION_EXIT|macro|IAR_ONLY_LOW_OPTIMIZATION_EXIT
DECL|INDEX_MASK|macro|INDEX_MASK
DECL|INPUT_SPACING|macro|INPUT_SPACING
DECL|Kd|member|float32_t Kd; /**< The derivative gain. */
DECL|Kd|member|q15_t Kd; /**< The derivative gain. */
DECL|Kd|member|q31_t Kd; /**< The derivative gain. */
DECL|Ki|member|float32_t Ki; /**< The integral gain. */
DECL|Ki|member|q15_t Ki; /**< The integral gain. */
DECL|Ki|member|q31_t Ki; /**< The integral gain. */
DECL|Kp|member|float32_t Kp; /**< The proportional gain. */
DECL|Kp|member|q15_t Kp; /**< The proportional gain. */
DECL|Kp|member|q31_t Kp; /**< The proportional gain. */
DECL|LOW_OPTIMIZATION_ENTER|macro|LOW_OPTIMIZATION_ENTER
DECL|LOW_OPTIMIZATION_ENTER|macro|LOW_OPTIMIZATION_ENTER
DECL|LOW_OPTIMIZATION_ENTER|macro|LOW_OPTIMIZATION_ENTER
DECL|LOW_OPTIMIZATION_ENTER|macro|LOW_OPTIMIZATION_ENTER
DECL|LOW_OPTIMIZATION_ENTER|macro|LOW_OPTIMIZATION_ENTER
DECL|LOW_OPTIMIZATION_ENTER|macro|LOW_OPTIMIZATION_ENTER
DECL|LOW_OPTIMIZATION_ENTER|macro|LOW_OPTIMIZATION_ENTER
DECL|LOW_OPTIMIZATION_ENTER|macro|LOW_OPTIMIZATION_ENTER
DECL|LOW_OPTIMIZATION_EXIT|macro|LOW_OPTIMIZATION_EXIT
DECL|LOW_OPTIMIZATION_EXIT|macro|LOW_OPTIMIZATION_EXIT
DECL|LOW_OPTIMIZATION_EXIT|macro|LOW_OPTIMIZATION_EXIT
DECL|LOW_OPTIMIZATION_EXIT|macro|LOW_OPTIMIZATION_EXIT
DECL|LOW_OPTIMIZATION_EXIT|macro|LOW_OPTIMIZATION_EXIT
DECL|LOW_OPTIMIZATION_EXIT|macro|LOW_OPTIMIZATION_EXIT
DECL|LOW_OPTIMIZATION_EXIT|macro|LOW_OPTIMIZATION_EXIT
DECL|L|member|uint8_t L; /**< upsample factor. */
DECL|L|member|uint8_t L; /**< upsample factor. */
DECL|L|member|uint8_t L; /**< upsample factor. */
DECL|M|member|uint8_t M; /**< decimation factor. */
DECL|M|member|uint8_t M; /**< decimation factor. */
DECL|M|member|uint8_t M; /**< decimation factor. */
DECL|Nby2|member|uint16_t Nby2; /**< half of the length of the DCT4. */
DECL|Nby2|member|uint16_t Nby2; /**< half of the length of the DCT4. */
DECL|Nby2|member|uint16_t Nby2; /**< half of the length of the DCT4. */
DECL|N|member|uint16_t N; /**< length of the DCT4. */
DECL|N|member|uint16_t N; /**< length of the DCT4. */
DECL|N|member|uint16_t N; /**< length of the DCT4. */
DECL|PI|macro|PI
DECL|Sint|member|arm_cfft_instance_f32 Sint; /**< Internal CFFT structure. */
DECL|TABLE_SIZE|macro|TABLE_SIZE
DECL|TABLE_SPACING_Q15|macro|TABLE_SPACING_Q15
DECL|TABLE_SPACING_Q31|macro|TABLE_SPACING_Q31
DECL|_ARM_MATH_H|macro|_ARM_MATH_H
DECL|_SIMD32_OFFSET|macro|_SIMD32_OFFSET
DECL|__CLZ|function|static __INLINE uint32_t __CLZ( q31_t data)
DECL|__CMSIS_GENERIC|macro|__CMSIS_GENERIC
DECL|__CMSIS_GENERIC|macro|__CMSIS_GENERIC
DECL|__PACKq7|macro|__PACKq7
DECL|__PACKq7|macro|__PACKq7
DECL|__PKHBT|macro|__PKHBT
DECL|__PKHTB|macro|__PKHTB
DECL|__QADD16|function|static __INLINE uint32_t __QADD16( uint32_t x, uint32_t y)
DECL|__QADD8|function|static __INLINE uint32_t __QADD8( uint32_t x, uint32_t y)
DECL|__QADD|function|static __INLINE int32_t __QADD( int32_t x, int32_t y)
DECL|__QASX|function|static __INLINE uint32_t __QASX( uint32_t x, uint32_t y)
DECL|__QSAX|function|static __INLINE uint32_t __QSAX( uint32_t x, uint32_t y)
DECL|__QSUB16|function|static __INLINE uint32_t __QSUB16( uint32_t x, uint32_t y)
DECL|__QSUB8|function|static __INLINE uint32_t __QSUB8( uint32_t x, uint32_t y)
DECL|__QSUB|function|static __INLINE int32_t __QSUB( int32_t x, int32_t y)
DECL|__SHADD16|function|static __INLINE uint32_t __SHADD16( uint32_t x, uint32_t y)
DECL|__SHASX|function|static __INLINE uint32_t __SHASX( uint32_t x, uint32_t y)
DECL|__SHSAX|function|static __INLINE uint32_t __SHSAX( uint32_t x, uint32_t y)
DECL|__SHSUB16|function|static __INLINE uint32_t __SHSUB16( uint32_t x, uint32_t y)
DECL|__SIMD32_CONST|macro|__SIMD32_CONST
DECL|__SIMD32_TYPE|macro|__SIMD32_TYPE
DECL|__SIMD32_TYPE|macro|__SIMD32_TYPE
DECL|__SIMD32_TYPE|macro|__SIMD32_TYPE
DECL|__SIMD32_TYPE|macro|__SIMD32_TYPE
DECL|__SIMD32_TYPE|macro|__SIMD32_TYPE
DECL|__SIMD32_TYPE|macro|__SIMD32_TYPE
DECL|__SIMD32|macro|__SIMD32
DECL|__SIMD64|macro|__SIMD64
DECL|__SMLADX|function|static __INLINE uint32_t __SMLADX( uint32_t x, uint32_t y, uint32_t sum)
DECL|__SMLAD|function|static __INLINE uint32_t __SMLAD( uint32_t x, uint32_t y, uint32_t sum)
DECL|__SMLALDX|function|static __INLINE uint64_t __SMLALDX( uint32_t x, uint32_t y, uint64_t sum)
DECL|__SMLALD|function|static __INLINE uint64_t __SMLALD( uint32_t x, uint32_t y, uint64_t sum)
DECL|__SMLSDX|function|static __INLINE uint32_t __SMLSDX( uint32_t x, uint32_t y, uint32_t sum)
DECL|__SMUADX|function|static __INLINE uint32_t __SMUADX( uint32_t x, uint32_t y)
DECL|__SMUAD|function|static __INLINE uint32_t __SMUAD( uint32_t x, uint32_t y)
DECL|__SMUSDX|function|static __INLINE uint32_t __SMUSDX( uint32_t x, uint32_t y)
DECL|__SMUSD|function|static __INLINE uint32_t __SMUSD( uint32_t x, uint32_t y)
DECL|__SSAT|function|static __INLINE q31_t __SSAT( q31_t x, uint32_t y)
DECL|__SXTB16|function|static __INLINE uint32_t __SXTB16( uint32_t x)
DECL|arm_bilinear_interp_f32|function|static __INLINE float32_t arm_bilinear_interp_f32( const arm_bilinear_interp_instance_f32 * S, float32_t X, float32_t Y)
DECL|arm_bilinear_interp_instance_f32|typedef|} arm_bilinear_interp_instance_f32;
DECL|arm_bilinear_interp_instance_q15|typedef|} arm_bilinear_interp_instance_q15;
DECL|arm_bilinear_interp_instance_q31|typedef|} arm_bilinear_interp_instance_q31;
DECL|arm_bilinear_interp_instance_q7|typedef|} arm_bilinear_interp_instance_q7;
DECL|arm_bilinear_interp_q15|function|static __INLINE q15_t arm_bilinear_interp_q15( arm_bilinear_interp_instance_q15 * S, q31_t X, q31_t Y)
DECL|arm_bilinear_interp_q31|function|static __INLINE q31_t arm_bilinear_interp_q31( arm_bilinear_interp_instance_q31 * S, q31_t X, q31_t Y)
DECL|arm_bilinear_interp_q7|function|static __INLINE q7_t arm_bilinear_interp_q7( arm_bilinear_interp_instance_q7 * S, q31_t X, q31_t Y)
DECL|arm_biquad_cas_df1_32x64_ins_q31|typedef|} arm_biquad_cas_df1_32x64_ins_q31;
DECL|arm_biquad_cascade_df2T_instance_f32|typedef|} arm_biquad_cascade_df2T_instance_f32;
DECL|arm_biquad_cascade_df2T_instance_f64|typedef|} arm_biquad_cascade_df2T_instance_f64;
DECL|arm_biquad_cascade_stereo_df2T_instance_f32|typedef|} arm_biquad_cascade_stereo_df2T_instance_f32;
DECL|arm_biquad_casd_df1_inst_f32|typedef|} arm_biquad_casd_df1_inst_f32;
DECL|arm_biquad_casd_df1_inst_q15|typedef|} arm_biquad_casd_df1_inst_q15;
DECL|arm_biquad_casd_df1_inst_q31|typedef|} arm_biquad_casd_df1_inst_q31;
DECL|arm_cfft_instance_f32|typedef|} arm_cfft_instance_f32;
DECL|arm_cfft_instance_q15|typedef|} arm_cfft_instance_q15;
DECL|arm_cfft_instance_q31|typedef|} arm_cfft_instance_q31;
DECL|arm_cfft_radix2_instance_f32|typedef|} arm_cfft_radix2_instance_f32;
DECL|arm_cfft_radix2_instance_q15|typedef|} arm_cfft_radix2_instance_q15;
DECL|arm_cfft_radix2_instance_q31|typedef|} arm_cfft_radix2_instance_q31;
DECL|arm_cfft_radix4_instance_f32|typedef|} arm_cfft_radix4_instance_f32;
DECL|arm_cfft_radix4_instance_q15|typedef|} arm_cfft_radix4_instance_q15;
DECL|arm_cfft_radix4_instance_q31|typedef|} arm_cfft_radix4_instance_q31;
DECL|arm_circularRead_f32|function|static __INLINE void arm_circularRead_f32( int32_t * circBuffer, int32_t L, int32_t * readOffset, int32_t bufferInc,
DECL|arm_circularRead_q15|function|static __INLINE void arm_circularRead_q15( q15_t * circBuffer, int32_t L, int32_t * readOffset, int32_t bufferInc,
DECL|arm_circularRead_q7|function|static __INLINE void arm_circularRead_q7( q7_t * circBuffer, int32_t L, int32_t * readOffset, int32_t bufferInc,
DECL|arm_circularWrite_f32|function|static __INLINE void arm_circularWrite_f32( int32_t * circBuffer, int32_t L, uint16_t * writeOffset, int32_t bufferInc,
DECL|arm_circularWrite_q15|function|static __INLINE void arm_circularWrite_q15( q15_t * circBuffer, int32_t L, uint16_t * writeOffset, int32_t bufferInc,
DECL|arm_circularWrite_q7|function|static __INLINE void arm_circularWrite_q7( q7_t * circBuffer, int32_t L, uint16_t * writeOffset, int32_t bufferInc,
DECL|arm_clarke_f32|function|static __INLINE void arm_clarke_f32( float32_t Ia, float32_t Ib, float32_t * pIalpha, float32_t * pIbeta)
DECL|arm_clarke_q31|function|static __INLINE void arm_clarke_q31( q31_t Ia, q31_t Ib, q31_t * pIalpha, q31_t * pIbeta)
DECL|arm_dct4_instance_f32|typedef|} arm_dct4_instance_f32;
DECL|arm_dct4_instance_q15|typedef|} arm_dct4_instance_q15;
DECL|arm_dct4_instance_q31|typedef|} arm_dct4_instance_q31;
DECL|arm_fir_decimate_instance_f32|typedef|} arm_fir_decimate_instance_f32;
DECL|arm_fir_decimate_instance_q15|typedef|} arm_fir_decimate_instance_q15;
DECL|arm_fir_decimate_instance_q31|typedef|} arm_fir_decimate_instance_q31;
DECL|arm_fir_instance_f32|typedef|} arm_fir_instance_f32;
DECL|arm_fir_instance_q15|typedef|} arm_fir_instance_q15;
DECL|arm_fir_instance_q31|typedef|} arm_fir_instance_q31;
DECL|arm_fir_instance_q7|typedef|} arm_fir_instance_q7;
DECL|arm_fir_interpolate_instance_f32|typedef|} arm_fir_interpolate_instance_f32;
DECL|arm_fir_interpolate_instance_q15|typedef|} arm_fir_interpolate_instance_q15;
DECL|arm_fir_interpolate_instance_q31|typedef|} arm_fir_interpolate_instance_q31;
DECL|arm_fir_lattice_instance_f32|typedef|} arm_fir_lattice_instance_f32;
DECL|arm_fir_lattice_instance_q15|typedef|} arm_fir_lattice_instance_q15;
DECL|arm_fir_lattice_instance_q31|typedef|} arm_fir_lattice_instance_q31;
DECL|arm_fir_sparse_instance_f32|typedef|} arm_fir_sparse_instance_f32;
DECL|arm_fir_sparse_instance_q15|typedef|} arm_fir_sparse_instance_q15;
DECL|arm_fir_sparse_instance_q31|typedef|} arm_fir_sparse_instance_q31;
DECL|arm_fir_sparse_instance_q7|typedef|} arm_fir_sparse_instance_q7;
DECL|arm_iir_lattice_instance_f32|typedef|} arm_iir_lattice_instance_f32;
DECL|arm_iir_lattice_instance_q15|typedef|} arm_iir_lattice_instance_q15;
DECL|arm_iir_lattice_instance_q31|typedef|} arm_iir_lattice_instance_q31;
DECL|arm_inv_clarke_f32|function|static __INLINE void arm_inv_clarke_f32( float32_t Ialpha, float32_t Ibeta, float32_t * pIa, float32_t * pIb)
DECL|arm_inv_clarke_q31|function|static __INLINE void arm_inv_clarke_q31( q31_t Ialpha, q31_t Ibeta, q31_t * pIa, q31_t * pIb)
DECL|arm_inv_park_f32|function|static __INLINE void arm_inv_park_f32( float32_t Id, float32_t Iq, float32_t * pIalpha, float32_t * pIbeta,
DECL|arm_inv_park_q31|function|static __INLINE void arm_inv_park_q31( q31_t Id, q31_t Iq, q31_t * pIalpha, q31_t * pIbeta,
DECL|arm_linear_interp_f32|function|static __INLINE float32_t arm_linear_interp_f32( arm_linear_interp_instance_f32 * S, float32_t x)
DECL|arm_linear_interp_instance_f32|typedef|} arm_linear_interp_instance_f32;
DECL|arm_linear_interp_q15|function|static __INLINE q15_t arm_linear_interp_q15( q15_t * pYData, q31_t x, uint32_t nValues)
DECL|arm_linear_interp_q31|function|static __INLINE q31_t arm_linear_interp_q31( q31_t * pYData, q31_t x, uint32_t nValues)
DECL|arm_linear_interp_q7|function|static __INLINE q7_t arm_linear_interp_q7( q7_t * pYData, q31_t x, uint32_t nValues)
DECL|arm_lms_instance_f32|typedef|} arm_lms_instance_f32;
DECL|arm_lms_instance_q15|typedef|} arm_lms_instance_q15;
DECL|arm_lms_instance_q31|typedef|} arm_lms_instance_q31;
DECL|arm_lms_norm_instance_f32|typedef|} arm_lms_norm_instance_f32;
DECL|arm_lms_norm_instance_q15|typedef|} arm_lms_norm_instance_q15;
DECL|arm_lms_norm_instance_q31|typedef|} arm_lms_norm_instance_q31;
DECL|arm_matrix_instance_f32|typedef|} arm_matrix_instance_f32;
DECL|arm_matrix_instance_f64|typedef|} arm_matrix_instance_f64;
DECL|arm_matrix_instance_q15|typedef|} arm_matrix_instance_q15;
DECL|arm_matrix_instance_q31|typedef|} arm_matrix_instance_q31;
DECL|arm_park_f32|function|static __INLINE void arm_park_f32( float32_t Ialpha, float32_t Ibeta, float32_t * pId, float32_t * pIq,
DECL|arm_park_q31|function|static __INLINE void arm_park_q31( q31_t Ialpha, q31_t Ibeta, q31_t * pId, q31_t * pIq,
DECL|arm_pid_f32|function|static __INLINE float32_t arm_pid_f32( arm_pid_instance_f32 * S, float32_t in)
DECL|arm_pid_instance_f32|typedef|} arm_pid_instance_f32;
DECL|arm_pid_instance_q15|typedef|} arm_pid_instance_q15;
DECL|arm_pid_instance_q31|typedef|} arm_pid_instance_q31;
DECL|arm_pid_q15|function|static __INLINE q15_t arm_pid_q15( arm_pid_instance_q15 * S, q15_t in)
DECL|arm_pid_q31|function|static __INLINE q31_t arm_pid_q31( arm_pid_instance_q31 * S, q31_t in)
DECL|arm_recip_q15|function|static __INLINE uint32_t arm_recip_q15( q15_t in, q15_t * dst, q15_t * pRecipTable)
DECL|arm_recip_q31|function|static __INLINE uint32_t arm_recip_q31( q31_t in, q31_t * dst, q31_t * pRecipTable)
DECL|arm_rfft_fast_instance_f32|typedef|} arm_rfft_fast_instance_f32 ;
DECL|arm_rfft_instance_f32|typedef|} arm_rfft_instance_f32;
DECL|arm_rfft_instance_q15|typedef|} arm_rfft_instance_q15;
DECL|arm_rfft_instance_q31|typedef|} arm_rfft_instance_q31;
DECL|arm_sqrt_f32|function|static __INLINE arm_status arm_sqrt_f32( float32_t in, float32_t * pOut)
DECL|arm_status|typedef|} arm_status;
DECL|bitRevFactor|member|uint16_t bitRevFactor; /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
DECL|bitRevFactor|member|uint16_t bitRevFactor; /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
DECL|bitRevFactor|member|uint16_t bitRevFactor; /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
DECL|bitRevFactor|member|uint16_t bitRevFactor; /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
DECL|bitRevFactor|member|uint16_t bitRevFactor; /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
DECL|bitRevFactor|member|uint16_t bitRevFactor; /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
DECL|bitRevLength|member|uint16_t bitRevLength; /**< bit reversal table length. */
DECL|bitRevLength|member|uint16_t bitRevLength; /**< bit reversal table length. */
DECL|bitRevLength|member|uint16_t bitRevLength; /**< bit reversal table length. */
DECL|bitReverseFlagR|member|uint8_t bitReverseFlagR; /**< flag that enables (bitReverseFlagR=1) or disables (bitReverseFlagR=0) bit reversal of output. */
DECL|bitReverseFlagR|member|uint8_t bitReverseFlagR; /**< flag that enables (bitReverseFlagR=1) or disables (bitReverseFlagR=0) bit reversal of output. */
DECL|bitReverseFlagR|member|uint8_t bitReverseFlagR; /**< flag that enables (bitReverseFlagR=1) or disables (bitReverseFlagR=0) bit reversal of output. */
DECL|bitReverseFlag|member|uint8_t bitReverseFlag; /**< flag that enables (bitReverseFlag=1) or disables (bitReverseFlag=0) bit reversal of output. */
DECL|bitReverseFlag|member|uint8_t bitReverseFlag; /**< flag that enables (bitReverseFlag=1) or disables (bitReverseFlag=0) bit reversal of output. */
DECL|bitReverseFlag|member|uint8_t bitReverseFlag; /**< flag that enables (bitReverseFlag=1) or disables (bitReverseFlag=0) bit reversal of output. */
DECL|bitReverseFlag|member|uint8_t bitReverseFlag; /**< flag that enables (bitReverseFlag=1) or disables (bitReverseFlag=0) bit reversal of output. */
DECL|bitReverseFlag|member|uint8_t bitReverseFlag; /**< flag that enables (bitReverseFlag=1) or disables (bitReverseFlag=0) bit reversal of output. */
DECL|bitReverseFlag|member|uint8_t bitReverseFlag; /**< flag that enables (bitReverseFlag=1) or disables (bitReverseFlag=0) bit reversal of output. */
DECL|clip_q31_to_q15|function|static __INLINE q15_t clip_q31_to_q15( q31_t x)
DECL|clip_q31_to_q7|function|static __INLINE q7_t clip_q31_to_q7( q31_t x)
DECL|clip_q63_to_q15|function|static __INLINE q15_t clip_q63_to_q15( q63_t x)
DECL|clip_q63_to_q31|function|static __INLINE q31_t clip_q63_to_q31( q63_t x)
DECL|energy|member|float32_t energy; /**< saves previous frame energy. */
DECL|energy|member|q15_t energy; /**< saves previous frame energy. */
DECL|energy|member|q31_t energy; /**< saves previous frame energy. */
DECL|fftLenBy2|member|uint16_t fftLenBy2; /**< length of the complex FFT. */
DECL|fftLenRFFT|member|uint16_t fftLenRFFT; /**< length of the real sequence */
DECL|fftLenReal|member|uint32_t fftLenReal; /**< length of the real FFT. */
DECL|fftLenReal|member|uint32_t fftLenReal; /**< length of the real FFT. */
DECL|fftLenReal|member|uint32_t fftLenReal; /**< length of the real FFT. */
DECL|fftLen|member|uint16_t fftLen; /**< length of the FFT. */
DECL|fftLen|member|uint16_t fftLen; /**< length of the FFT. */
DECL|fftLen|member|uint16_t fftLen; /**< length of the FFT. */
DECL|fftLen|member|uint16_t fftLen; /**< length of the FFT. */
DECL|fftLen|member|uint16_t fftLen; /**< length of the FFT. */
DECL|fftLen|member|uint16_t fftLen; /**< length of the FFT. */
DECL|fftLen|member|uint16_t fftLen; /**< length of the FFT. */
DECL|fftLen|member|uint16_t fftLen; /**< length of the FFT. */
DECL|fftLen|member|uint16_t fftLen; /**< length of the FFT. */
DECL|float32_t|typedef|typedef float float32_t;
DECL|float64_t|typedef|typedef double float64_t;
DECL|ifftFlagR|member|uint8_t ifftFlagR; /**< flag that selects forward (ifftFlagR=0) or inverse (ifftFlagR=1) transform. */
DECL|ifftFlagR|member|uint8_t ifftFlagR; /**< flag that selects forward (ifftFlagR=0) or inverse (ifftFlagR=1) transform. */
DECL|ifftFlagR|member|uint8_t ifftFlagR; /**< flag that selects forward (ifftFlagR=0) or inverse (ifftFlagR=1) transform. */
DECL|ifftFlag|member|uint8_t ifftFlag; /**< flag that selects forward (ifftFlag=0) or inverse (ifftFlag=1) transform. */
DECL|ifftFlag|member|uint8_t ifftFlag; /**< flag that selects forward (ifftFlag=0) or inverse (ifftFlag=1) transform. */
DECL|ifftFlag|member|uint8_t ifftFlag; /**< flag that selects forward (ifftFlag=0) or inverse (ifftFlag=1) transform. */
DECL|ifftFlag|member|uint8_t ifftFlag; /**< flag that selects forward (ifftFlag=0) or inverse (ifftFlag=1) transform. */
DECL|ifftFlag|member|uint8_t ifftFlag; /**< flag that selects forward (ifftFlag=0) or inverse (ifftFlag=1) transform. */
DECL|ifftFlag|member|uint8_t ifftFlag; /**< flag that selects forward (ifftFlag=0) or inverse (ifftFlag=1) transform. */
DECL|maxDelay|member|uint16_t maxDelay; /**< maximum offset specified by the pTapDelay array. */
DECL|maxDelay|member|uint16_t maxDelay; /**< maximum offset specified by the pTapDelay array. */
DECL|maxDelay|member|uint16_t maxDelay; /**< maximum offset specified by the pTapDelay array. */
DECL|maxDelay|member|uint16_t maxDelay; /**< maximum offset specified by the pTapDelay array. */
DECL|mult32x64|function|static __INLINE q63_t mult32x64( q63_t x, q31_t y)
DECL|multAcc_32x32_keep32_R|macro|multAcc_32x32_keep32_R
DECL|multAcc_32x32_keep32|macro|multAcc_32x32_keep32
DECL|multSub_32x32_keep32_R|macro|multSub_32x32_keep32_R
DECL|multSub_32x32_keep32|macro|multSub_32x32_keep32
DECL|mult_32x32_keep32_R|macro|mult_32x32_keep32_R
DECL|mult_32x32_keep32|macro|mult_32x32_keep32
DECL|mu|member|float32_t mu; /**< step size that control filter coefficient updates. */
DECL|mu|member|float32_t mu; /**< step size that controls filter coefficient updates. */
DECL|mu|member|q15_t mu; /**< step size that controls filter coefficient updates. */
DECL|mu|member|q15_t mu; /**< step size that controls filter coefficient updates. */
DECL|mu|member|q31_t mu; /**< step size that controls filter coefficient updates. */
DECL|mu|member|q31_t mu; /**< step size that controls filter coefficient updates. */
DECL|nValues|member|uint32_t nValues; /**< nValues */
DECL|normalize|member|float32_t normalize; /**< normalizing factor. */
DECL|normalize|member|q15_t normalize; /**< normalizing factor. */
DECL|normalize|member|q31_t normalize; /**< normalizing factor. */
DECL|numCols|member|uint16_t numCols; /**< number of columns in the data table. */
DECL|numCols|member|uint16_t numCols; /**< number of columns in the data table. */
DECL|numCols|member|uint16_t numCols; /**< number of columns in the data table. */
DECL|numCols|member|uint16_t numCols; /**< number of columns in the data table. */
DECL|numCols|member|uint16_t numCols; /**< number of columns of the matrix. */
DECL|numCols|member|uint16_t numCols; /**< number of columns of the matrix. */
DECL|numCols|member|uint16_t numCols; /**< number of columns of the matrix. */
DECL|numCols|member|uint16_t numCols; /**< number of columns of the matrix. */
DECL|numRows|member|uint16_t numRows; /**< number of rows in the data table. */
DECL|numRows|member|uint16_t numRows; /**< number of rows in the data table. */
DECL|numRows|member|uint16_t numRows; /**< number of rows in the data table. */
DECL|numRows|member|uint16_t numRows; /**< number of rows in the data table. */
DECL|numRows|member|uint16_t numRows; /**< number of rows of the matrix. */
DECL|numRows|member|uint16_t numRows; /**< number of rows of the matrix. */
DECL|numRows|member|uint16_t numRows; /**< number of rows of the matrix. */
DECL|numRows|member|uint16_t numRows; /**< number of rows of the matrix. */
DECL|numStages|member|int8_t numStages; /**< number of 2nd order stages in the filter. Overall order is 2*numStages. */
DECL|numStages|member|uint16_t numStages; /**< number of filter stages. */
DECL|numStages|member|uint16_t numStages; /**< number of filter stages. */
DECL|numStages|member|uint16_t numStages; /**< number of filter stages. */
DECL|numStages|member|uint16_t numStages; /**< number of stages in the filter. */
DECL|numStages|member|uint16_t numStages; /**< number of stages in the filter. */
DECL|numStages|member|uint16_t numStages; /**< number of stages in the filter. */
DECL|numStages|member|uint32_t numStages; /**< number of 2nd order stages in the filter. Overall order is 2*numStages. */
DECL|numStages|member|uint32_t numStages; /**< number of 2nd order stages in the filter. Overall order is 2*numStages. */
DECL|numStages|member|uint8_t numStages; /**< number of 2nd order stages in the filter. Overall order is 2*numStages. */
DECL|numStages|member|uint8_t numStages; /**< number of 2nd order stages in the filter. Overall order is 2*numStages. */
DECL|numStages|member|uint8_t numStages; /**< number of 2nd order stages in the filter. Overall order is 2*numStages. */
DECL|numStages|member|uint8_t numStages; /**< number of 2nd order stages in the filter. Overall order is 2*numStages. */
DECL|numTaps|member|uint16_t numTaps; /**< Number of coefficients in the filter. */
DECL|numTaps|member|uint16_t numTaps; /**< number of coefficients in the filter. */
DECL|numTaps|member|uint16_t numTaps; /**< number of coefficients in the filter. */
DECL|numTaps|member|uint16_t numTaps; /**< number of coefficients in the filter. */
DECL|numTaps|member|uint16_t numTaps; /**< number of coefficients in the filter. */
DECL|numTaps|member|uint16_t numTaps; /**< number of coefficients in the filter. */
DECL|numTaps|member|uint16_t numTaps; /**< number of coefficients in the filter. */
DECL|numTaps|member|uint16_t numTaps; /**< number of coefficients in the filter. */
DECL|numTaps|member|uint16_t numTaps; /**< number of coefficients in the filter. */
DECL|numTaps|member|uint16_t numTaps; /**< number of coefficients in the filter. */
DECL|numTaps|member|uint16_t numTaps; /**< number of coefficients in the filter. */
DECL|numTaps|member|uint16_t numTaps; /**< number of coefficients in the filter. */
DECL|numTaps|member|uint16_t numTaps; /**< number of coefficients in the filter. */
DECL|numTaps|member|uint16_t numTaps; /**< number of filter coefficients in the filter. */
DECL|numTaps|member|uint16_t numTaps; /**< number of filter coefficients in the filter. */
DECL|numTaps|member|uint16_t numTaps; /**< number of filter coefficients in the filter. */
DECL|numTaps|member|uint16_t numTaps; /**< number of filter coefficients in the filter. */
DECL|onebyfftLen|member|float32_t onebyfftLen; /**< value of 1/fftLen. */
DECL|onebyfftLen|member|float32_t onebyfftLen; /**< value of 1/fftLen. */
DECL|pBitRevTable|member|const uint16_t *pBitRevTable; /**< points to the bit reversal table. */
DECL|pBitRevTable|member|const uint16_t *pBitRevTable; /**< points to the bit reversal table. */
DECL|pBitRevTable|member|const uint16_t *pBitRevTable; /**< points to the bit reversal table. */
DECL|pBitRevTable|member|uint16_t *pBitRevTable; /**< points to the bit reversal table. */
DECL|pBitRevTable|member|uint16_t *pBitRevTable; /**< points to the bit reversal table. */
DECL|pBitRevTable|member|uint16_t *pBitRevTable; /**< points to the bit reversal table. */
DECL|pBitRevTable|member|uint16_t *pBitRevTable; /**< points to the bit reversal table. */
DECL|pBitRevTable|member|uint16_t *pBitRevTable; /**< points to the bit reversal table. */
DECL|pBitRevTable|member|uint16_t *pBitRevTable; /**< points to the bit reversal table. */
DECL|pCfft|member|arm_cfft_radix4_instance_f32 *pCfft; /**< points to the complex FFT instance. */
DECL|pCfft|member|arm_cfft_radix4_instance_f32 *pCfft; /**< points to the complex FFT instance. */
DECL|pCfft|member|arm_cfft_radix4_instance_q15 *pCfft; /**< points to the complex FFT instance. */
DECL|pCfft|member|arm_cfft_radix4_instance_q31 *pCfft; /**< points to the complex FFT instance. */
DECL|pCfft|member|const arm_cfft_instance_q15 *pCfft; /**< points to the complex FFT instance. */
DECL|pCfft|member|const arm_cfft_instance_q31 *pCfft; /**< points to the complex FFT instance. */
DECL|pCoeffs|member|float32_t *pCoeffs; /**< Points to the array of coefficients. The array is of length 5*numStages. */
DECL|pCoeffs|member|float32_t *pCoeffs; /**< points to the array of coefficients. The array is of length 5*numStages. */
DECL|pCoeffs|member|float32_t *pCoeffs; /**< points to the array of coefficients. The array is of length 5*numStages. */
DECL|pCoeffs|member|float32_t *pCoeffs; /**< points to the coefficient array. The array is of length L*phaseLength. */
DECL|pCoeffs|member|float32_t *pCoeffs; /**< points to the coefficient array. The array is of length numStages. */
DECL|pCoeffs|member|float32_t *pCoeffs; /**< points to the coefficient array. The array is of length numTaps. */
DECL|pCoeffs|member|float32_t *pCoeffs; /**< points to the coefficient array. The array is of length numTaps. */
DECL|pCoeffs|member|float32_t *pCoeffs; /**< points to the coefficient array. The array is of length numTaps. */
DECL|pCoeffs|member|float32_t *pCoeffs; /**< points to the coefficient array. The array is of length numTaps.*/
DECL|pCoeffs|member|float32_t *pCoeffs; /**< points to the coefficient array. The array is of length numTaps.*/
DECL|pCoeffs|member|float64_t *pCoeffs; /**< points to the array of coefficients. The array is of length 5*numStages. */
DECL|pCoeffs|member|q15_t *pCoeffs; /**< Points to the array of coefficients. The array is of length 5*numStages. */
DECL|pCoeffs|member|q15_t *pCoeffs; /**< points to the coefficient array. The array is of length L*phaseLength. */
DECL|pCoeffs|member|q15_t *pCoeffs; /**< points to the coefficient array. The array is of length numStages. */
DECL|pCoeffs|member|q15_t *pCoeffs; /**< points to the coefficient array. The array is of length numTaps. */
DECL|pCoeffs|member|q15_t *pCoeffs; /**< points to the coefficient array. The array is of length numTaps. */
DECL|pCoeffs|member|q15_t *pCoeffs; /**< points to the coefficient array. The array is of length numTaps.*/
DECL|pCoeffs|member|q15_t *pCoeffs; /**< points to the coefficient array. The array is of length numTaps.*/
DECL|pCoeffs|member|q15_t *pCoeffs; /**< points to the coefficient array. The array is of length numTaps.*/
DECL|pCoeffs|member|q31_t *pCoeffs; /**< Points to the array of coefficients. The array is of length 5*numStages. */
DECL|pCoeffs|member|q31_t *pCoeffs; /**< points to the array of coefficients. The array is of length 5*numStages. */
DECL|pCoeffs|member|q31_t *pCoeffs; /**< points to the coefficient array. The array is of length L*phaseLength. */
DECL|pCoeffs|member|q31_t *pCoeffs; /**< points to the coefficient array. The array is of length numStages. */
DECL|pCoeffs|member|q31_t *pCoeffs; /**< points to the coefficient array. The array is of length numTaps. */
DECL|pCoeffs|member|q31_t *pCoeffs; /**< points to the coefficient array. The array is of length numTaps. */
DECL|pCoeffs|member|q31_t *pCoeffs; /**< points to the coefficient array. The array is of length numTaps. */
DECL|pCoeffs|member|q31_t *pCoeffs; /**< points to the coefficient array. The array is of length numTaps.*/
DECL|pCoeffs|member|q31_t *pCoeffs; /**< points to the coefficient array. The array is of length numTaps.*/
DECL|pCoeffs|member|q7_t *pCoeffs; /**< points to the coefficient array. The array is of length numTaps.*/
DECL|pCoeffs|member|q7_t *pCoeffs; /**< points to the coefficient array. The array is of length numTaps.*/
DECL|pCosFactor|member|float32_t *pCosFactor; /**< points to the cosFactor table. */
DECL|pCosFactor|member|q15_t *pCosFactor; /**< points to the cosFactor table. */
DECL|pCosFactor|member|q31_t *pCosFactor; /**< points to the cosFactor table. */
DECL|pData|member|float32_t *pData; /**< points to the data of the matrix. */
DECL|pData|member|float32_t *pData; /**< points to the data table. */
DECL|pData|member|float64_t *pData; /**< points to the data of the matrix. */
DECL|pData|member|q15_t *pData; /**< points to the data of the matrix. */
DECL|pData|member|q15_t *pData; /**< points to the data table. */
DECL|pData|member|q31_t *pData; /**< points to the data of the matrix. */
DECL|pData|member|q31_t *pData; /**< points to the data table. */
DECL|pData|member|q7_t *pData; /**< points to the data table. */
DECL|pRfft|member|arm_rfft_instance_f32 *pRfft; /**< points to the real FFT instance. */
DECL|pRfft|member|arm_rfft_instance_q15 *pRfft; /**< points to the real FFT instance. */
DECL|pRfft|member|arm_rfft_instance_q31 *pRfft; /**< points to the real FFT instance. */
DECL|pState|member|float32_t *pState; /**< Points to the array of state coefficients. The array is of length 4*numStages. */
DECL|pState|member|float32_t *pState; /**< points to the array of state coefficients. The array is of length 2*numStages. */
DECL|pState|member|float32_t *pState; /**< points to the array of state coefficients. The array is of length 4*numStages. */
DECL|pState|member|float32_t *pState; /**< points to the state buffer array. The array is of length maxDelay+blockSize-1. */
DECL|pState|member|float32_t *pState; /**< points to the state variable array. The array is of length numStages+blockSize. */
DECL|pState|member|float32_t *pState; /**< points to the state variable array. The array is of length numStages. */
DECL|pState|member|float32_t *pState; /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
DECL|pState|member|float32_t *pState; /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
DECL|pState|member|float32_t *pState; /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
DECL|pState|member|float32_t *pState; /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
DECL|pState|member|float32_t *pState; /**< points to the state variable array. The array is of length phaseLength+numTaps-1. */
DECL|pState|member|float64_t *pState; /**< points to the array of state coefficients. The array is of length 2*numStages. */
DECL|pState|member|q15_t *pState; /**< Points to the array of state coefficients. The array is of length 4*numStages. */
DECL|pState|member|q15_t *pState; /**< points to the state buffer array. The array is of length maxDelay+blockSize-1. */
DECL|pState|member|q15_t *pState; /**< points to the state variable array. The array is of length blockSize+phaseLength-1. */
DECL|pState|member|q15_t *pState; /**< points to the state variable array. The array is of length numStages+blockSize. */
DECL|pState|member|q15_t *pState; /**< points to the state variable array. The array is of length numStages. */
DECL|pState|member|q15_t *pState; /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
DECL|pState|member|q15_t *pState; /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
DECL|pState|member|q15_t *pState; /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
DECL|pState|member|q15_t *pState; /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
DECL|pState|member|q31_t *pState; /**< Points to the array of state coefficients. The array is of length 4*numStages. */
DECL|pState|member|q31_t *pState; /**< points to the state buffer array. The array is of length maxDelay+blockSize-1. */
DECL|pState|member|q31_t *pState; /**< points to the state variable array. The array is of length blockSize+phaseLength-1. */
DECL|pState|member|q31_t *pState; /**< points to the state variable array. The array is of length numStages+blockSize. */
DECL|pState|member|q31_t *pState; /**< points to the state variable array. The array is of length numStages. */
DECL|pState|member|q31_t *pState; /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
DECL|pState|member|q31_t *pState; /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
DECL|pState|member|q31_t *pState; /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
DECL|pState|member|q31_t *pState; /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
DECL|pState|member|q63_t *pState; /**< points to the array of state coefficients. The array is of length 4*numStages. */
DECL|pState|member|q7_t *pState; /**< points to the state buffer array. The array is of length maxDelay+blockSize-1. */
DECL|pState|member|q7_t *pState; /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
DECL|pTapDelay|member|int32_t *pTapDelay; /**< points to the array of delay values. The array is of length numTaps. */
DECL|pTapDelay|member|int32_t *pTapDelay; /**< points to the array of delay values. The array is of length numTaps. */
DECL|pTapDelay|member|int32_t *pTapDelay; /**< points to the array of delay values. The array is of length numTaps. */
DECL|pTapDelay|member|int32_t *pTapDelay; /**< points to the array of delay values. The array is of length numTaps. */
DECL|pTwiddleAReal|member|float32_t *pTwiddleAReal; /**< points to the real twiddle factor table. */
DECL|pTwiddleAReal|member|q15_t *pTwiddleAReal; /**< points to the real twiddle factor table. */
DECL|pTwiddleAReal|member|q31_t *pTwiddleAReal; /**< points to the real twiddle factor table. */
DECL|pTwiddleBReal|member|float32_t *pTwiddleBReal; /**< points to the imag twiddle factor table. */
DECL|pTwiddleBReal|member|q15_t *pTwiddleBReal; /**< points to the imag twiddle factor table. */
DECL|pTwiddleBReal|member|q31_t *pTwiddleBReal; /**< points to the imag twiddle factor table. */
DECL|pTwiddleRFFT|member|float32_t * pTwiddleRFFT; /**< Twiddle factors real stage */
DECL|pTwiddle|member|const float32_t *pTwiddle; /**< points to the Twiddle factor table. */
DECL|pTwiddle|member|const q15_t *pTwiddle; /**< points to the Twiddle factor table. */
DECL|pTwiddle|member|const q31_t *pTwiddle; /**< points to the Twiddle factor table. */
DECL|pTwiddle|member|float32_t *pTwiddle; /**< points to the Twiddle factor table. */
DECL|pTwiddle|member|float32_t *pTwiddle; /**< points to the Twiddle factor table. */
DECL|pTwiddle|member|float32_t *pTwiddle; /**< points to the twiddle factor table. */
DECL|pTwiddle|member|q15_t *pTwiddle; /**< points to the Sin twiddle factor table. */
DECL|pTwiddle|member|q15_t *pTwiddle; /**< points to the twiddle factor table. */
DECL|pTwiddle|member|q15_t *pTwiddle; /**< points to the twiddle factor table. */
DECL|pTwiddle|member|q31_t *pTwiddle; /**< points to the Twiddle factor table. */
DECL|pTwiddle|member|q31_t *pTwiddle; /**< points to the twiddle factor table. */
DECL|pTwiddle|member|q31_t *pTwiddle; /**< points to the twiddle factor table. */
DECL|pYData|member|float32_t *pYData; /**< pointer to the table of Y values */
DECL|phaseLength|member|uint16_t phaseLength; /**< length of each polyphase filter component. */
DECL|phaseLength|member|uint16_t phaseLength; /**< length of each polyphase filter component. */
DECL|phaseLength|member|uint16_t phaseLength; /**< length of each polyphase filter component. */
DECL|pkCoeffs|member|float32_t *pkCoeffs; /**< points to the reflection coefficient array. The array is of length numStages. */
DECL|pkCoeffs|member|q15_t *pkCoeffs; /**< points to the reflection coefficient array. The array is of length numStages. */
DECL|pkCoeffs|member|q31_t *pkCoeffs; /**< points to the reflection coefficient array. The array is of length numStages. */
DECL|postShift|member|int8_t postShift; /**< Additional shift, in bits, applied to each output sample. */
DECL|postShift|member|uint32_t postShift; /**< bit shift applied to coefficients. */
DECL|postShift|member|uint32_t postShift; /**< bit shift applied to coefficients. */
DECL|postShift|member|uint8_t postShift; /**< Additional shift, in bits, applied to each output sample. */
DECL|postShift|member|uint8_t postShift; /**< additional shift, in bits, applied to each output sample. */
DECL|postShift|member|uint8_t postShift; /**< bit shift applied to coefficients. */
DECL|postShift|member|uint8_t postShift; /**< bit shift applied to coefficients. */
DECL|pvCoeffs|member|float32_t *pvCoeffs; /**< points to the ladder coefficient array. The array is of length numStages+1. */
DECL|pvCoeffs|member|q15_t *pvCoeffs; /**< points to the ladder coefficient array. The array is of length numStages+1. */
DECL|pvCoeffs|member|q31_t *pvCoeffs; /**< points to the ladder coefficient array. The array is of length numStages+1. */
DECL|q15_t|typedef|typedef int16_t q15_t;
DECL|q31_t|typedef|typedef int32_t q31_t;
DECL|q63_t|typedef|typedef int64_t q63_t;
DECL|q7_t|typedef|typedef int8_t q7_t;
DECL|recipTable|member|q15_t *recipTable; /**< Points to the reciprocal initial value table. */
DECL|recipTable|member|q31_t *recipTable; /**< points to the reciprocal initial value table. */
DECL|stateIndex|member|uint16_t stateIndex; /**< state buffer index. Points to the oldest sample in the state buffer. */
DECL|stateIndex|member|uint16_t stateIndex; /**< state buffer index. Points to the oldest sample in the state buffer. */
DECL|stateIndex|member|uint16_t stateIndex; /**< state buffer index. Points to the oldest sample in the state buffer. */
DECL|stateIndex|member|uint16_t stateIndex; /**< state buffer index. Points to the oldest sample in the state buffer. */
DECL|state|member|float32_t state[3]; /**< The state array of length 3. */
DECL|state|member|q15_t state[3]; /**< The state array of length 3. */
DECL|state|member|q31_t state[3]; /**< The state array of length 3. */
DECL|twidCoefModifier|member|uint16_t twidCoefModifier; /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
DECL|twidCoefModifier|member|uint16_t twidCoefModifier; /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
DECL|twidCoefModifier|member|uint16_t twidCoefModifier; /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
DECL|twidCoefModifier|member|uint16_t twidCoefModifier; /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
DECL|twidCoefModifier|member|uint16_t twidCoefModifier; /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
DECL|twidCoefModifier|member|uint16_t twidCoefModifier; /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
DECL|twidCoefRModifier|member|uint32_t twidCoefRModifier; /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
DECL|twidCoefRModifier|member|uint32_t twidCoefRModifier; /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
DECL|twidCoefRModifier|member|uint32_t twidCoefRModifier; /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
DECL|x0|member|float32_t x0; /**< saves previous input sample. */
DECL|x0|member|q15_t x0; /**< saves previous input sample. */
DECL|x0|member|q31_t x0; /**< saves previous input sample. */
DECL|x1|member|float32_t x1; /**< x1 */
DECL|xSpacing|member|float32_t xSpacing; /**< xSpacing */
