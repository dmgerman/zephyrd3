DECL|ACCDBLREAD|member|__I uint32_t ACCDBLREAD; /*!< Snapshot of ACCDBL register. Value generated by the TASKS_READCLEACC
DECL|ACCDBL|member|__I uint32_t ACCDBL; /*!< Accumulated double (error) transitions register. */
DECL|ACCREAD|member|__I int32_t ACCREAD; /*!< Snapshot of ACC register. Value generated by the TASKS_READCLEACC
DECL|ACC|member|__I int32_t ACC; /*!< Accumulated valid transitions register. */
DECL|ADC_IRQn|enumerator|ADC_IRQn = 7, /*!< 7 ADC */
DECL|ADDRESS|member|__IO uint32_t ADDRESS; /*!< Address used in the two-wire transfer. */
DECL|ADDRPTR|member|__IO uint32_t ADDRPTR; /*!< Pointer to the resolvable address (6 bytes). */
DECL|AMOUNTRX|member|__I uint32_t AMOUNTRX; /*!< Number of bytes received in last granted transaction. */
DECL|AMOUNTTX|member|__I uint32_t AMOUNTTX; /*!< Number of bytes transmitted in last granted transaction. */
DECL|ANADETECT|member|__IO uint32_t ANADETECT; /*!< Analog detect configuration. */
DECL|BASE0|member|__IO uint32_t BASE0; /*!< Radio base address 0. Decision point: START task. */
DECL|BASE1|member|__IO uint32_t BASE1; /*!< Radio base address 1. Decision point: START task. */
DECL|BAUDRATE|member|__IO uint32_t BAUDRATE; /*!< UART Baudrate. */
DECL|BCC|member|__IO uint32_t BCC; /*!< Bit counter compare. */
DECL|BITMODE|member|__IO uint32_t BITMODE; /*!< Sets timer behaviour. */
DECL|BLE_1MBIT|member|__I uint32_t BLE_1MBIT[5]; /*!< Override values for the OVERRIDEn registers in RADIO for BLE_1Mbit
DECL|BOOTLOADERADDR|member|__IO uint32_t BOOTLOADERADDR; /*!< Bootloader start address. */
DECL|BUSY|member|__I uint32_t BUSY; /*!< ADC busy register. */
DECL|CCM_AAR_IRQn|enumerator|CCM_AAR_IRQn = 15, /*!< 15 CCM_AAR */
DECL|CC|member|__IO uint32_t CC[4]; /*!< Capture/compare registers. */
DECL|CC|member|__IO uint32_t CC[4]; /*!< Capture/compare registers. */
DECL|CHENCLR|member|__IO uint32_t CHENCLR; /*!< Channel enable clear. */
DECL|CHENSET|member|__IO uint32_t CHENSET; /*!< Channel enable set. */
DECL|CHEN|member|__IO uint32_t CHEN; /*!< Channel enable. */
DECL|CHG|member|__IO uint32_t CHG[4]; /*!< Channel group configuration. */
DECL|CH|member|PPI_CH_Type CH[16]; /*!< PPI Channel. */
DECL|CLENR0|member|__I uint32_t CLENR0; /*!< Length of code region 0 in bytes. */
DECL|CLENR0|member|__IO uint32_t CLENR0; /*!< Length of code region 0. */
DECL|CNFPTR|member|__IO uint32_t CNFPTR; /*!< Pointer to a data structure holding AES key and NONCE vector. */
DECL|CODEPAGESIZE|member|__I uint32_t CODEPAGESIZE; /*!< Code memory page size in bytes. */
DECL|CODESIZE|member|__I uint32_t CODESIZE; /*!< Code memory size in pages. */
DECL|CONFIGID|member|__I uint32_t CONFIGID; /*!< Configuration identifier. */
DECL|CONFIG|member|__IO uint32_t CONFIG; /*!< ADC configuration register. */
DECL|CONFIG|member|__IO uint32_t CONFIG; /*!< Configuration of parity and hardware flow control register. */
DECL|CONFIG|member|__IO uint32_t CONFIG; /*!< Configuration register. */
DECL|CONFIG|member|__IO uint32_t CONFIG; /*!< Configuration register. */
DECL|CONFIG|member|__IO uint32_t CONFIG; /*!< Configuration register. */
DECL|CONFIG|member|__IO uint32_t CONFIG; /*!< Configuration register. */
DECL|CONFIG|member|__IO uint32_t CONFIG; /*!< Configuration register. */
DECL|CONFIG|member|__IO uint32_t CONFIG[4]; /*!< Channel configuration registers. */
DECL|COUNTER|member|__I uint32_t COUNTER; /*!< Current COUNTER value. */
DECL|CRCCNF|member|__IO uint32_t CRCCNF; /*!< CRC configuration. */
DECL|CRCINIT|member|__IO uint32_t CRCINIT; /*!< CRC initial value. */
DECL|CRCPOLY|member|__IO uint32_t CRCPOLY; /*!< CRC polynomial. */
DECL|CRCSTATUS|member|__I uint32_t CRCSTATUS; /*!< CRC status of received packet. */
DECL|CRV|member|__IO uint32_t CRV; /*!< Counter reload value in number of 32kiHz clock cycles. */
DECL|CTIV|member|__IO uint32_t CTIV; /*!< Calibration timer interval. */
DECL|CUSTOMER|member|__IO uint32_t CUSTOMER[32]; /*!< Reserved for customer. */
DECL|DAB|member|__IO uint32_t DAB[8]; /*!< Device address base segment. */
DECL|DACNF|member|__IO uint32_t DACNF; /*!< Device address match configuration. */
DECL|DAI|member|__I uint32_t DAI; /*!< Device address match index. */
DECL|DAP|member|__IO uint32_t DAP[8]; /*!< Device address prefix. */
DECL|DATAWHITEIV|member|__IO uint32_t DATAWHITEIV; /*!< Data whitening initial value. */
DECL|DBFEN|member|__IO uint32_t DBFEN; /*!< Enable debouncer input filters. */
DECL|DCDCEN|member|__IO uint32_t DCDCEN; /*!< DCDC converter enable configuration register. */
DECL|DCDCFORCE|member|__IO uint32_t DCDCFORCE; /*!< DCDC power-up force register. */
DECL|DEF|member|__IO uint32_t DEF; /*!< Default character. */
DECL|DEVICEADDRTYPE|member|__I uint32_t DEVICEADDRTYPE; /*!< Device address type. */
DECL|DEVICEADDR|member|__I uint32_t DEVICEADDR[2]; /*!< Device address. */
DECL|DEVICEID|member|__I uint32_t DEVICEID[2]; /*!< Device identifier. */
DECL|DIRCLR|member|__IO uint32_t DIRCLR; /*!< DIR clear register. */
DECL|DIRSET|member|__IO uint32_t DIRSET; /*!< DIR set register. */
DECL|DIR|member|__IO uint32_t DIR; /*!< Direction of GPIO pins. */
DECL|DISABLEINDEBUG|member|__IO uint32_t DISABLEINDEBUG; /*!< Disable erase and write protection mechanism in debug mode. */
DECL|DIS|member|__O uint32_t DIS; /*!< Disable channel group. */
DECL|DebugMonitor_IRQn|enumerator|DebugMonitor_IRQn = -4, /*!< 12 Debug Monitor */
DECL|ECBDATAPTR|member|__IO uint32_t ECBDATAPTR; /*!< ECB block encrypt memory pointer. */
DECL|ECB_IRQn|enumerator|ECB_IRQn = 14, /*!< 14 ECB */
DECL|EEP|member|__IO uint32_t EEP; /*!< Channel event end-point. */
DECL|ENABLE|member|__IO uint32_t ENABLE; /*!< ADC enable. */
DECL|ENABLE|member|__IO uint32_t ENABLE; /*!< CCM enable. */
DECL|ENABLE|member|__IO uint32_t ENABLE; /*!< Enable AAR. */
DECL|ENABLE|member|__IO uint32_t ENABLE; /*!< Enable SPI. */
DECL|ENABLE|member|__IO uint32_t ENABLE; /*!< Enable SPIS. */
DECL|ENABLE|member|__IO uint32_t ENABLE; /*!< Enable UART and acquire IOs. */
DECL|ENABLE|member|__IO uint32_t ENABLE; /*!< Enable the LPCOMP. */
DECL|ENABLE|member|__IO uint32_t ENABLE; /*!< Enable the QDEC. */
DECL|ENABLE|member|__IO uint32_t ENABLE; /*!< Enable two-wire master. */
DECL|EN|member|__O uint32_t EN; /*!< Enable channel group. */
DECL|ERASEALL|member|__IO uint32_t ERASEALL; /*!< Register for erasing all non-volatile user memory. */
DECL|ERASEPAGE|member|__IO uint32_t ERASEPAGE; /*!< Register for erasing a non-protected non-volatile memory page. */
DECL|ERASEPCR0|member|__IO uint32_t ERASEPCR0; /*!< Register for erasing a protected non-volatile memory page. */
DECL|ERASEPCR1|member|__IO uint32_t ERASEPCR1; /*!< Register for erasing a non-protected non-volatile memory page. */
DECL|ERASEUICR|member|__IO uint32_t ERASEUICR; /*!< Register for start erasing User Information Congfiguration Registers. */
DECL|ERRORSRC|member|__IO uint32_t ERRORSRC; /*!< Error source. Write error field to 1 to clear error. */
DECL|ERRORSRC|member|__IO uint32_t ERRORSRC; /*!< Two-wire error source. Write error field to 1 to clear error. */
DECL|ER|member|__I uint32_t ER[4]; /*!< Encryption root. */
DECL|EVENTS_ACCOF|member|__IO uint32_t EVENTS_ACCOF; /*!< ACC or ACCDBL register overflow. */
DECL|EVENTS_ACQUIRED|member|__IO uint32_t EVENTS_ACQUIRED; /*!< Semaphore acquired. */
DECL|EVENTS_ADDRESS|member|__IO uint32_t EVENTS_ADDRESS; /*!< Address event. */
DECL|EVENTS_BB|member|__IO uint32_t EVENTS_BB; /*!< Two-wire byte boundary. */
DECL|EVENTS_BCMATCH|member|__IO uint32_t EVENTS_BCMATCH; /*!< Bit counter reached bit count value specified in BCC register. */
DECL|EVENTS_COMPARE|member|__IO uint32_t EVENTS_COMPARE[4]; /*!< Compare event on CC[n] match. */
DECL|EVENTS_COMPARE|member|__IO uint32_t EVENTS_COMPARE[4]; /*!< Compare event on CC[n] match. */
DECL|EVENTS_CROSS|member|__IO uint32_t EVENTS_CROSS; /*!< Input voltage crossed the threshold in any direction. */
DECL|EVENTS_CTS|member|__IO uint32_t EVENTS_CTS; /*!< CTS activated. */
DECL|EVENTS_CTTO|member|__IO uint32_t EVENTS_CTTO; /*!< Calibration timer timeout. */
DECL|EVENTS_DATARDY|member|__IO uint32_t EVENTS_DATARDY; /*!< Temperature measurement complete, data ready event. */
DECL|EVENTS_DEVMATCH|member|__IO uint32_t EVENTS_DEVMATCH; /*!< A device address match occurred on the last received packet. */
DECL|EVENTS_DEVMISS|member|__IO uint32_t EVENTS_DEVMISS; /*!< No device address match occurred on the last received packet. */
DECL|EVENTS_DISABLED|member|__IO uint32_t EVENTS_DISABLED; /*!< Disable event. */
DECL|EVENTS_DONE|member|__IO uint32_t EVENTS_DONE; /*!< Calibration of LFCLK RC oscillator completed. */
DECL|EVENTS_DOWN|member|__IO uint32_t EVENTS_DOWN; /*!< Input voltage crossed the threshold going down. */
DECL|EVENTS_ENDCRYPT|member|__IO uint32_t EVENTS_ENDCRYPT; /*!< Encrypt/decrypt completed. */
DECL|EVENTS_ENDECB|member|__IO uint32_t EVENTS_ENDECB; /*!< ECB block encrypt complete. */
DECL|EVENTS_ENDKSGEN|member|__IO uint32_t EVENTS_ENDKSGEN; /*!< Keystream generation completed. */
DECL|EVENTS_ENDRX|member|__IO uint32_t EVENTS_ENDRX; /*!< End of RXD buffer reached */
DECL|EVENTS_END|member|__IO uint32_t EVENTS_END; /*!< ADC conversion complete. */
DECL|EVENTS_END|member|__IO uint32_t EVENTS_END; /*!< Address resolution procedure completed. */
DECL|EVENTS_END|member|__IO uint32_t EVENTS_END; /*!< End event. */
DECL|EVENTS_END|member|__IO uint32_t EVENTS_END; /*!< Granted transaction completed. */
DECL|EVENTS_ERRORECB|member|__IO uint32_t EVENTS_ERRORECB; /*!< ECB block encrypt aborted due to a STOPECB task or due to an
DECL|EVENTS_ERROR|member|__IO uint32_t EVENTS_ERROR; /*!< Error detected. */
DECL|EVENTS_ERROR|member|__IO uint32_t EVENTS_ERROR; /*!< Error happened. */
DECL|EVENTS_ERROR|member|__IO uint32_t EVENTS_ERROR; /*!< Two-wire error detected. */
DECL|EVENTS_HFCLKSTARTED|member|__IO uint32_t EVENTS_HFCLKSTARTED; /*!< HFCLK oscillator started. */
DECL|EVENTS_IN|member|__IO uint32_t EVENTS_IN[4]; /*!< Tasks asssociated with GPIOTE channels. */
DECL|EVENTS_LFCLKSTARTED|member|__IO uint32_t EVENTS_LFCLKSTARTED; /*!< LFCLK oscillator started. */
DECL|EVENTS_NCTS|member|__IO uint32_t EVENTS_NCTS; /*!< CTS deactivated. */
DECL|EVENTS_NOTRESOLVED|member|__IO uint32_t EVENTS_NOTRESOLVED; /*!< Address not resolved. */
DECL|EVENTS_OVRFLW|member|__IO uint32_t EVENTS_OVRFLW; /*!< Event on COUNTER overflow. */
DECL|EVENTS_PAYLOAD|member|__IO uint32_t EVENTS_PAYLOAD; /*!< Payload event. */
DECL|EVENTS_POFWARN|member|__IO uint32_t EVENTS_POFWARN; /*!< Power failure warning. */
DECL|EVENTS_PORT|member|__IO uint32_t EVENTS_PORT; /*!< Event generated from multiple pins. */
DECL|EVENTS_READY|member|__IO uint32_t EVENTS_READY; /*!< LPCOMP is ready and output is valid. */
DECL|EVENTS_READY|member|__IO uint32_t EVENTS_READY; /*!< Ready event. */
DECL|EVENTS_READY|member|__IO uint32_t EVENTS_READY; /*!< TXD byte sent and RXD byte received. */
DECL|EVENTS_REPORTRDY|member|__IO uint32_t EVENTS_REPORTRDY; /*!< REPORTPER number of samples accumulated in ACC register, and
DECL|EVENTS_RESOLVED|member|__IO uint32_t EVENTS_RESOLVED; /*!< Address resolved. */
DECL|EVENTS_RSSIEND|member|__IO uint32_t EVENTS_RSSIEND; /*!< Sampling of the receive signal strength complete. A new RSSI
DECL|EVENTS_RXDRDY|member|__IO uint32_t EVENTS_RXDRDY; /*!< Data received in RXD. */
DECL|EVENTS_RXDREADY|member|__IO uint32_t EVENTS_RXDREADY; /*!< Two-wire ready to deliver new RXD byte received. */
DECL|EVENTS_RXTO|member|__IO uint32_t EVENTS_RXTO; /*!< Receiver timeout. */
DECL|EVENTS_SAMPLERDY|member|__IO uint32_t EVENTS_SAMPLERDY; /*!< A new sample is written to the sample register. */
DECL|EVENTS_STOPPED|member|__IO uint32_t EVENTS_STOPPED; /*!< Two-wire stopped. */
DECL|EVENTS_SUSPENDED|member|__IO uint32_t EVENTS_SUSPENDED; /*!< Two-wire suspended. */
DECL|EVENTS_TICK|member|__IO uint32_t EVENTS_TICK; /*!< Event on COUNTER increment. */
DECL|EVENTS_TIMEOUT|member|__IO uint32_t EVENTS_TIMEOUT; /*!< Watchdog timeout. */
DECL|EVENTS_TXDRDY|member|__IO uint32_t EVENTS_TXDRDY; /*!< Data sent from TXD. */
DECL|EVENTS_TXDSENT|member|__IO uint32_t EVENTS_TXDSENT; /*!< Two-wire finished sending last TXD byte. */
DECL|EVENTS_UP|member|__IO uint32_t EVENTS_UP; /*!< Input voltage crossed the threshold going up. */
DECL|EVENTS_VALRDY|member|__IO uint32_t EVENTS_VALRDY; /*!< New random number generated and written to VALUE register. */
DECL|EVTENCLR|member|__IO uint32_t EVTENCLR; /*!< Disable events routing to PPI. The reading of this register
DECL|EVTENSET|member|__IO uint32_t EVTENSET; /*!< Enable events routing to PPI. The reading of this register gives
DECL|EVTEN|member|__IO uint32_t EVTEN; /*!< Configures event enable routing to PPI for each RTC event. */
DECL|EXTREFSEL|member|__IO uint32_t EXTREFSEL; /*!< External reference select. */
DECL|FREQUENCY|member|__IO uint32_t FREQUENCY; /*!< Frequency. */
DECL|FREQUENCY|member|__IO uint32_t FREQUENCY; /*!< SPI frequency */
DECL|FREQUENCY|member|__IO uint32_t FREQUENCY; /*!< Two-wire frequency. */
DECL|FWID|member|__I uint32_t FWID; /*!< Firmware ID. */
DECL|GPIOTE_IRQn|enumerator|GPIOTE_IRQn = 6, /*!< 6 GPIOTE */
DECL|GPREGRET|member|__IO uint32_t GPREGRET; /*!< General purpose retention register. This register is a retained
DECL|HFCLKRUN|member|__I uint32_t HFCLKRUN; /*!< Task HFCLKSTART trigger status. */
DECL|HFCLKSTAT|member|__I uint32_t HFCLKSTAT; /*!< High frequency clock status. */
DECL|HardFault_IRQn|enumerator|HardFault_IRQn = -13, /*!< 3 Hard Fault, all classes of Fault */
DECL|INPTR|member|__IO uint32_t INPTR; /*!< Pointer to the input packet. */
DECL|INTENCLR|member|__IO uint32_t INTENCLR; /*!< Interrupt enable clear register */
DECL|INTENCLR|member|__IO uint32_t INTENCLR; /*!< Interrupt enable clear register. */
DECL|INTENCLR|member|__IO uint32_t INTENCLR; /*!< Interrupt enable clear register. */
DECL|INTENCLR|member|__IO uint32_t INTENCLR; /*!< Interrupt enable clear register. */
DECL|INTENCLR|member|__IO uint32_t INTENCLR; /*!< Interrupt enable clear register. */
DECL|INTENCLR|member|__IO uint32_t INTENCLR; /*!< Interrupt enable clear register. */
DECL|INTENCLR|member|__IO uint32_t INTENCLR; /*!< Interrupt enable clear register. */
DECL|INTENCLR|member|__IO uint32_t INTENCLR; /*!< Interrupt enable clear register. */
DECL|INTENCLR|member|__IO uint32_t INTENCLR; /*!< Interrupt enable clear register. */
DECL|INTENCLR|member|__IO uint32_t INTENCLR; /*!< Interrupt enable clear register. */
DECL|INTENCLR|member|__IO uint32_t INTENCLR; /*!< Interrupt enable clear register. */
DECL|INTENCLR|member|__IO uint32_t INTENCLR; /*!< Interrupt enable clear register. */
DECL|INTENCLR|member|__IO uint32_t INTENCLR; /*!< Interrupt enable clear register. */
DECL|INTENCLR|member|__IO uint32_t INTENCLR; /*!< Interrupt enable clear register. */
DECL|INTENCLR|member|__IO uint32_t INTENCLR; /*!< Interrupt enable clear register. */
DECL|INTENCLR|member|__IO uint32_t INTENCLR; /*!< Interrupt enable clear register. */
DECL|INTENCLR|member|__IO uint32_t INTENCLR; /*!< Interrupt enable clear register. */
DECL|INTENCLR|member|__IO uint32_t INTENCLR; /*!< Interrupt enable clear register. */
DECL|INTENCLR|member|__IO uint32_t INTENCLR; /*!< Interrupt enable clear register. */
DECL|INTENSET|member|__IO uint32_t INTENSET; /*!< Interrupt enable set register */
DECL|INTENSET|member|__IO uint32_t INTENSET; /*!< Interrupt enable set register. */
DECL|INTENSET|member|__IO uint32_t INTENSET; /*!< Interrupt enable set register. */
DECL|INTENSET|member|__IO uint32_t INTENSET; /*!< Interrupt enable set register. */
DECL|INTENSET|member|__IO uint32_t INTENSET; /*!< Interrupt enable set register. */
DECL|INTENSET|member|__IO uint32_t INTENSET; /*!< Interrupt enable set register. */
DECL|INTENSET|member|__IO uint32_t INTENSET; /*!< Interrupt enable set register. */
DECL|INTENSET|member|__IO uint32_t INTENSET; /*!< Interrupt enable set register. */
DECL|INTENSET|member|__IO uint32_t INTENSET; /*!< Interrupt enable set register. */
DECL|INTENSET|member|__IO uint32_t INTENSET; /*!< Interrupt enable set register. */
DECL|INTENSET|member|__IO uint32_t INTENSET; /*!< Interrupt enable set register. */
DECL|INTENSET|member|__IO uint32_t INTENSET; /*!< Interrupt enable set register. */
DECL|INTENSET|member|__IO uint32_t INTENSET; /*!< Interrupt enable set register. */
DECL|INTENSET|member|__IO uint32_t INTENSET; /*!< Interrupt enable set register. */
DECL|INTENSET|member|__IO uint32_t INTENSET; /*!< Interrupt enable set register. */
DECL|INTENSET|member|__IO uint32_t INTENSET; /*!< Interrupt enable set register. */
DECL|INTENSET|member|__IO uint32_t INTENSET; /*!< Interrupt enable set register. */
DECL|INTENSET|member|__IO uint32_t INTENSET; /*!< Interrupt enable set register. */
DECL|INTENSET|member|__IO uint32_t INTENSET; /*!< Interrupt enable set register. */
DECL|IN|member|__I uint32_t IN; /*!< Read GPIO port. */
DECL|IRKPTR|member|__IO uint32_t IRKPTR; /*!< Pointer to the IRK data structure. */
DECL|IRQn_Type|typedef|} IRQn_Type;
DECL|IR|member|__I uint32_t IR[4]; /*!< Identity root. */
DECL|LEDPOL|member|__IO uint32_t LEDPOL; /*!< LED output pin polarity. */
DECL|LEDPRE|member|__IO uint32_t LEDPRE; /*!< Time LED is switched ON before the sample. */
DECL|LFCLKRUN|member|__I uint32_t LFCLKRUN; /*!< Task LFCLKSTART triggered status. */
DECL|LFCLKSRCCOPY|member|__I uint32_t LFCLKSRCCOPY; /*!< Clock source for the LFCLK clock, set when task LKCLKSTART is
DECL|LFCLKSRC|member|__IO uint32_t LFCLKSRC; /*!< Clock source for the LFCLK clock. */
DECL|LFCLKSTAT|member|__I uint32_t LFCLKSTAT; /*!< Low frequency clock status. */
DECL|LPCOMP_IRQn|enumerator|LPCOMP_IRQn = 19, /*!< 19 LPCOMP */
DECL|MAXRX|member|__IO uint32_t MAXRX; /*!< Maximum number of bytes in the receive buffer. */
DECL|MAXTX|member|__IO uint32_t MAXTX; /*!< Maximum number of bytes in the transmit buffer. */
DECL|MICSTATUS|member|__I uint32_t MICSTATUS; /*!< CCM RX MIC check result. */
DECL|MODE|member|__IO uint32_t MODE; /*!< Data rate and modulation. */
DECL|MODE|member|__IO uint32_t MODE; /*!< Operation mode. */
DECL|MODE|member|__IO uint32_t MODE; /*!< Timer Mode selection. */
DECL|NIRK|member|__IO uint32_t NIRK; /*!< Number of Identity root Keys in the IRK data structure. */
DECL|NRF51_H|macro|NRF51_H
DECL|NRFFW|member|__IO uint32_t NRFFW[15]; /*!< Reserved for Nordic firmware design. */
DECL|NRFHW|member|__IO uint32_t NRFHW[12]; /*!< Reserved for Nordic hardware design. */
DECL|NRF_1MBIT|member|__I uint32_t NRF_1MBIT[5]; /*!< Override values for the OVERRIDEn registers in RADIO for NRF_1Mbit
DECL|NRF_AAR_BASE|macro|NRF_AAR_BASE
DECL|NRF_AAR_Type|typedef|} NRF_AAR_Type;
DECL|NRF_AAR|macro|NRF_AAR
DECL|NRF_ADC_BASE|macro|NRF_ADC_BASE
DECL|NRF_ADC_Type|typedef|} NRF_ADC_Type;
DECL|NRF_ADC|macro|NRF_ADC
DECL|NRF_CCM_BASE|macro|NRF_CCM_BASE
DECL|NRF_CCM_Type|typedef|} NRF_CCM_Type;
DECL|NRF_CCM|macro|NRF_CCM
DECL|NRF_CLOCK_BASE|macro|NRF_CLOCK_BASE
DECL|NRF_CLOCK_Type|typedef|} NRF_CLOCK_Type;
DECL|NRF_CLOCK|macro|NRF_CLOCK
DECL|NRF_ECB_BASE|macro|NRF_ECB_BASE
DECL|NRF_ECB_Type|typedef|} NRF_ECB_Type;
DECL|NRF_ECB|macro|NRF_ECB
DECL|NRF_FICR_BASE|macro|NRF_FICR_BASE
DECL|NRF_FICR_Type|typedef|} NRF_FICR_Type;
DECL|NRF_FICR|macro|NRF_FICR
DECL|NRF_GPIOTE_BASE|macro|NRF_GPIOTE_BASE
DECL|NRF_GPIOTE_Type|typedef|} NRF_GPIOTE_Type;
DECL|NRF_GPIOTE|macro|NRF_GPIOTE
DECL|NRF_GPIO_BASE|macro|NRF_GPIO_BASE
DECL|NRF_GPIO_Type|typedef|} NRF_GPIO_Type;
DECL|NRF_GPIO|macro|NRF_GPIO
DECL|NRF_LPCOMP_BASE|macro|NRF_LPCOMP_BASE
DECL|NRF_LPCOMP_Type|typedef|} NRF_LPCOMP_Type;
DECL|NRF_LPCOMP|macro|NRF_LPCOMP
DECL|NRF_MPU_BASE|macro|NRF_MPU_BASE
DECL|NRF_MPU_Type|typedef|} NRF_MPU_Type;
DECL|NRF_MPU|macro|NRF_MPU
DECL|NRF_NVMC_BASE|macro|NRF_NVMC_BASE
DECL|NRF_NVMC_Type|typedef|} NRF_NVMC_Type;
DECL|NRF_NVMC|macro|NRF_NVMC
DECL|NRF_POWER_BASE|macro|NRF_POWER_BASE
DECL|NRF_POWER_Type|typedef|} NRF_POWER_Type;
DECL|NRF_POWER|macro|NRF_POWER
DECL|NRF_PPI_BASE|macro|NRF_PPI_BASE
DECL|NRF_PPI_Type|typedef|} NRF_PPI_Type;
DECL|NRF_PPI|macro|NRF_PPI
DECL|NRF_QDEC_BASE|macro|NRF_QDEC_BASE
DECL|NRF_QDEC_Type|typedef|} NRF_QDEC_Type;
DECL|NRF_QDEC|macro|NRF_QDEC
DECL|NRF_RADIO_BASE|macro|NRF_RADIO_BASE
DECL|NRF_RADIO_Type|typedef|} NRF_RADIO_Type;
DECL|NRF_RADIO|macro|NRF_RADIO
DECL|NRF_RNG_BASE|macro|NRF_RNG_BASE
DECL|NRF_RNG_Type|typedef|} NRF_RNG_Type;
DECL|NRF_RNG|macro|NRF_RNG
DECL|NRF_RTC0_BASE|macro|NRF_RTC0_BASE
DECL|NRF_RTC0|macro|NRF_RTC0
DECL|NRF_RTC1_BASE|macro|NRF_RTC1_BASE
DECL|NRF_RTC1|macro|NRF_RTC1
DECL|NRF_RTC_Type|typedef|} NRF_RTC_Type;
DECL|NRF_SPI0_BASE|macro|NRF_SPI0_BASE
DECL|NRF_SPI0|macro|NRF_SPI0
DECL|NRF_SPI1_BASE|macro|NRF_SPI1_BASE
DECL|NRF_SPI1|macro|NRF_SPI1
DECL|NRF_SPIS1_BASE|macro|NRF_SPIS1_BASE
DECL|NRF_SPIS1|macro|NRF_SPIS1
DECL|NRF_SPIS_Type|typedef|} NRF_SPIS_Type;
DECL|NRF_SPI_Type|typedef|} NRF_SPI_Type;
DECL|NRF_SWI_BASE|macro|NRF_SWI_BASE
DECL|NRF_SWI_Type|typedef|} NRF_SWI_Type;
DECL|NRF_SWI|macro|NRF_SWI
DECL|NRF_TEMP_BASE|macro|NRF_TEMP_BASE
DECL|NRF_TEMP_Type|typedef|} NRF_TEMP_Type;
DECL|NRF_TEMP|macro|NRF_TEMP
DECL|NRF_TIMER0_BASE|macro|NRF_TIMER0_BASE
DECL|NRF_TIMER0|macro|NRF_TIMER0
DECL|NRF_TIMER1_BASE|macro|NRF_TIMER1_BASE
DECL|NRF_TIMER1|macro|NRF_TIMER1
DECL|NRF_TIMER2_BASE|macro|NRF_TIMER2_BASE
DECL|NRF_TIMER2|macro|NRF_TIMER2
DECL|NRF_TIMER_Type|typedef|} NRF_TIMER_Type;
DECL|NRF_TWI0_BASE|macro|NRF_TWI0_BASE
DECL|NRF_TWI0|macro|NRF_TWI0
DECL|NRF_TWI1_BASE|macro|NRF_TWI1_BASE
DECL|NRF_TWI1|macro|NRF_TWI1
DECL|NRF_TWI_Type|typedef|} NRF_TWI_Type;
DECL|NRF_UART0_BASE|macro|NRF_UART0_BASE
DECL|NRF_UART0|macro|NRF_UART0
DECL|NRF_UART_Type|typedef|} NRF_UART_Type;
DECL|NRF_UICR_BASE|macro|NRF_UICR_BASE
DECL|NRF_UICR_Type|typedef|} NRF_UICR_Type;
DECL|NRF_UICR|macro|NRF_UICR
DECL|NRF_WDT_BASE|macro|NRF_WDT_BASE
DECL|NRF_WDT_Type|typedef|} NRF_WDT_Type;
DECL|NRF_WDT|macro|NRF_WDT
DECL|NUMRAMBLOCK|member|__I uint32_t NUMRAMBLOCK; /*!< Number of individualy controllable RAM blocks. */
DECL|NonMaskableInt_IRQn|enumerator|NonMaskableInt_IRQn = -14, /*!< 2 Non maskable Interrupt, cannot be stopped or preempted */
DECL|ORC|member|__IO uint32_t ORC; /*!< Over-read character. */
DECL|OUTCLR|member|__IO uint32_t OUTCLR; /*!< Clear individual bits in GPIO port. */
DECL|OUTPTR|member|__IO uint32_t OUTPTR; /*!< Pointer to the output packet. */
DECL|OUTSET|member|__IO uint32_t OUTSET; /*!< Set individual bits in GPIO port. */
DECL|OUT|member|__IO uint32_t OUT; /*!< Write GPIO port. */
DECL|OVERRIDE0|member|__IO uint32_t OVERRIDE0; /*!< Trim value override register 0. */
DECL|OVERRIDE1|member|__IO uint32_t OVERRIDE1; /*!< Trim value override register 1. */
DECL|OVERRIDE2|member|__IO uint32_t OVERRIDE2; /*!< Trim value override register 2. */
DECL|OVERRIDE3|member|__IO uint32_t OVERRIDE3; /*!< Trim value override register 3. */
DECL|OVERRIDE4|member|__IO uint32_t OVERRIDE4; /*!< Trim value override register 4. */
DECL|OVERRIDEEN|member|__I uint32_t OVERRIDEEN; /*!< Radio calibration override enable. */
DECL|PACKETPTR|member|__IO uint32_t PACKETPTR; /*!< Packet pointer. Decision point: START task. */
DECL|PCNF0|member|__IO uint32_t PCNF0; /*!< Packet configuration 0. */
DECL|PCNF1|member|__IO uint32_t PCNF1; /*!< Packet configuration 1. */
DECL|PERR0|member|__IO uint32_t PERR0; /*!< Configuration of peripherals in mpu regions. */
DECL|PIN_CNF|member|__IO uint32_t PIN_CNF[32]; /*!< Configuration of GPIO pins. */
DECL|POFCON|member|__IO uint32_t POFCON; /*!< Power failure configuration. */
DECL|POWER_CLOCK_IRQn|enumerator|POWER_CLOCK_IRQn = 0, /*!< 0 POWER_CLOCK */
DECL|POWER|member|__IO uint32_t POWER; /*!< Peripheral power control. */
DECL|POWER|member|__IO uint32_t POWER; /*!< Peripheral power control. */
DECL|POWER|member|__IO uint32_t POWER; /*!< Peripheral power control. */
DECL|POWER|member|__IO uint32_t POWER; /*!< Peripheral power control. */
DECL|POWER|member|__IO uint32_t POWER; /*!< Peripheral power control. */
DECL|POWER|member|__IO uint32_t POWER; /*!< Peripheral power control. */
DECL|POWER|member|__IO uint32_t POWER; /*!< Peripheral power control. */
DECL|POWER|member|__IO uint32_t POWER; /*!< Peripheral power control. */
DECL|POWER|member|__IO uint32_t POWER; /*!< Peripheral power control. */
DECL|POWER|member|__IO uint32_t POWER; /*!< Peripheral power control. */
DECL|POWER|member|__IO uint32_t POWER; /*!< Peripheral power control. */
DECL|POWER|member|__IO uint32_t POWER; /*!< Peripheral power control. */
DECL|POWER|member|__IO uint32_t POWER; /*!< Peripheral power control. */
DECL|POWER|member|__IO uint32_t POWER; /*!< Peripheral power control. */
DECL|POWER|member|__IO uint32_t POWER; /*!< Peripheral power control. */
DECL|POWER|member|__IO uint32_t POWER; /*!< Peripheral power control. */
DECL|POWER|member|__IO uint32_t POWER; /*!< Peripheral power control. */
DECL|PPFC|member|__I uint32_t PPFC; /*!< Pre-programmed factory code present. */
DECL|PPI_CH_Type|typedef|} PPI_CH_Type;
DECL|PPI_TASKS_CHG_Type|typedef|} PPI_TASKS_CHG_Type;
DECL|PREFIX0|member|__IO uint32_t PREFIX0; /*!< Prefixes bytes for logical addresses 0 to 3. */
DECL|PREFIX1|member|__IO uint32_t PREFIX1; /*!< Prefixes bytes for logical addresses 4 to 7. */
DECL|PRESCALER|member|__IO uint32_t PRESCALER; /*!< 12-bit prescaler for COUNTER frequency (32768/(PRESCALER+1)).
DECL|PRESCALER|member|__IO uint32_t PRESCALER; /*!< 4-bit prescaler to source clock frequency (max value 9). Source
DECL|PROTBLOCKSIZE|member|__IO uint32_t PROTBLOCKSIZE; /*!< Erase and write protection block size. */
DECL|PROTENSET0|member|__IO uint32_t PROTENSET0; /*!< Erase and write protection bit enable set register. */
DECL|PROTENSET1|member|__IO uint32_t PROTENSET1; /*!< Erase and write protection bit enable set register. */
DECL|PSELA|member|__IO uint32_t PSELA; /*!< Pin select for phase A input. */
DECL|PSELB|member|__IO uint32_t PSELB; /*!< Pin select for phase B input. */
DECL|PSELCSN|member|__IO uint32_t PSELCSN; /*!< Pin select for CSN. */
DECL|PSELCTS|member|__IO uint32_t PSELCTS; /*!< Pin select for CTS. */
DECL|PSELLED|member|__IO uint32_t PSELLED; /*!< Pin select for LED output. */
DECL|PSELMISO|member|__IO uint32_t PSELMISO; /*!< Pin select for MISO. */
DECL|PSELMISO|member|__IO uint32_t PSELMISO; /*!< Pin select for MISO. */
DECL|PSELMOSI|member|__IO uint32_t PSELMOSI; /*!< Pin select for MOSI. */
DECL|PSELMOSI|member|__IO uint32_t PSELMOSI; /*!< Pin select for MOSI. */
DECL|PSELRTS|member|__IO uint32_t PSELRTS; /*!< Pin select for RTS. */
DECL|PSELRXD|member|__IO uint32_t PSELRXD; /*!< Pin select for RXD. */
DECL|PSELSCK|member|__IO uint32_t PSELSCK; /*!< Pin select for SCK. */
DECL|PSELSCK|member|__IO uint32_t PSELSCK; /*!< Pin select for SCK. */
DECL|PSELSCL|member|__IO uint32_t PSELSCL; /*!< Pin select for SCL. */
DECL|PSELSDA|member|__IO uint32_t PSELSDA; /*!< Pin select for SDA. */
DECL|PSELTXD|member|__IO uint32_t PSELTXD; /*!< Pin select for TXD. */
DECL|PSEL|member|__IO uint32_t PSEL; /*!< Input pin select. */
DECL|PendSV_IRQn|enumerator|PendSV_IRQn = -2, /*!< 14 Pendable request for system service */
DECL|QDEC_IRQn|enumerator|QDEC_IRQn = 18, /*!< 18 QDEC */
DECL|RADIO_IRQn|enumerator|RADIO_IRQn = 1, /*!< 1 RADIO */
DECL|RAMONB|member|__IO uint32_t RAMONB; /*!< Ram on/off. */
DECL|RAMON|member|__IO uint32_t RAMON; /*!< Ram on/off. */
DECL|RAMSTATUS|member|__I uint32_t RAMSTATUS; /*!< Ram status register. */
DECL|RBPCONF|member|__IO uint32_t RBPCONF; /*!< Readback protection configuration. */
DECL|READY|member|__I uint32_t READY; /*!< Ready flag. */
DECL|REFSEL|member|__IO uint32_t REFSEL; /*!< Reference select. */
DECL|REPORTPER|member|__IO uint32_t REPORTPER; /*!< Number of samples to generate an EVENT_REPORTRDY. */
DECL|REQSTATUS|member|__I uint32_t REQSTATUS; /*!< Request status. */
DECL|RESERVED0|member|__I uint32_t RESERVED0;
DECL|RESERVED0|member|__I uint32_t RESERVED0;
DECL|RESERVED0|member|__I uint32_t RESERVED0;
DECL|RESERVED0|member|__I uint32_t RESERVED0[11];
DECL|RESERVED0|member|__I uint32_t RESERVED0[256];
DECL|RESERVED0|member|__I uint32_t RESERVED0[30];
DECL|RESERVED0|member|__I uint32_t RESERVED0[312];
DECL|RESERVED0|member|__I uint32_t RESERVED0[321];
DECL|RESERVED0|member|__I uint32_t RESERVED0[330];
DECL|RESERVED0|member|__I uint32_t RESERVED0[3];
DECL|RESERVED0|member|__I uint32_t RESERVED0[4];
DECL|RESERVED0|member|__I uint32_t RESERVED0[55];
DECL|RESERVED0|member|__I uint32_t RESERVED0[57];
DECL|RESERVED0|member|__I uint32_t RESERVED0[60];
DECL|RESERVED0|member|__I uint32_t RESERVED0[60];
DECL|RESERVED0|member|__I uint32_t RESERVED0[61];
DECL|RESERVED0|member|__I uint32_t RESERVED0[61];
DECL|RESERVED0|member|__I uint32_t RESERVED0[61];
DECL|RESERVED0|member|__I uint32_t RESERVED0[62];
DECL|RESERVED0|member|__I uint32_t RESERVED0[62];
DECL|RESERVED0|member|__I uint32_t RESERVED0[62];
DECL|RESERVED0|member|__I uint32_t RESERVED0[62];
DECL|RESERVED0|member|__I uint32_t RESERVED0[63];
DECL|RESERVED0|member|__I uint32_t RESERVED0[66];
DECL|RESERVED0|member|__I uint32_t RESERVED0[9];
DECL|RESERVED10|member|__I uint32_t RESERVED10;
DECL|RESERVED10|member|__I uint32_t RESERVED10[110];
DECL|RESERVED10|member|__I uint32_t RESERVED10[3];
DECL|RESERVED10|member|__I uint32_t RESERVED10[56];
DECL|RESERVED10|member|__I uint32_t RESERVED10[7];
DECL|RESERVED11|member|__I uint32_t RESERVED11;
DECL|RESERVED11|member|__I uint32_t RESERVED11[14];
DECL|RESERVED11|member|__I uint32_t RESERVED11[17];
DECL|RESERVED11|member|__I uint32_t RESERVED11[561];
DECL|RESERVED11|member|__I uint32_t RESERVED11[8];
DECL|RESERVED12|member|__I uint32_t RESERVED12;
DECL|RESERVED12|member|__I uint32_t RESERVED12;
DECL|RESERVED12|member|__I uint32_t RESERVED12[291];
DECL|RESERVED12|member|__I uint32_t RESERVED12[675];
DECL|RESERVED13|member|__I uint32_t RESERVED13;
DECL|RESERVED13|member|__I uint32_t RESERVED13[2];
DECL|RESERVED14|member|__I uint32_t RESERVED14;
DECL|RESERVED14|member|__I uint32_t RESERVED14[24];
DECL|RESERVED15|member|__I uint32_t RESERVED15[24];
DECL|RESERVED15|member|__I uint32_t RESERVED15[654];
DECL|RESERVED16|member|__I uint32_t RESERVED16[668];
DECL|RESERVED1|member|__I uint32_t RESERVED1;
DECL|RESERVED1|member|__I uint32_t RESERVED1;
DECL|RESERVED1|member|__I uint32_t RESERVED1[120];
DECL|RESERVED1|member|__I uint32_t RESERVED1[126];
DECL|RESERVED1|member|__I uint32_t RESERVED1[127];
DECL|RESERVED1|member|__I uint32_t RESERVED1[128];
DECL|RESERVED1|member|__I uint32_t RESERVED1[128];
DECL|RESERVED1|member|__I uint32_t RESERVED1[128];
DECL|RESERVED1|member|__I uint32_t RESERVED1[14];
DECL|RESERVED1|member|__I uint32_t RESERVED1[27];
DECL|RESERVED1|member|__I uint32_t RESERVED1[2];
DECL|RESERVED1|member|__I uint32_t RESERVED1[2];
DECL|RESERVED1|member|__I uint32_t RESERVED1[34];
DECL|RESERVED1|member|__I uint32_t RESERVED1[4];
DECL|RESERVED1|member|__I uint32_t RESERVED1[52];
DECL|RESERVED1|member|__I uint32_t RESERVED1[54];
DECL|RESERVED1|member|__I uint32_t RESERVED1[56];
DECL|RESERVED1|member|__I uint32_t RESERVED1[60];
DECL|RESERVED1|member|__I uint32_t RESERVED1[60];
DECL|RESERVED1|member|__I uint32_t RESERVED1[61];
DECL|RESERVED1|member|__I uint32_t RESERVED1[61];
DECL|RESERVED1|member|__I uint32_t RESERVED1[61];
DECL|RESERVED1|member|__I uint32_t RESERVED1[63];
DECL|RESERVED1|member|__I uint32_t RESERVED1[64];
DECL|RESERVED2|member|__I uint32_t RESERVED2;
DECL|RESERVED2|member|__I uint32_t RESERVED2;
DECL|RESERVED2|member|__I uint32_t RESERVED2[109];
DECL|RESERVED2|member|__I uint32_t RESERVED2[124];
DECL|RESERVED2|member|__I uint32_t RESERVED2[125];
DECL|RESERVED2|member|__I uint32_t RESERVED2[126];
DECL|RESERVED2|member|__I uint32_t RESERVED2[126];
DECL|RESERVED2|member|__I uint32_t RESERVED2[126];
DECL|RESERVED2|member|__I uint32_t RESERVED2[127];
DECL|RESERVED2|member|__I uint32_t RESERVED2[156];
DECL|RESERVED2|member|__I uint32_t RESERVED2[2];
DECL|RESERVED2|member|__I uint32_t RESERVED2[44];
DECL|RESERVED2|member|__I uint32_t RESERVED2[4];
DECL|RESERVED2|member|__I uint32_t RESERVED2[53];
DECL|RESERVED2|member|__I uint32_t RESERVED2[61];
DECL|RESERVED2|member|__I uint32_t RESERVED2[61];
DECL|RESERVED2|member|__I uint32_t RESERVED2[64];
DECL|RESERVED2|member|__I uint32_t RESERVED2[64];
DECL|RESERVED2|member|__I uint32_t RESERVED2[64];
DECL|RESERVED2|member|__I uint32_t RESERVED2[64];
DECL|RESERVED2|member|__I uint32_t RESERVED2[97];
DECL|RESERVED3|member|__I uint32_t RESERVED3;
DECL|RESERVED3|member|__I uint32_t RESERVED3;
DECL|RESERVED3|member|__I uint32_t RESERVED3[125];
DECL|RESERVED3|member|__I uint32_t RESERVED3[126];
DECL|RESERVED3|member|__I uint32_t RESERVED3[129];
DECL|RESERVED3|member|__I uint32_t RESERVED3[13];
DECL|RESERVED3|member|__I uint32_t RESERVED3[56];
DECL|RESERVED3|member|__I uint32_t RESERVED3[5];
DECL|RESERVED3|member|__I uint32_t RESERVED3[5];
DECL|RESERVED3|member|__I uint32_t RESERVED3[61];
DECL|RESERVED3|member|__I uint32_t RESERVED3[61];
DECL|RESERVED3|member|__I uint32_t RESERVED3[61];
DECL|RESERVED3|member|__I uint32_t RESERVED3[61];
DECL|RESERVED3|member|__I uint32_t RESERVED3[63];
DECL|RESERVED3|member|__I uint32_t RESERVED3[63];
DECL|RESERVED3|member|__I uint32_t RESERVED3[63];
DECL|RESERVED3|member|__I uint32_t RESERVED3[64];
DECL|RESERVED3|member|__I uint32_t RESERVED3[64];
DECL|RESERVED3|member|__I uint32_t RESERVED3[700];
DECL|RESERVED3|member|__I uint32_t RESERVED3[701];
DECL|RESERVED4|member|__I uint32_t RESERVED4;
DECL|RESERVED4|member|__I uint32_t RESERVED4;
DECL|RESERVED4|member|__I uint32_t RESERVED4[110];
DECL|RESERVED4|member|__I uint32_t RESERVED4[126];
DECL|RESERVED4|member|__I uint32_t RESERVED4[4];
DECL|RESERVED4|member|__I uint32_t RESERVED4[53];
DECL|RESERVED4|member|__I uint32_t RESERVED4[5];
DECL|RESERVED4|member|__I uint32_t RESERVED4[60];
DECL|RESERVED4|member|__I uint32_t RESERVED4[61];
DECL|RESERVED4|member|__I uint32_t RESERVED4[63];
DECL|RESERVED4|member|__I uint32_t RESERVED4[63];
DECL|RESERVED4|member|__I uint32_t RESERVED4[63];
DECL|RESERVED4|member|__I uint32_t RESERVED4[695];
DECL|RESERVED4|member|__I uint32_t RESERVED4[6];
DECL|RESERVED4|member|__I uint32_t RESERVED4[700];
DECL|RESERVED4|member|__I uint32_t RESERVED4[700];
DECL|RESERVED4|member|__I uint32_t RESERVED4[7];
DECL|RESERVED4|member|__I uint32_t RESERVED4[9];
DECL|RESERVED5|member|__I uint32_t RESERVED5;
DECL|RESERVED5|member|__I uint32_t RESERVED5;
DECL|RESERVED5|member|__I uint32_t RESERVED5;
DECL|RESERVED5|member|__I uint32_t RESERVED5;
DECL|RESERVED5|member|__I uint32_t RESERVED5;
DECL|RESERVED5|member|__I uint32_t RESERVED5[10];
DECL|RESERVED5|member|__I uint32_t RESERVED5[13];
DECL|RESERVED5|member|__I uint32_t RESERVED5[46];
DECL|RESERVED5|member|__I uint32_t RESERVED5[4];
DECL|RESERVED5|member|__I uint32_t RESERVED5[53];
DECL|RESERVED5|member|__I uint32_t RESERVED5[62];
DECL|RESERVED5|member|__I uint32_t RESERVED5[631];
DECL|RESERVED5|member|__I uint32_t RESERVED5[64];
DECL|RESERVED5|member|__I uint32_t RESERVED5[684];
DECL|RESERVED5|member|__I uint32_t RESERVED5[697];
DECL|RESERVED6|member|__I uint32_t RESERVED6[11];
DECL|RESERVED6|member|__I uint32_t RESERVED6[11];
DECL|RESERVED6|member|__I uint32_t RESERVED6[3];
DECL|RESERVED6|member|__I uint32_t RESERVED6[4];
DECL|RESERVED6|member|__I uint32_t RESERVED6[60];
DECL|RESERVED6|member|__I uint32_t RESERVED6[61];
DECL|RESERVED6|member|__I uint32_t RESERVED6[64];
DECL|RESERVED6|member|__I uint32_t RESERVED6[683];
DECL|RESERVED6|member|__I uint32_t RESERVED6[694];
DECL|RESERVED6|member|__I uint32_t RESERVED6[697];
DECL|RESERVED6|member|__I uint32_t RESERVED6[7];
DECL|RESERVED7|member|__I uint32_t RESERVED7;
DECL|RESERVED7|member|__I uint32_t RESERVED7[15];
DECL|RESERVED7|member|__I uint32_t RESERVED7[2];
DECL|RESERVED7|member|__I uint32_t RESERVED7[3];
DECL|RESERVED7|member|__I uint32_t RESERVED7[5];
DECL|RESERVED7|member|__I uint32_t RESERVED7[681];
DECL|RESERVED7|member|__I uint32_t RESERVED7[683];
DECL|RESERVED7|member|__I uint32_t RESERVED7[93];
DECL|RESERVED8|member|__I uint32_t RESERVED8;
DECL|RESERVED8|member|__I uint32_t RESERVED8[2];
DECL|RESERVED8|member|__I uint32_t RESERVED8[31];
DECL|RESERVED8|member|__I uint32_t RESERVED8[45];
DECL|RESERVED8|member|__I uint32_t RESERVED8[47];
DECL|RESERVED9|member|__I uint32_t RESERVED9;
DECL|RESERVED9|member|__I uint32_t RESERVED9;
DECL|RESERVED9|member|__I uint32_t RESERVED9[39];
DECL|RESERVED9|member|__I uint32_t RESERVED9[64];
DECL|RESERVED9|member|__I uint32_t RESERVED9[7];
DECL|RESETREAS|member|__IO uint32_t RESETREAS; /*!< Reset reason. */
DECL|RESET|member|__IO uint32_t RESET; /*!< Pin reset functionality configuration register. This register
DECL|RESULT|member|__I uint32_t RESULT; /*!< Result of ADC conversion. */
DECL|RESULT|member|__I uint32_t RESULT; /*!< Result of last compare. */
DECL|RLENR0|member|__IO uint32_t RLENR0; /*!< Length of RAM region 0. */
DECL|RNG_IRQn|enumerator|RNG_IRQn = 13, /*!< 13 RNG */
DECL|RREN|member|__IO uint32_t RREN; /*!< Reload request enable. */
DECL|RR|member|__O uint32_t RR[8]; /*!< Reload requests registers. */
DECL|RSSISAMPLE|member|__I uint32_t RSSISAMPLE; /*!< RSSI sample. */
DECL|RTC0_IRQn|enumerator|RTC0_IRQn = 11, /*!< 11 RTC0 */
DECL|RTC1_IRQn|enumerator|RTC1_IRQn = 17, /*!< 17 RTC1 */
DECL|RUNSTATUS|member|__I uint32_t RUNSTATUS; /*!< Watchdog running status. */
DECL|RXADDRESSES|member|__IO uint32_t RXADDRESSES; /*!< Receive address select. */
DECL|RXCRC|member|__I uint32_t RXCRC; /*!< Received CRC. */
DECL|RXDPTR|member|__IO uint32_t RXDPTR; /*!< RX data pointer. */
DECL|RXD|member|__I uint32_t RXD; /*!< RX data register. */
DECL|RXD|member|__I uint32_t RXD; /*!< RX data. */
DECL|RXD|member|__I uint32_t RXD; /*!< RXD register. On read action the buffer pointer is displaced.
DECL|RXMATCH|member|__I uint32_t RXMATCH; /*!< Received address. */
DECL|Reset_IRQn|enumerator|Reset_IRQn = -15, /*!< 1 Reset Vector, invoked on Power up and warm reset */
DECL|SAMPLEPER|member|__IO uint32_t SAMPLEPER; /*!< Sample period. */
DECL|SAMPLE|member|__I int32_t SAMPLE; /*!< Motion sample value. */
DECL|SCRATCHPTR|member|__IO uint32_t SCRATCHPTR; /*!< Pointer to a scratch data area used for temporary storage during
DECL|SCRATCHPTR|member|__IO uint32_t SCRATCHPTR; /*!< Pointer to a scratch data area used for temporary storage during
DECL|SEMSTAT|member|__I uint32_t SEMSTAT; /*!< Semaphore status. */
DECL|SHORTS|member|__IO uint32_t SHORTS; /*!< Shortcuts for SPIS. */
DECL|SHORTS|member|__IO uint32_t SHORTS; /*!< Shortcuts for TWI. */
DECL|SHORTS|member|__IO uint32_t SHORTS; /*!< Shortcuts for Timer. */
DECL|SHORTS|member|__IO uint32_t SHORTS; /*!< Shortcuts for UART. */
DECL|SHORTS|member|__IO uint32_t SHORTS; /*!< Shortcuts for the CCM. */
DECL|SHORTS|member|__IO uint32_t SHORTS; /*!< Shortcuts for the LPCOMP. */
DECL|SHORTS|member|__IO uint32_t SHORTS; /*!< Shortcuts for the QDEC. */
DECL|SHORTS|member|__IO uint32_t SHORTS; /*!< Shortcuts for the RNG. */
DECL|SHORTS|member|__IO uint32_t SHORTS; /*!< Shortcuts for the radio. */
DECL|SIZERAMBLOCKS|member|__I uint32_t SIZERAMBLOCKS; /*!< Size of RAM blocks in bytes. */
DECL|SIZERAMBLOCK|member|__I uint32_t SIZERAMBLOCK[4]; /*!< Deprecated array of size of RAM block in bytes. This name is
DECL|SPI0_TWI0_IRQn|enumerator|SPI0_TWI0_IRQn = 3, /*!< 3 SPI0_TWI0 */
DECL|SPI1_TWI1_IRQn|enumerator|SPI1_TWI1_IRQn = 4, /*!< 4 SPI1_TWI1 */
DECL|STATE|member|__I uint32_t STATE; /*!< Current radio state. */
DECL|STATUS|member|__I uint32_t STATUS; /*!< Resolution status. */
DECL|STATUS|member|__IO uint32_t STATUS; /*!< Status from last transaction. */
DECL|SVCall_IRQn|enumerator|SVCall_IRQn = -5, /*!< 11 System Service Call via SVC instruction */
DECL|SWI0_IRQn|enumerator|SWI0_IRQn = 20, /*!< 20 SWI0 */
DECL|SWI1_IRQn|enumerator|SWI1_IRQn = 21, /*!< 21 SWI1 */
DECL|SWI2_IRQn|enumerator|SWI2_IRQn = 22, /*!< 22 SWI2 */
DECL|SWI3_IRQn|enumerator|SWI3_IRQn = 23, /*!< 23 SWI3 */
DECL|SWI4_IRQn|enumerator|SWI4_IRQn = 24, /*!< 24 SWI4 */
DECL|SWI5_IRQn|enumerator|SWI5_IRQn = 25 /*!< 25 SWI5 */
DECL|SYSTEMOFF|member|__O uint32_t SYSTEMOFF; /*!< System off register. */
DECL|SysTick_IRQn|enumerator|SysTick_IRQn = -1, /*!< 15 System Tick Timer */
DECL|TASKS_ACQUIRE|member|__O uint32_t TASKS_ACQUIRE; /*!< Acquire SPI semaphore. */
DECL|TASKS_BCSTART|member|__O uint32_t TASKS_BCSTART; /*!< Start the bit counter. */
DECL|TASKS_BCSTOP|member|__O uint32_t TASKS_BCSTOP; /*!< Stop the bit counter. */
DECL|TASKS_CAL|member|__O uint32_t TASKS_CAL; /*!< Start calibration of LFCLK RC oscillator. */
DECL|TASKS_CAPTURE|member|__O uint32_t TASKS_CAPTURE[4]; /*!< Capture Timer value to CC[n] registers. */
DECL|TASKS_CHG|member|PPI_TASKS_CHG_Type TASKS_CHG[4]; /*!< Channel group tasks. */
DECL|TASKS_CLEAR|member|__O uint32_t TASKS_CLEAR; /*!< Clear RTC Counter. */
DECL|TASKS_CLEAR|member|__O uint32_t TASKS_CLEAR; /*!< Clear timer. */
DECL|TASKS_CONSTLAT|member|__O uint32_t TASKS_CONSTLAT; /*!< Enable constant latency mode. */
DECL|TASKS_COUNT|member|__O uint32_t TASKS_COUNT; /*!< Increment Timer (In counter mode). */
DECL|TASKS_CRYPT|member|__O uint32_t TASKS_CRYPT; /*!< Start encrypt/decrypt. This operation will stop by itself when
DECL|TASKS_CTSTART|member|__O uint32_t TASKS_CTSTART; /*!< Start calibration timer. */
DECL|TASKS_CTSTOP|member|__O uint32_t TASKS_CTSTOP; /*!< Stop calibration timer. */
DECL|TASKS_DISABLE|member|__O uint32_t TASKS_DISABLE; /*!< Disable radio. */
DECL|TASKS_HFCLKSTART|member|__O uint32_t TASKS_HFCLKSTART; /*!< Start HFCLK clock source. */
DECL|TASKS_HFCLKSTOP|member|__O uint32_t TASKS_HFCLKSTOP; /*!< Stop HFCLK clock source. */
DECL|TASKS_KSGEN|member|__O uint32_t TASKS_KSGEN; /*!< Start generation of key-stream. This operation will stop by
DECL|TASKS_LFCLKSTART|member|__O uint32_t TASKS_LFCLKSTART; /*!< Start LFCLK clock source. */
DECL|TASKS_LFCLKSTOP|member|__O uint32_t TASKS_LFCLKSTOP; /*!< Stop LFCLK clock source. */
DECL|TASKS_LOWPWR|member|__O uint32_t TASKS_LOWPWR; /*!< Enable low power mode (variable latency). */
DECL|TASKS_OUT|member|__O uint32_t TASKS_OUT[4]; /*!< Tasks asssociated with GPIOTE channels. */
DECL|TASKS_READCLRACC|member|__O uint32_t TASKS_READCLRACC; /*!< Transfers the content from ACC registers to ACCREAD registers,
DECL|TASKS_RELEASE|member|__O uint32_t TASKS_RELEASE; /*!< Release SPI semaphore. */
DECL|TASKS_RESUME|member|__O uint32_t TASKS_RESUME; /*!< Resume 2-Wire transaction. */
DECL|TASKS_RSSISTART|member|__O uint32_t TASKS_RSSISTART; /*!< Start the RSSI and take one sample of the receive signal strength. */
DECL|TASKS_RSSISTOP|member|__O uint32_t TASKS_RSSISTOP; /*!< Stop the RSSI measurement. */
DECL|TASKS_RXEN|member|__O uint32_t TASKS_RXEN; /*!< Enable radio in RX mode. */
DECL|TASKS_SAMPLE|member|__O uint32_t TASKS_SAMPLE; /*!< Sample comparator value. */
DECL|TASKS_SHUTDOWN|member|__O uint32_t TASKS_SHUTDOWN; /*!< Shutdown timer. */
DECL|TASKS_STARTECB|member|__O uint32_t TASKS_STARTECB; /*!< Start ECB block encrypt. If a crypto operation is running, this
DECL|TASKS_STARTRX|member|__O uint32_t TASKS_STARTRX; /*!< Start 2-Wire master receive sequence. */
DECL|TASKS_STARTRX|member|__O uint32_t TASKS_STARTRX; /*!< Start UART receiver. */
DECL|TASKS_STARTTX|member|__O uint32_t TASKS_STARTTX; /*!< Start 2-Wire master transmit sequence. */
DECL|TASKS_STARTTX|member|__O uint32_t TASKS_STARTTX; /*!< Start UART transmitter. */
DECL|TASKS_START|member|__O uint32_t TASKS_START; /*!< Start RTC Counter. */
DECL|TASKS_START|member|__O uint32_t TASKS_START; /*!< Start Timer. */
DECL|TASKS_START|member|__O uint32_t TASKS_START; /*!< Start an ADC conversion. */
DECL|TASKS_START|member|__O uint32_t TASKS_START; /*!< Start radio. */
DECL|TASKS_START|member|__O uint32_t TASKS_START; /*!< Start resolving addresses based on IRKs specified in the IRK
DECL|TASKS_START|member|__O uint32_t TASKS_START; /*!< Start temperature measurement. */
DECL|TASKS_START|member|__O uint32_t TASKS_START; /*!< Start the comparator. */
DECL|TASKS_START|member|__O uint32_t TASKS_START; /*!< Start the quadrature decoder. */
DECL|TASKS_START|member|__O uint32_t TASKS_START; /*!< Start the random number generator. */
DECL|TASKS_START|member|__O uint32_t TASKS_START; /*!< Start the watchdog. */
DECL|TASKS_STOPECB|member|__O uint32_t TASKS_STOPECB; /*!< Stop current ECB encryption. If a crypto operation is running,
DECL|TASKS_STOPRX|member|__O uint32_t TASKS_STOPRX; /*!< Stop UART receiver. */
DECL|TASKS_STOPTX|member|__O uint32_t TASKS_STOPTX; /*!< Stop UART transmitter. */
DECL|TASKS_STOP|member|__O uint32_t TASKS_STOP; /*!< Stop 2-Wire transaction. */
DECL|TASKS_STOP|member|__O uint32_t TASKS_STOP; /*!< Stop ADC. */
DECL|TASKS_STOP|member|__O uint32_t TASKS_STOP; /*!< Stop RTC Counter. */
DECL|TASKS_STOP|member|__O uint32_t TASKS_STOP; /*!< Stop Timer. */
DECL|TASKS_STOP|member|__O uint32_t TASKS_STOP; /*!< Stop encrypt/decrypt. */
DECL|TASKS_STOP|member|__O uint32_t TASKS_STOP; /*!< Stop radio. */
DECL|TASKS_STOP|member|__O uint32_t TASKS_STOP; /*!< Stop resolving addresses. */
DECL|TASKS_STOP|member|__O uint32_t TASKS_STOP; /*!< Stop temperature measurement. */
DECL|TASKS_STOP|member|__O uint32_t TASKS_STOP; /*!< Stop the comparator. */
DECL|TASKS_STOP|member|__O uint32_t TASKS_STOP; /*!< Stop the quadrature decoder. */
DECL|TASKS_STOP|member|__O uint32_t TASKS_STOP; /*!< Stop the random number generator. */
DECL|TASKS_SUSPEND|member|__O uint32_t TASKS_SUSPEND; /*!< Suspend 2-Wire transaction. */
DECL|TASKS_SUSPEND|member|__O uint32_t TASKS_SUSPEND; /*!< Suspend UART. */
DECL|TASKS_TRIGOVRFLW|member|__O uint32_t TASKS_TRIGOVRFLW; /*!< Set COUNTER to 0xFFFFFFF0. */
DECL|TASKS_TXEN|member|__O uint32_t TASKS_TXEN; /*!< Enable radio in TX mode. */
DECL|TEMP_IRQn|enumerator|TEMP_IRQn = 12, /*!< 12 TEMP */
DECL|TEMP|member|__I int32_t TEMP; /*!< Die temperature in degC, 2's complement format, 0.25 degC pecision. */
DECL|TEP|member|__IO uint32_t TEP; /*!< Channel task end-point. */
DECL|TEST|member|__IO uint32_t TEST; /*!< Test features enable register. */
DECL|TIFS|member|__IO uint32_t TIFS; /*!< Inter Frame Spacing in microseconds. */
DECL|TIMER0_IRQn|enumerator|TIMER0_IRQn = 8, /*!< 8 TIMER0 */
DECL|TIMER1_IRQn|enumerator|TIMER1_IRQn = 9, /*!< 9 TIMER1 */
DECL|TIMER2_IRQn|enumerator|TIMER2_IRQn = 10, /*!< 10 TIMER2 */
DECL|TXADDRESS|member|__IO uint32_t TXADDRESS; /*!< Transmit address select. */
DECL|TXDPTR|member|__IO uint32_t TXDPTR; /*!< TX data pointer. */
DECL|TXD|member|__IO uint32_t TXD; /*!< TX data register. */
DECL|TXD|member|__IO uint32_t TXD; /*!< TX data. */
DECL|TXD|member|__O uint32_t TXD; /*!< TXD register. */
DECL|TXPOWER|member|__IO uint32_t TXPOWER; /*!< Output power. */
DECL|UART0_IRQn|enumerator|UART0_IRQn = 2, /*!< 2 UART0 */
DECL|UNUSED|member|__I uint32_t UNUSED; /*!< Unused. */
DECL|VALUE|member|__I uint32_t VALUE; /*!< RNG random number. */
DECL|WDT_IRQn|enumerator|WDT_IRQn = 16, /*!< 16 WDT */
DECL|XTALFREQ|member|__IO uint32_t XTALFREQ; /*!< Crystal frequency. */
DECL|XTALFREQ|member|__IO uint32_t XTALFREQ; /*!< Reset value for CLOCK XTALFREQ register. */
DECL|__CM0_REV|macro|__CM0_REV
DECL|__MPU_PRESENT|macro|__MPU_PRESENT
DECL|__NVIC_PRIO_BITS|macro|__NVIC_PRIO_BITS
DECL|__Vendor_SysTickConfig|macro|__Vendor_SysTickConfig
