DECL|ACCDBLREAD|member|__IM uint32_t ACCDBLREAD; /*!< (@ 0x00000548) Snapshot of ACCDBL register. Value generated
DECL|ACCDBL|member|__IM uint32_t ACCDBL; /*!< (@ 0x00000544) Accumulated double (error) transitions register. */
DECL|ACCREAD|member|__IM int32_t ACCREAD; /*!< (@ 0x00000518) Snapshot of ACC register. Value generated by
DECL|ACC|member|__IM int32_t ACC; /*!< (@ 0x00000514) Accumulated valid transitions register. */
DECL|ADC_IRQn|enumerator|ADC_IRQn = 7, /*!< 7 ADC */
DECL|ADDRESS|member|__IOM uint32_t ADDRESS; /*!< (@ 0x00000588) Address used in the two-wire transfer. */
DECL|ADDRPTR|member|__IOM uint32_t ADDRPTR; /*!< (@ 0x00000510) Pointer to the resolvable address (6 bytes). */
DECL|AMOUNTRX|member|__IM uint32_t AMOUNTRX; /*!< (@ 0x0000053C) Number of bytes received in last granted transaction. */
DECL|AMOUNTTX|member|__IM uint32_t AMOUNTTX; /*!< (@ 0x0000054C) Number of bytes transmitted in last granted transaction. */
DECL|ANADETECT|member|__IOM uint32_t ANADETECT; /*!< (@ 0x00000520) Analog detect configuration. */
DECL|BASE0|member|__IOM uint32_t BASE0; /*!< (@ 0x0000051C) Radio base address 0. Decision point: START task. */
DECL|BASE1|member|__IOM uint32_t BASE1; /*!< (@ 0x00000520) Radio base address 1. Decision point: START task. */
DECL|BAUDRATE|member|__IOM uint32_t BAUDRATE; /*!< (@ 0x00000524) UART Baudrate. */
DECL|BCC|member|__IOM uint32_t BCC; /*!< (@ 0x00000560) Bit counter compare. */
DECL|BITMODE|member|__IOM uint32_t BITMODE; /*!< (@ 0x00000508) Sets timer behaviour. */
DECL|BLE_1MBIT|member|__IM uint32_t BLE_1MBIT[5]; /*!< (@ 0x000000EC) Override values for the OVERRIDEn registers in
DECL|BOOTLOADERADDR|member|__IOM uint32_t BOOTLOADERADDR; /*!< (@ 0x00000014) Bootloader start address. */
DECL|BUSY|member|__IM uint32_t BUSY; /*!< (@ 0x00000400) ADC busy register. */
DECL|CCM_AAR_IRQn|enumerator|CCM_AAR_IRQn = 15, /*!< 15 CCM_AAR */
DECL|CC|member|__IOM uint32_t CC[4]; /*!< (@ 0x00000540) Capture/compare registers. */
DECL|CC|member|__IOM uint32_t CC[4]; /*!< (@ 0x00000540) Capture/compare registers. */
DECL|CHENCLR|member|__IOM uint32_t CHENCLR; /*!< (@ 0x00000508) Channel enable clear. */
DECL|CHENSET|member|__IOM uint32_t CHENSET; /*!< (@ 0x00000504) Channel enable set. */
DECL|CHEN|member|__IOM uint32_t CHEN; /*!< (@ 0x00000500) Channel enable. */
DECL|CHG|member|__IOM uint32_t CHG[4]; /*!< (@ 0x00000800) Channel group configuration. */
DECL|CH|member|__IOM PPI_CH_Type CH[16]; /*!< (@ 0x00000510) PPI Channel. */
DECL|CLENR0|member|__IM uint32_t CLENR0; /*!< (@ 0x00000028) Length of code region 0 in bytes. */
DECL|CLENR0|member|__IOM uint32_t CLENR0; /*!< (@ 0x00000000) Length of code region 0. */
DECL|CNFPTR|member|__IOM uint32_t CNFPTR; /*!< (@ 0x00000508) Pointer to a data structure holding AES key and
DECL|CODEPAGESIZE|member|__IM uint32_t CODEPAGESIZE; /*!< (@ 0x00000010) Code memory page size in bytes. */
DECL|CODESIZE|member|__IM uint32_t CODESIZE; /*!< (@ 0x00000014) Code memory size in pages. */
DECL|CONFIGID|member|__IM uint32_t CONFIGID; /*!< (@ 0x0000005C) Configuration identifier. */
DECL|CONFIG|member|__IOM uint32_t CONFIG; /*!< (@ 0x00000504) ADC configuration register. */
DECL|CONFIG|member|__IOM uint32_t CONFIG; /*!< (@ 0x00000504) Configuration register. */
DECL|CONFIG|member|__IOM uint32_t CONFIG; /*!< (@ 0x00000504) Configuration register. */
DECL|CONFIG|member|__IOM uint32_t CONFIG; /*!< (@ 0x0000050C) Configuration register. */
DECL|CONFIG|member|__IOM uint32_t CONFIG; /*!< (@ 0x00000554) Configuration register. */
DECL|CONFIG|member|__IOM uint32_t CONFIG; /*!< (@ 0x00000554) Configuration register. */
DECL|CONFIG|member|__IOM uint32_t CONFIG; /*!< (@ 0x0000056C) Configuration of parity and hardware flow control
DECL|CONFIG|member|__IOM uint32_t CONFIG[4]; /*!< (@ 0x00000510) Channel configuration registers. */
DECL|COUNTER|member|__IM uint32_t COUNTER; /*!< (@ 0x00000504) Current COUNTER value. */
DECL|CRCCNF|member|__IOM uint32_t CRCCNF; /*!< (@ 0x00000534) CRC configuration. */
DECL|CRCINIT|member|__IOM uint32_t CRCINIT; /*!< (@ 0x0000053C) CRC initial value. */
DECL|CRCPOLY|member|__IOM uint32_t CRCPOLY; /*!< (@ 0x00000538) CRC polynomial. */
DECL|CRCSTATUS|member|__IM uint32_t CRCSTATUS; /*!< (@ 0x00000400) CRC status of received packet. */
DECL|CRV|member|__IOM uint32_t CRV; /*!< (@ 0x00000504) Counter reload value in number of 32kiHz clock
DECL|CTIV|member|__IOM uint32_t CTIV; /*!< (@ 0x00000538) Calibration timer interval. */
DECL|CUSTOMER|member|__IOM uint32_t CUSTOMER[32]; /*!< (@ 0x00000080) Reserved for customer. */
DECL|DAB|member|__IOM uint32_t DAB[8]; /*!< (@ 0x00000600) Device address base segment. */
DECL|DACNF|member|__IOM uint32_t DACNF; /*!< (@ 0x00000640) Device address match configuration. */
DECL|DAI|member|__IM uint32_t DAI; /*!< (@ 0x00000410) Device address match index. */
DECL|DAP|member|__IOM uint32_t DAP[8]; /*!< (@ 0x00000620) Device address prefix. */
DECL|DATAWHITEIV|member|__IOM uint32_t DATAWHITEIV; /*!< (@ 0x00000554) Data whitening initial value. */
DECL|DBFEN|member|__IOM uint32_t DBFEN; /*!< (@ 0x00000528) Enable debouncer input filters. */
DECL|DCDCEN|member|__IOM uint32_t DCDCEN; /*!< (@ 0x00000578) DCDC converter enable configuration register. */
DECL|DCDCFORCE|member|__IOM uint32_t DCDCFORCE; /*!< (@ 0x00000A08) DCDC power-up force register. */
DECL|DEF|member|__IOM uint32_t DEF; /*!< (@ 0x0000055C) Default character. */
DECL|DEVICEADDRTYPE|member|__IM uint32_t DEVICEADDRTYPE; /*!< (@ 0x000000A0) Device address type. */
DECL|DEVICEADDR|member|__IM uint32_t DEVICEADDR[2]; /*!< (@ 0x000000A4) Device address. */
DECL|DEVICEID|member|__IM uint32_t DEVICEID[2]; /*!< (@ 0x00000060) Device identifier. */
DECL|DIRCLR|member|__IOM uint32_t DIRCLR; /*!< (@ 0x0000051C) DIR clear register. */
DECL|DIRSET|member|__IOM uint32_t DIRSET; /*!< (@ 0x00000518) DIR set register. */
DECL|DIR|member|__IOM uint32_t DIR; /*!< (@ 0x00000514) Direction of GPIO pins. */
DECL|DISABLEINDEBUG|member|__IOM uint32_t DISABLEINDEBUG; /*!< (@ 0x00000608) Disable erase and write protection mechanism
DECL|DIS|member|__OM uint32_t DIS; /*!< (@ 0x00000004) Disable channel group. */
DECL|ECBDATAPTR|member|__IOM uint32_t ECBDATAPTR; /*!< (@ 0x00000504) ECB block encrypt memory pointer. */
DECL|ECB_IRQn|enumerator|ECB_IRQn = 14, /*!< 14 ECB */
DECL|EEP|member|__IOM uint32_t EEP; /*!< (@ 0x00000000) Channel event end-point. */
DECL|ENABLE|member|__IOM uint32_t ENABLE; /*!< (@ 0x00000500) ADC enable. */
DECL|ENABLE|member|__IOM uint32_t ENABLE; /*!< (@ 0x00000500) CCM enable. */
DECL|ENABLE|member|__IOM uint32_t ENABLE; /*!< (@ 0x00000500) Enable AAR. */
DECL|ENABLE|member|__IOM uint32_t ENABLE; /*!< (@ 0x00000500) Enable SPI. */
DECL|ENABLE|member|__IOM uint32_t ENABLE; /*!< (@ 0x00000500) Enable SPIS. */
DECL|ENABLE|member|__IOM uint32_t ENABLE; /*!< (@ 0x00000500) Enable UART and acquire IOs. */
DECL|ENABLE|member|__IOM uint32_t ENABLE; /*!< (@ 0x00000500) Enable the LPCOMP. */
DECL|ENABLE|member|__IOM uint32_t ENABLE; /*!< (@ 0x00000500) Enable the QDEC. */
DECL|ENABLE|member|__IOM uint32_t ENABLE; /*!< (@ 0x00000500) Enable two-wire master. */
DECL|EN|member|__OM uint32_t EN; /*!< (@ 0x00000000) Enable channel group. */
DECL|ERASEALL|member|__IOM uint32_t ERASEALL; /*!< (@ 0x0000050C) Register for erasing all non-volatile user memory. */
DECL|ERASEPAGE|member|__IOM uint32_t ERASEPAGE; /*!< (@ 0x00000508) Register for erasing a non-protected non-volatile
DECL|ERASEPCR0|member|__IOM uint32_t ERASEPCR0; /*!< (@ 0x00000510) Register for erasing a protected non-volatile
DECL|ERASEPCR1|member|__IOM uint32_t ERASEPCR1; /*!< (@ 0x00000508) Register for erasing a non-protected non-volatile
DECL|ERASEUICR|member|__IOM uint32_t ERASEUICR; /*!< (@ 0x00000514) Register for start erasing User Information Congfiguration
DECL|ERRORSRC|member|__IOM uint32_t ERRORSRC; /*!< (@ 0x00000480) Error source. Write error field to 1 to clear
DECL|ERRORSRC|member|__IOM uint32_t ERRORSRC; /*!< (@ 0x000004C4) Two-wire error source. Write error field to 1
DECL|ER|member|__IM uint32_t ER[4]; /*!< (@ 0x00000080) Encryption root. */
DECL|EVENTS_ACCOF|member|__IOM uint32_t EVENTS_ACCOF; /*!< (@ 0x00000108) ACC or ACCDBL register overflow. */
DECL|EVENTS_ACQUIRED|member|__IOM uint32_t EVENTS_ACQUIRED; /*!< (@ 0x00000128) Semaphore acquired. */
DECL|EVENTS_ADDRESS|member|__IOM uint32_t EVENTS_ADDRESS; /*!< (@ 0x00000104) Address event. */
DECL|EVENTS_BB|member|__IOM uint32_t EVENTS_BB; /*!< (@ 0x00000138) Two-wire byte boundary. */
DECL|EVENTS_BCMATCH|member|__IOM uint32_t EVENTS_BCMATCH; /*!< (@ 0x00000128) Bit counter reached bit count value specified
DECL|EVENTS_COMPARE|member|__IOM uint32_t EVENTS_COMPARE[4]; /*!< (@ 0x00000140) Compare event on CC[n] match. */
DECL|EVENTS_COMPARE|member|__IOM uint32_t EVENTS_COMPARE[4]; /*!< (@ 0x00000140) Compare event on CC[n] match. */
DECL|EVENTS_CROSS|member|__IOM uint32_t EVENTS_CROSS; /*!< (@ 0x0000010C) Input voltage crossed the threshold in any direction. */
DECL|EVENTS_CTS|member|__IOM uint32_t EVENTS_CTS; /*!< (@ 0x00000100) CTS activated. */
DECL|EVENTS_CTTO|member|__IOM uint32_t EVENTS_CTTO; /*!< (@ 0x00000110) Calibration timer timeout. */
DECL|EVENTS_DATARDY|member|__IOM uint32_t EVENTS_DATARDY; /*!< (@ 0x00000100) Temperature measurement complete, data ready
DECL|EVENTS_DEVMATCH|member|__IOM uint32_t EVENTS_DEVMATCH; /*!< (@ 0x00000114) A device address match occurred on the last received
DECL|EVENTS_DEVMISS|member|__IOM uint32_t EVENTS_DEVMISS; /*!< (@ 0x00000118) No device address match occurred on the last
DECL|EVENTS_DISABLED|member|__IOM uint32_t EVENTS_DISABLED; /*!< (@ 0x00000110) Disable event. */
DECL|EVENTS_DONE|member|__IOM uint32_t EVENTS_DONE; /*!< (@ 0x0000010C) Calibration of LFCLK RC oscillator completed. */
DECL|EVENTS_DOWN|member|__IOM uint32_t EVENTS_DOWN; /*!< (@ 0x00000104) Input voltage crossed the threshold going down. */
DECL|EVENTS_ENDCRYPT|member|__IOM uint32_t EVENTS_ENDCRYPT; /*!< (@ 0x00000104) Encrypt/decrypt completed. */
DECL|EVENTS_ENDECB|member|__IOM uint32_t EVENTS_ENDECB; /*!< (@ 0x00000100) ECB block encrypt complete. */
DECL|EVENTS_ENDKSGEN|member|__IOM uint32_t EVENTS_ENDKSGEN; /*!< (@ 0x00000100) Keystream generation completed. */
DECL|EVENTS_ENDRX|member|__IOM uint32_t EVENTS_ENDRX; /*!< (@ 0x00000110) End of RXD buffer reached */
DECL|EVENTS_END|member|__IOM uint32_t EVENTS_END; /*!< (@ 0x00000100) ADC conversion complete. */
DECL|EVENTS_END|member|__IOM uint32_t EVENTS_END; /*!< (@ 0x00000100) Address resolution procedure completed. */
DECL|EVENTS_END|member|__IOM uint32_t EVENTS_END; /*!< (@ 0x00000104) Granted transaction completed. */
DECL|EVENTS_END|member|__IOM uint32_t EVENTS_END; /*!< (@ 0x0000010C) End event. */
DECL|EVENTS_ERRORECB|member|__IOM uint32_t EVENTS_ERRORECB; /*!< (@ 0x00000104) ECB block encrypt aborted due to a STOPECB task
DECL|EVENTS_ERROR|member|__IOM uint32_t EVENTS_ERROR; /*!< (@ 0x00000108) Error happened. */
DECL|EVENTS_ERROR|member|__IOM uint32_t EVENTS_ERROR; /*!< (@ 0x00000124) Error detected. */
DECL|EVENTS_ERROR|member|__IOM uint32_t EVENTS_ERROR; /*!< (@ 0x00000124) Two-wire error detected. */
DECL|EVENTS_HFCLKSTARTED|member|__IOM uint32_t EVENTS_HFCLKSTARTED; /*!< (@ 0x00000100) HFCLK oscillator started. */
DECL|EVENTS_IN|member|__IOM uint32_t EVENTS_IN[4]; /*!< (@ 0x00000100) Tasks asssociated with GPIOTE channels. */
DECL|EVENTS_LFCLKSTARTED|member|__IOM uint32_t EVENTS_LFCLKSTARTED; /*!< (@ 0x00000104) LFCLK oscillator started. */
DECL|EVENTS_NCTS|member|__IOM uint32_t EVENTS_NCTS; /*!< (@ 0x00000104) CTS deactivated. */
DECL|EVENTS_NOTRESOLVED|member|__IOM uint32_t EVENTS_NOTRESOLVED; /*!< (@ 0x00000108) Address not resolved. */
DECL|EVENTS_OVRFLW|member|__IOM uint32_t EVENTS_OVRFLW; /*!< (@ 0x00000104) Event on COUNTER overflow. */
DECL|EVENTS_PAYLOAD|member|__IOM uint32_t EVENTS_PAYLOAD; /*!< (@ 0x00000108) Payload event. */
DECL|EVENTS_POFWARN|member|__IOM uint32_t EVENTS_POFWARN; /*!< (@ 0x00000108) Power failure warning. */
DECL|EVENTS_PORT|member|__IOM uint32_t EVENTS_PORT; /*!< (@ 0x0000017C) Event generated from multiple pins. */
DECL|EVENTS_READY|member|__IOM uint32_t EVENTS_READY; /*!< (@ 0x00000100) LPCOMP is ready and output is valid. */
DECL|EVENTS_READY|member|__IOM uint32_t EVENTS_READY; /*!< (@ 0x00000100) Ready event. */
DECL|EVENTS_READY|member|__IOM uint32_t EVENTS_READY; /*!< (@ 0x00000108) TXD byte sent and RXD byte received. */
DECL|EVENTS_REPORTRDY|member|__IOM uint32_t EVENTS_REPORTRDY; /*!< (@ 0x00000104) REPORTPER number of samples accumulated in ACC
DECL|EVENTS_RESOLVED|member|__IOM uint32_t EVENTS_RESOLVED; /*!< (@ 0x00000104) Address resolved. */
DECL|EVENTS_RSSIEND|member|__IOM uint32_t EVENTS_RSSIEND; /*!< (@ 0x0000011C) Sampling of the receive signal strength complete.
DECL|EVENTS_RXDRDY|member|__IOM uint32_t EVENTS_RXDRDY; /*!< (@ 0x00000108) Data received in RXD. */
DECL|EVENTS_RXDREADY|member|__IOM uint32_t EVENTS_RXDREADY; /*!< (@ 0x00000108) Two-wire ready to deliver new RXD byte received. */
DECL|EVENTS_RXTO|member|__IOM uint32_t EVENTS_RXTO; /*!< (@ 0x00000144) Receiver timeout. */
DECL|EVENTS_SAMPLERDY|member|__IOM uint32_t EVENTS_SAMPLERDY; /*!< (@ 0x00000100) A new sample is written to the sample register. */
DECL|EVENTS_STOPPED|member|__IOM uint32_t EVENTS_STOPPED; /*!< (@ 0x00000104) Two-wire stopped. */
DECL|EVENTS_SUSPENDED|member|__IOM uint32_t EVENTS_SUSPENDED; /*!< (@ 0x00000148) Two-wire suspended. */
DECL|EVENTS_TICK|member|__IOM uint32_t EVENTS_TICK; /*!< (@ 0x00000100) Event on COUNTER increment. */
DECL|EVENTS_TIMEOUT|member|__IOM uint32_t EVENTS_TIMEOUT; /*!< (@ 0x00000100) Watchdog timeout. */
DECL|EVENTS_TXDRDY|member|__IOM uint32_t EVENTS_TXDRDY; /*!< (@ 0x0000011C) Data sent from TXD. */
DECL|EVENTS_TXDSENT|member|__IOM uint32_t EVENTS_TXDSENT; /*!< (@ 0x0000011C) Two-wire finished sending last TXD byte. */
DECL|EVENTS_UP|member|__IOM uint32_t EVENTS_UP; /*!< (@ 0x00000108) Input voltage crossed the threshold going up. */
DECL|EVENTS_VALRDY|member|__IOM uint32_t EVENTS_VALRDY; /*!< (@ 0x00000100) New random number generated and written to VALUE
DECL|EVTENCLR|member|__IOM uint32_t EVTENCLR; /*!< (@ 0x00000348) Disable events routing to PPI. The reading of
DECL|EVTENSET|member|__IOM uint32_t EVTENSET; /*!< (@ 0x00000344) Enable events routing to PPI. The reading of
DECL|EVTEN|member|__IOM uint32_t EVTEN; /*!< (@ 0x00000340) Configures event enable routing to PPI for each
DECL|EXTREFSEL|member|__IOM uint32_t EXTREFSEL; /*!< (@ 0x0000050C) External reference select. */
DECL|FREQUENCY|member|__IOM uint32_t FREQUENCY; /*!< (@ 0x00000508) Frequency. */
DECL|FREQUENCY|member|__IOM uint32_t FREQUENCY; /*!< (@ 0x00000524) SPI frequency */
DECL|FREQUENCY|member|__IOM uint32_t FREQUENCY; /*!< (@ 0x00000524) Two-wire frequency. */
DECL|FWID|member|__IM uint32_t FWID; /*!< (@ 0x00000010) Firmware ID. */
DECL|GPIOTE_IRQn|enumerator|GPIOTE_IRQn = 6, /*!< 6 GPIOTE */
DECL|GPREGRET|member|__IOM uint32_t GPREGRET; /*!< (@ 0x0000051C) General purpose retention register. This register
DECL|HFCLKRUN|member|__IM uint32_t HFCLKRUN; /*!< (@ 0x00000408) Task HFCLKSTART trigger status. */
DECL|HFCLKSTAT|member|__IM uint32_t HFCLKSTAT; /*!< (@ 0x0000040C) High frequency clock status. */
DECL|HardFault_IRQn|enumerator|HardFault_IRQn = -13, /*!< -13 Hard Fault, all classes of Fault */
DECL|INPTR|member|__IOM uint32_t INPTR; /*!< (@ 0x0000050C) Pointer to the input packet. */
DECL|INTENCLR|member|__IOM uint32_t INTENCLR; /*!< (@ 0x00000308) Interrupt enable clear register */
DECL|INTENCLR|member|__IOM uint32_t INTENCLR; /*!< (@ 0x00000308) Interrupt enable clear register. */
DECL|INTENCLR|member|__IOM uint32_t INTENCLR; /*!< (@ 0x00000308) Interrupt enable clear register. */
DECL|INTENCLR|member|__IOM uint32_t INTENCLR; /*!< (@ 0x00000308) Interrupt enable clear register. */
DECL|INTENCLR|member|__IOM uint32_t INTENCLR; /*!< (@ 0x00000308) Interrupt enable clear register. */
DECL|INTENCLR|member|__IOM uint32_t INTENCLR; /*!< (@ 0x00000308) Interrupt enable clear register. */
DECL|INTENCLR|member|__IOM uint32_t INTENCLR; /*!< (@ 0x00000308) Interrupt enable clear register. */
DECL|INTENCLR|member|__IOM uint32_t INTENCLR; /*!< (@ 0x00000308) Interrupt enable clear register. */
DECL|INTENCLR|member|__IOM uint32_t INTENCLR; /*!< (@ 0x00000308) Interrupt enable clear register. */
DECL|INTENCLR|member|__IOM uint32_t INTENCLR; /*!< (@ 0x00000308) Interrupt enable clear register. */
DECL|INTENCLR|member|__IOM uint32_t INTENCLR; /*!< (@ 0x00000308) Interrupt enable clear register. */
DECL|INTENCLR|member|__IOM uint32_t INTENCLR; /*!< (@ 0x00000308) Interrupt enable clear register. */
DECL|INTENCLR|member|__IOM uint32_t INTENCLR; /*!< (@ 0x00000308) Interrupt enable clear register. */
DECL|INTENCLR|member|__IOM uint32_t INTENCLR; /*!< (@ 0x00000308) Interrupt enable clear register. */
DECL|INTENCLR|member|__IOM uint32_t INTENCLR; /*!< (@ 0x00000308) Interrupt enable clear register. */
DECL|INTENCLR|member|__IOM uint32_t INTENCLR; /*!< (@ 0x00000308) Interrupt enable clear register. */
DECL|INTENCLR|member|__IOM uint32_t INTENCLR; /*!< (@ 0x00000308) Interrupt enable clear register. */
DECL|INTENCLR|member|__IOM uint32_t INTENCLR; /*!< (@ 0x00000308) Interrupt enable clear register. */
DECL|INTENCLR|member|__IOM uint32_t INTENCLR; /*!< (@ 0x00000308) Interrupt enable clear register. */
DECL|INTENSET|member|__IOM uint32_t INTENSET; /*!< (@ 0x00000304) Interrupt enable set register */
DECL|INTENSET|member|__IOM uint32_t INTENSET; /*!< (@ 0x00000304) Interrupt enable set register. */
DECL|INTENSET|member|__IOM uint32_t INTENSET; /*!< (@ 0x00000304) Interrupt enable set register. */
DECL|INTENSET|member|__IOM uint32_t INTENSET; /*!< (@ 0x00000304) Interrupt enable set register. */
DECL|INTENSET|member|__IOM uint32_t INTENSET; /*!< (@ 0x00000304) Interrupt enable set register. */
DECL|INTENSET|member|__IOM uint32_t INTENSET; /*!< (@ 0x00000304) Interrupt enable set register. */
DECL|INTENSET|member|__IOM uint32_t INTENSET; /*!< (@ 0x00000304) Interrupt enable set register. */
DECL|INTENSET|member|__IOM uint32_t INTENSET; /*!< (@ 0x00000304) Interrupt enable set register. */
DECL|INTENSET|member|__IOM uint32_t INTENSET; /*!< (@ 0x00000304) Interrupt enable set register. */
DECL|INTENSET|member|__IOM uint32_t INTENSET; /*!< (@ 0x00000304) Interrupt enable set register. */
DECL|INTENSET|member|__IOM uint32_t INTENSET; /*!< (@ 0x00000304) Interrupt enable set register. */
DECL|INTENSET|member|__IOM uint32_t INTENSET; /*!< (@ 0x00000304) Interrupt enable set register. */
DECL|INTENSET|member|__IOM uint32_t INTENSET; /*!< (@ 0x00000304) Interrupt enable set register. */
DECL|INTENSET|member|__IOM uint32_t INTENSET; /*!< (@ 0x00000304) Interrupt enable set register. */
DECL|INTENSET|member|__IOM uint32_t INTENSET; /*!< (@ 0x00000304) Interrupt enable set register. */
DECL|INTENSET|member|__IOM uint32_t INTENSET; /*!< (@ 0x00000304) Interrupt enable set register. */
DECL|INTENSET|member|__IOM uint32_t INTENSET; /*!< (@ 0x00000304) Interrupt enable set register. */
DECL|INTENSET|member|__IOM uint32_t INTENSET; /*!< (@ 0x00000304) Interrupt enable set register. */
DECL|INTENSET|member|__IOM uint32_t INTENSET; /*!< (@ 0x00000304) Interrupt enable set register. */
DECL|IN|member|__IM uint32_t IN; /*!< (@ 0x00000510) Read GPIO port. */
DECL|IRKPTR|member|__IOM uint32_t IRKPTR; /*!< (@ 0x00000508) Pointer to the IRK data structure. */
DECL|IRQn_Type|typedef|} IRQn_Type;
DECL|IR|member|__IM uint32_t IR[4]; /*!< (@ 0x00000090) Identity root. */
DECL|LEDPOL|member|__IOM uint32_t LEDPOL; /*!< (@ 0x00000504) LED output pin polarity. */
DECL|LEDPRE|member|__IOM uint32_t LEDPRE; /*!< (@ 0x00000540) Time LED is switched ON before the sample. */
DECL|LFCLKRUN|member|__IM uint32_t LFCLKRUN; /*!< (@ 0x00000414) Task LFCLKSTART triggered status. */
DECL|LFCLKSRCCOPY|member|__IM uint32_t LFCLKSRCCOPY; /*!< (@ 0x0000041C) Clock source for the LFCLK clock, set when task
DECL|LFCLKSRC|member|__IOM uint32_t LFCLKSRC; /*!< (@ 0x00000518) Clock source for the LFCLK clock. */
DECL|LFCLKSTAT|member|__IM uint32_t LFCLKSTAT; /*!< (@ 0x00000418) Low frequency clock status. */
DECL|LPCOMP_IRQn|enumerator|LPCOMP_IRQn = 19, /*!< 19 LPCOMP */
DECL|MAXRX|member|__IOM uint32_t MAXRX; /*!< (@ 0x00000538) Maximum number of bytes in the receive buffer. */
DECL|MAXTX|member|__IOM uint32_t MAXTX; /*!< (@ 0x00000548) Maximum number of bytes in the transmit buffer. */
DECL|MICSTATUS|member|__IM uint32_t MICSTATUS; /*!< (@ 0x00000400) CCM RX MIC check result. */
DECL|MODE|member|__IOM uint32_t MODE; /*!< (@ 0x00000504) Operation mode. */
DECL|MODE|member|__IOM uint32_t MODE; /*!< (@ 0x00000504) Timer Mode selection. */
DECL|MODE|member|__IOM uint32_t MODE; /*!< (@ 0x00000510) Data rate and modulation. */
DECL|NIRK|member|__IOM uint32_t NIRK; /*!< (@ 0x00000504) Number of Identity root Keys in the IRK data
DECL|NRF51_H|macro|NRF51_H
DECL|NRFFW|member|__IOM uint32_t NRFFW[15]; /*!< (@ 0x00000014) Reserved for Nordic firmware design. */
DECL|NRFHW|member|__IOM uint32_t NRFHW[12]; /*!< (@ 0x00000050) Reserved for Nordic hardware design. */
DECL|NRF_1MBIT|member|__IM uint32_t NRF_1MBIT[5]; /*!< (@ 0x000000B0) Override values for the OVERRIDEn registers in
DECL|NRF_AAR_BASE|macro|NRF_AAR_BASE
DECL|NRF_AAR_Type|typedef|} NRF_AAR_Type; /*!< Size = 4096 (0x1000) */
DECL|NRF_AAR|macro|NRF_AAR
DECL|NRF_ADC_BASE|macro|NRF_ADC_BASE
DECL|NRF_ADC_Type|typedef|} NRF_ADC_Type; /*!< Size = 4096 (0x1000) */
DECL|NRF_ADC|macro|NRF_ADC
DECL|NRF_CCM_BASE|macro|NRF_CCM_BASE
DECL|NRF_CCM_Type|typedef|} NRF_CCM_Type; /*!< Size = 4096 (0x1000) */
DECL|NRF_CCM|macro|NRF_CCM
DECL|NRF_CLOCK_BASE|macro|NRF_CLOCK_BASE
DECL|NRF_CLOCK_Type|typedef|} NRF_CLOCK_Type; /*!< Size = 1364 (0x554) */
DECL|NRF_CLOCK|macro|NRF_CLOCK
DECL|NRF_ECB_BASE|macro|NRF_ECB_BASE
DECL|NRF_ECB_Type|typedef|} NRF_ECB_Type; /*!< Size = 4096 (0x1000) */
DECL|NRF_ECB|macro|NRF_ECB
DECL|NRF_FICR_BASE|macro|NRF_FICR_BASE
DECL|NRF_FICR_Type|typedef|} NRF_FICR_Type; /*!< Size = 256 (0x100) */
DECL|NRF_FICR|macro|NRF_FICR
DECL|NRF_GPIOTE_BASE|macro|NRF_GPIOTE_BASE
DECL|NRF_GPIOTE_Type|typedef|} NRF_GPIOTE_Type; /*!< Size = 4096 (0x1000) */
DECL|NRF_GPIOTE|macro|NRF_GPIOTE
DECL|NRF_GPIO_BASE|macro|NRF_GPIO_BASE
DECL|NRF_GPIO_Type|typedef|} NRF_GPIO_Type; /*!< Size = 1920 (0x780) */
DECL|NRF_GPIO|macro|NRF_GPIO
DECL|NRF_LPCOMP_BASE|macro|NRF_LPCOMP_BASE
DECL|NRF_LPCOMP_Type|typedef|} NRF_LPCOMP_Type; /*!< Size = 4096 (0x1000) */
DECL|NRF_LPCOMP|macro|NRF_LPCOMP
DECL|NRF_MPU_BASE|macro|NRF_MPU_BASE
DECL|NRF_MPU_Type|typedef|} NRF_MPU_Type; /*!< Size = 1552 (0x610) */
DECL|NRF_MPU|macro|NRF_MPU
DECL|NRF_NVMC_BASE|macro|NRF_NVMC_BASE
DECL|NRF_NVMC_Type|typedef|} NRF_NVMC_Type; /*!< Size = 1304 (0x518) */
DECL|NRF_NVMC|macro|NRF_NVMC
DECL|NRF_POWER_BASE|macro|NRF_POWER_BASE
DECL|NRF_POWER_Type|typedef|} NRF_POWER_Type; /*!< Size = 2572 (0xa0c) */
DECL|NRF_POWER|macro|NRF_POWER
DECL|NRF_PPI_BASE|macro|NRF_PPI_BASE
DECL|NRF_PPI_Type|typedef|} NRF_PPI_Type; /*!< Size = 2064 (0x810) */
DECL|NRF_PPI|macro|NRF_PPI
DECL|NRF_QDEC_BASE|macro|NRF_QDEC_BASE
DECL|NRF_QDEC_Type|typedef|} NRF_QDEC_Type; /*!< Size = 4096 (0x1000) */
DECL|NRF_QDEC|macro|NRF_QDEC
DECL|NRF_RADIO_BASE|macro|NRF_RADIO_BASE
DECL|NRF_RADIO_Type|typedef|} NRF_RADIO_Type; /*!< Size = 4096 (0x1000) */
DECL|NRF_RADIO|macro|NRF_RADIO
DECL|NRF_RNG_BASE|macro|NRF_RNG_BASE
DECL|NRF_RNG_Type|typedef|} NRF_RNG_Type; /*!< Size = 4096 (0x1000) */
DECL|NRF_RNG|macro|NRF_RNG
DECL|NRF_RTC0_BASE|macro|NRF_RTC0_BASE
DECL|NRF_RTC0|macro|NRF_RTC0
DECL|NRF_RTC1_BASE|macro|NRF_RTC1_BASE
DECL|NRF_RTC1|macro|NRF_RTC1
DECL|NRF_RTC_Type|typedef|} NRF_RTC_Type; /*!< Size = 4096 (0x1000) */
DECL|NRF_SPI0_BASE|macro|NRF_SPI0_BASE
DECL|NRF_SPI0|macro|NRF_SPI0
DECL|NRF_SPI1_BASE|macro|NRF_SPI1_BASE
DECL|NRF_SPI1|macro|NRF_SPI1
DECL|NRF_SPIS1_BASE|macro|NRF_SPIS1_BASE
DECL|NRF_SPIS1|macro|NRF_SPIS1
DECL|NRF_SPIS_Type|typedef|} NRF_SPIS_Type; /*!< Size = 4096 (0x1000) */
DECL|NRF_SPI_Type|typedef|} NRF_SPI_Type; /*!< Size = 4096 (0x1000) */
DECL|NRF_SWI_BASE|macro|NRF_SWI_BASE
DECL|NRF_SWI_Type|typedef|} NRF_SWI_Type; /*!< Size = 4 (0x4) */
DECL|NRF_SWI|macro|NRF_SWI
DECL|NRF_TEMP_BASE|macro|NRF_TEMP_BASE
DECL|NRF_TEMP_Type|typedef|} NRF_TEMP_Type; /*!< Size = 4096 (0x1000) */
DECL|NRF_TEMP|macro|NRF_TEMP
DECL|NRF_TIMER0_BASE|macro|NRF_TIMER0_BASE
DECL|NRF_TIMER0|macro|NRF_TIMER0
DECL|NRF_TIMER1_BASE|macro|NRF_TIMER1_BASE
DECL|NRF_TIMER1|macro|NRF_TIMER1
DECL|NRF_TIMER2_BASE|macro|NRF_TIMER2_BASE
DECL|NRF_TIMER2|macro|NRF_TIMER2
DECL|NRF_TIMER_Type|typedef|} NRF_TIMER_Type; /*!< Size = 4096 (0x1000) */
DECL|NRF_TWI0_BASE|macro|NRF_TWI0_BASE
DECL|NRF_TWI0|macro|NRF_TWI0
DECL|NRF_TWI1_BASE|macro|NRF_TWI1_BASE
DECL|NRF_TWI1|macro|NRF_TWI1
DECL|NRF_TWI_Type|typedef|} NRF_TWI_Type; /*!< Size = 4096 (0x1000) */
DECL|NRF_UART0_BASE|macro|NRF_UART0_BASE
DECL|NRF_UART0|macro|NRF_UART0
DECL|NRF_UART_Type|typedef|} NRF_UART_Type; /*!< Size = 4096 (0x1000) */
DECL|NRF_UICR_BASE|macro|NRF_UICR_BASE
DECL|NRF_UICR_Type|typedef|} NRF_UICR_Type; /*!< Size = 256 (0x100) */
DECL|NRF_UICR|macro|NRF_UICR
DECL|NRF_WDT_BASE|macro|NRF_WDT_BASE
DECL|NRF_WDT_Type|typedef|} NRF_WDT_Type; /*!< Size = 4096 (0x1000) */
DECL|NRF_WDT|macro|NRF_WDT
DECL|NUMRAMBLOCK|member|__IM uint32_t NUMRAMBLOCK; /*!< (@ 0x00000034) Number of individualy controllable RAM blocks. */
DECL|NonMaskableInt_IRQn|enumerator|NonMaskableInt_IRQn = -14, /*!< -14 Non maskable Interrupt, cannot be stopped or preempted */
DECL|ORC|member|__IOM uint32_t ORC; /*!< (@ 0x000005C0) Over-read character. */
DECL|OUTCLR|member|__IOM uint32_t OUTCLR; /*!< (@ 0x0000050C) Clear individual bits in GPIO port. */
DECL|OUTPTR|member|__IOM uint32_t OUTPTR; /*!< (@ 0x00000510) Pointer to the output packet. */
DECL|OUTSET|member|__IOM uint32_t OUTSET; /*!< (@ 0x00000508) Set individual bits in GPIO port. */
DECL|OUT|member|__IOM uint32_t OUT; /*!< (@ 0x00000504) Write GPIO port. */
DECL|OVERRIDE0|member|__IOM uint32_t OVERRIDE0; /*!< (@ 0x00000724) Trim value override register 0. */
DECL|OVERRIDE1|member|__IOM uint32_t OVERRIDE1; /*!< (@ 0x00000728) Trim value override register 1. */
DECL|OVERRIDE2|member|__IOM uint32_t OVERRIDE2; /*!< (@ 0x0000072C) Trim value override register 2. */
DECL|OVERRIDE3|member|__IOM uint32_t OVERRIDE3; /*!< (@ 0x00000730) Trim value override register 3. */
DECL|OVERRIDE4|member|__IOM uint32_t OVERRIDE4; /*!< (@ 0x00000734) Trim value override register 4. */
DECL|OVERRIDEEN|member|__IM uint32_t OVERRIDEEN; /*!< (@ 0x000000AC) Radio calibration override enable. */
DECL|PACKETPTR|member|__IOM uint32_t PACKETPTR; /*!< (@ 0x00000504) Packet pointer. Decision point: START task. */
DECL|PCNF0|member|__IOM uint32_t PCNF0; /*!< (@ 0x00000514) Packet configuration 0. */
DECL|PCNF1|member|__IOM uint32_t PCNF1; /*!< (@ 0x00000518) Packet configuration 1. */
DECL|PERR0|member|__IOM uint32_t PERR0; /*!< (@ 0x00000528) Configuration of peripherals in mpu regions. */
DECL|PIN_CNF|member|__IOM uint32_t PIN_CNF[32]; /*!< (@ 0x00000700) Configuration of GPIO pins. */
DECL|POFCON|member|__IOM uint32_t POFCON; /*!< (@ 0x00000510) Power failure configuration. */
DECL|POWER_CLOCK_IRQn|enumerator|POWER_CLOCK_IRQn = 0, /*!< 0 POWER_CLOCK */
DECL|POWER|member|__IOM uint32_t POWER; /*!< (@ 0x00000FFC) Peripheral power control. */
DECL|POWER|member|__IOM uint32_t POWER; /*!< (@ 0x00000FFC) Peripheral power control. */
DECL|POWER|member|__IOM uint32_t POWER; /*!< (@ 0x00000FFC) Peripheral power control. */
DECL|POWER|member|__IOM uint32_t POWER; /*!< (@ 0x00000FFC) Peripheral power control. */
DECL|POWER|member|__IOM uint32_t POWER; /*!< (@ 0x00000FFC) Peripheral power control. */
DECL|POWER|member|__IOM uint32_t POWER; /*!< (@ 0x00000FFC) Peripheral power control. */
DECL|POWER|member|__IOM uint32_t POWER; /*!< (@ 0x00000FFC) Peripheral power control. */
DECL|POWER|member|__IOM uint32_t POWER; /*!< (@ 0x00000FFC) Peripheral power control. */
DECL|POWER|member|__IOM uint32_t POWER; /*!< (@ 0x00000FFC) Peripheral power control. */
DECL|POWER|member|__IOM uint32_t POWER; /*!< (@ 0x00000FFC) Peripheral power control. */
DECL|POWER|member|__IOM uint32_t POWER; /*!< (@ 0x00000FFC) Peripheral power control. */
DECL|POWER|member|__IOM uint32_t POWER; /*!< (@ 0x00000FFC) Peripheral power control. */
DECL|POWER|member|__IOM uint32_t POWER; /*!< (@ 0x00000FFC) Peripheral power control. */
DECL|POWER|member|__IOM uint32_t POWER; /*!< (@ 0x00000FFC) Peripheral power control. */
DECL|POWER|member|__IOM uint32_t POWER; /*!< (@ 0x00000FFC) Peripheral power control. */
DECL|POWER|member|__IOM uint32_t POWER; /*!< (@ 0x00000FFC) Peripheral power control. */
DECL|POWER|member|__IOM uint32_t POWER; /*!< (@ 0x00000FFC) Peripheral power control. */
DECL|PPFC|member|__IM uint32_t PPFC; /*!< (@ 0x0000002C) Pre-programmed factory code present. */
DECL|PPI_CH_Type|typedef|} PPI_CH_Type; /*!< Size = 8 (0x8) */
DECL|PPI_TASKS_CHG_Type|typedef|} PPI_TASKS_CHG_Type; /*!< Size = 8 (0x8) */
DECL|PREFIX0|member|__IOM uint32_t PREFIX0; /*!< (@ 0x00000524) Prefixes bytes for logical addresses 0 to 3. */
DECL|PREFIX1|member|__IOM uint32_t PREFIX1; /*!< (@ 0x00000528) Prefixes bytes for logical addresses 4 to 7. */
DECL|PRESCALER|member|__IOM uint32_t PRESCALER; /*!< (@ 0x00000508) 12-bit prescaler for COUNTER frequency (32768/(PRESCALER+1)).
DECL|PRESCALER|member|__IOM uint32_t PRESCALER; /*!< (@ 0x00000510) 4-bit prescaler to source clock frequency (max
DECL|PROTBLOCKSIZE|member|__IOM uint32_t PROTBLOCKSIZE; /*!< (@ 0x0000060C) Erase and write protection block size. */
DECL|PROTENSET0|member|__IOM uint32_t PROTENSET0; /*!< (@ 0x00000600) Erase and write protection bit enable set register. */
DECL|PROTENSET1|member|__IOM uint32_t PROTENSET1; /*!< (@ 0x00000604) Erase and write protection bit enable set register. */
DECL|PSELA|member|__IOM uint32_t PSELA; /*!< (@ 0x00000520) Pin select for phase A input. */
DECL|PSELB|member|__IOM uint32_t PSELB; /*!< (@ 0x00000524) Pin select for phase B input. */
DECL|PSELCSN|member|__IOM uint32_t PSELCSN; /*!< (@ 0x00000514) Pin select for CSN. */
DECL|PSELCTS|member|__IOM uint32_t PSELCTS; /*!< (@ 0x00000510) Pin select for CTS. */
DECL|PSELLED|member|__IOM uint32_t PSELLED; /*!< (@ 0x0000051C) Pin select for LED output. */
DECL|PSELMISO|member|__IOM uint32_t PSELMISO; /*!< (@ 0x0000050C) Pin select for MISO. */
DECL|PSELMISO|member|__IOM uint32_t PSELMISO; /*!< (@ 0x00000510) Pin select for MISO. */
DECL|PSELMOSI|member|__IOM uint32_t PSELMOSI; /*!< (@ 0x0000050C) Pin select for MOSI. */
DECL|PSELMOSI|member|__IOM uint32_t PSELMOSI; /*!< (@ 0x00000510) Pin select for MOSI. */
DECL|PSELRTS|member|__IOM uint32_t PSELRTS; /*!< (@ 0x00000508) Pin select for RTS. */
DECL|PSELRXD|member|__IOM uint32_t PSELRXD; /*!< (@ 0x00000514) Pin select for RXD. */
DECL|PSELSCK|member|__IOM uint32_t PSELSCK; /*!< (@ 0x00000508) Pin select for SCK. */
DECL|PSELSCK|member|__IOM uint32_t PSELSCK; /*!< (@ 0x00000508) Pin select for SCK. */
DECL|PSELSCL|member|__IOM uint32_t PSELSCL; /*!< (@ 0x00000508) Pin select for SCL. */
DECL|PSELSDA|member|__IOM uint32_t PSELSDA; /*!< (@ 0x0000050C) Pin select for SDA. */
DECL|PSELTXD|member|__IOM uint32_t PSELTXD; /*!< (@ 0x0000050C) Pin select for TXD. */
DECL|PSEL|member|__IOM uint32_t PSEL; /*!< (@ 0x00000504) Input pin select. */
DECL|PendSV_IRQn|enumerator|PendSV_IRQn = -2, /*!< -2 Pendable request for system service */
DECL|QDEC_IRQn|enumerator|QDEC_IRQn = 18, /*!< 18 QDEC */
DECL|RADIO_IRQn|enumerator|RADIO_IRQn = 1, /*!< 1 RADIO */
DECL|RAMONB|member|__IOM uint32_t RAMONB; /*!< (@ 0x00000554) Ram on/off. */
DECL|RAMON|member|__IOM uint32_t RAMON; /*!< (@ 0x00000524) Ram on/off. */
DECL|RAMSTATUS|member|__IM uint32_t RAMSTATUS; /*!< (@ 0x00000428) Ram status register. */
DECL|RBPCONF|member|__IOM uint32_t RBPCONF; /*!< (@ 0x00000004) Readback protection configuration. */
DECL|READY|member|__IM uint32_t READY; /*!< (@ 0x00000400) Ready flag. */
DECL|REFSEL|member|__IOM uint32_t REFSEL; /*!< (@ 0x00000508) Reference select. */
DECL|REPORTPER|member|__IOM uint32_t REPORTPER; /*!< (@ 0x00000510) Number of samples to generate an EVENT_REPORTRDY. */
DECL|REQSTATUS|member|__IM uint32_t REQSTATUS; /*!< (@ 0x00000404) Request status. */
DECL|RESERVED10|member|__IM uint32_t RESERVED10;
DECL|RESERVED10|member|__IM uint32_t RESERVED10[110];
DECL|RESERVED10|member|__IM uint32_t RESERVED10[3];
DECL|RESERVED10|member|__IM uint32_t RESERVED10[56];
DECL|RESERVED10|member|__IM uint32_t RESERVED10[7];
DECL|RESERVED11|member|__IM uint32_t RESERVED11;
DECL|RESERVED11|member|__IM uint32_t RESERVED11[14];
DECL|RESERVED11|member|__IM uint32_t RESERVED11[17];
DECL|RESERVED11|member|__IM uint32_t RESERVED11[561];
DECL|RESERVED11|member|__IM uint32_t RESERVED11[8];
DECL|RESERVED12|member|__IM uint32_t RESERVED12;
DECL|RESERVED12|member|__IM uint32_t RESERVED12;
DECL|RESERVED12|member|__IM uint32_t RESERVED12[291];
DECL|RESERVED12|member|__IM uint32_t RESERVED12[675];
DECL|RESERVED13|member|__IM uint32_t RESERVED13;
DECL|RESERVED13|member|__IM uint32_t RESERVED13[2];
DECL|RESERVED14|member|__IM uint32_t RESERVED14;
DECL|RESERVED14|member|__IM uint32_t RESERVED14[24];
DECL|RESERVED15|member|__IM uint32_t RESERVED15[24];
DECL|RESERVED15|member|__IM uint32_t RESERVED15[654];
DECL|RESERVED16|member|__IM uint32_t RESERVED16[668];
DECL|RESERVED1|member|__IM uint32_t RESERVED1;
DECL|RESERVED1|member|__IM uint32_t RESERVED1;
DECL|RESERVED1|member|__IM uint32_t RESERVED1[120];
DECL|RESERVED1|member|__IM uint32_t RESERVED1[126];
DECL|RESERVED1|member|__IM uint32_t RESERVED1[127];
DECL|RESERVED1|member|__IM uint32_t RESERVED1[128];
DECL|RESERVED1|member|__IM uint32_t RESERVED1[128];
DECL|RESERVED1|member|__IM uint32_t RESERVED1[128];
DECL|RESERVED1|member|__IM uint32_t RESERVED1[14];
DECL|RESERVED1|member|__IM uint32_t RESERVED1[27];
DECL|RESERVED1|member|__IM uint32_t RESERVED1[2];
DECL|RESERVED1|member|__IM uint32_t RESERVED1[2];
DECL|RESERVED1|member|__IM uint32_t RESERVED1[34];
DECL|RESERVED1|member|__IM uint32_t RESERVED1[4];
DECL|RESERVED1|member|__IM uint32_t RESERVED1[52];
DECL|RESERVED1|member|__IM uint32_t RESERVED1[54];
DECL|RESERVED1|member|__IM uint32_t RESERVED1[56];
DECL|RESERVED1|member|__IM uint32_t RESERVED1[60];
DECL|RESERVED1|member|__IM uint32_t RESERVED1[60];
DECL|RESERVED1|member|__IM uint32_t RESERVED1[61];
DECL|RESERVED1|member|__IM uint32_t RESERVED1[61];
DECL|RESERVED1|member|__IM uint32_t RESERVED1[61];
DECL|RESERVED1|member|__IM uint32_t RESERVED1[63];
DECL|RESERVED1|member|__IM uint32_t RESERVED1[64];
DECL|RESERVED2|member|__IM uint32_t RESERVED2;
DECL|RESERVED2|member|__IM uint32_t RESERVED2;
DECL|RESERVED2|member|__IM uint32_t RESERVED2[109];
DECL|RESERVED2|member|__IM uint32_t RESERVED2[124];
DECL|RESERVED2|member|__IM uint32_t RESERVED2[125];
DECL|RESERVED2|member|__IM uint32_t RESERVED2[126];
DECL|RESERVED2|member|__IM uint32_t RESERVED2[126];
DECL|RESERVED2|member|__IM uint32_t RESERVED2[126];
DECL|RESERVED2|member|__IM uint32_t RESERVED2[127];
DECL|RESERVED2|member|__IM uint32_t RESERVED2[156];
DECL|RESERVED2|member|__IM uint32_t RESERVED2[2];
DECL|RESERVED2|member|__IM uint32_t RESERVED2[44];
DECL|RESERVED2|member|__IM uint32_t RESERVED2[4];
DECL|RESERVED2|member|__IM uint32_t RESERVED2[53];
DECL|RESERVED2|member|__IM uint32_t RESERVED2[61];
DECL|RESERVED2|member|__IM uint32_t RESERVED2[61];
DECL|RESERVED2|member|__IM uint32_t RESERVED2[64];
DECL|RESERVED2|member|__IM uint32_t RESERVED2[64];
DECL|RESERVED2|member|__IM uint32_t RESERVED2[64];
DECL|RESERVED2|member|__IM uint32_t RESERVED2[64];
DECL|RESERVED2|member|__IM uint32_t RESERVED2[97];
DECL|RESERVED3|member|__IM uint32_t RESERVED3;
DECL|RESERVED3|member|__IM uint32_t RESERVED3;
DECL|RESERVED3|member|__IM uint32_t RESERVED3[125];
DECL|RESERVED3|member|__IM uint32_t RESERVED3[126];
DECL|RESERVED3|member|__IM uint32_t RESERVED3[129];
DECL|RESERVED3|member|__IM uint32_t RESERVED3[13];
DECL|RESERVED3|member|__IM uint32_t RESERVED3[56];
DECL|RESERVED3|member|__IM uint32_t RESERVED3[5];
DECL|RESERVED3|member|__IM uint32_t RESERVED3[5];
DECL|RESERVED3|member|__IM uint32_t RESERVED3[61];
DECL|RESERVED3|member|__IM uint32_t RESERVED3[61];
DECL|RESERVED3|member|__IM uint32_t RESERVED3[61];
DECL|RESERVED3|member|__IM uint32_t RESERVED3[61];
DECL|RESERVED3|member|__IM uint32_t RESERVED3[63];
DECL|RESERVED3|member|__IM uint32_t RESERVED3[63];
DECL|RESERVED3|member|__IM uint32_t RESERVED3[63];
DECL|RESERVED3|member|__IM uint32_t RESERVED3[64];
DECL|RESERVED3|member|__IM uint32_t RESERVED3[64];
DECL|RESERVED3|member|__IM uint32_t RESERVED3[700];
DECL|RESERVED3|member|__IM uint32_t RESERVED3[701];
DECL|RESERVED4|member|__IM uint32_t RESERVED4;
DECL|RESERVED4|member|__IM uint32_t RESERVED4;
DECL|RESERVED4|member|__IM uint32_t RESERVED4[110];
DECL|RESERVED4|member|__IM uint32_t RESERVED4[126];
DECL|RESERVED4|member|__IM uint32_t RESERVED4[4];
DECL|RESERVED4|member|__IM uint32_t RESERVED4[53];
DECL|RESERVED4|member|__IM uint32_t RESERVED4[5];
DECL|RESERVED4|member|__IM uint32_t RESERVED4[60];
DECL|RESERVED4|member|__IM uint32_t RESERVED4[61];
DECL|RESERVED4|member|__IM uint32_t RESERVED4[63];
DECL|RESERVED4|member|__IM uint32_t RESERVED4[63];
DECL|RESERVED4|member|__IM uint32_t RESERVED4[63];
DECL|RESERVED4|member|__IM uint32_t RESERVED4[695];
DECL|RESERVED4|member|__IM uint32_t RESERVED4[6];
DECL|RESERVED4|member|__IM uint32_t RESERVED4[700];
DECL|RESERVED4|member|__IM uint32_t RESERVED4[700];
DECL|RESERVED4|member|__IM uint32_t RESERVED4[7];
DECL|RESERVED4|member|__IM uint32_t RESERVED4[9];
DECL|RESERVED5|member|__IM uint32_t RESERVED5;
DECL|RESERVED5|member|__IM uint32_t RESERVED5;
DECL|RESERVED5|member|__IM uint32_t RESERVED5;
DECL|RESERVED5|member|__IM uint32_t RESERVED5;
DECL|RESERVED5|member|__IM uint32_t RESERVED5;
DECL|RESERVED5|member|__IM uint32_t RESERVED5[10];
DECL|RESERVED5|member|__IM uint32_t RESERVED5[13];
DECL|RESERVED5|member|__IM uint32_t RESERVED5[46];
DECL|RESERVED5|member|__IM uint32_t RESERVED5[4];
DECL|RESERVED5|member|__IM uint32_t RESERVED5[53];
DECL|RESERVED5|member|__IM uint32_t RESERVED5[62];
DECL|RESERVED5|member|__IM uint32_t RESERVED5[631];
DECL|RESERVED5|member|__IM uint32_t RESERVED5[64];
DECL|RESERVED5|member|__IM uint32_t RESERVED5[684];
DECL|RESERVED5|member|__IM uint32_t RESERVED5[697];
DECL|RESERVED6|member|__IM uint32_t RESERVED6[11];
DECL|RESERVED6|member|__IM uint32_t RESERVED6[11];
DECL|RESERVED6|member|__IM uint32_t RESERVED6[3];
DECL|RESERVED6|member|__IM uint32_t RESERVED6[4];
DECL|RESERVED6|member|__IM uint32_t RESERVED6[60];
DECL|RESERVED6|member|__IM uint32_t RESERVED6[61];
DECL|RESERVED6|member|__IM uint32_t RESERVED6[64];
DECL|RESERVED6|member|__IM uint32_t RESERVED6[683];
DECL|RESERVED6|member|__IM uint32_t RESERVED6[694];
DECL|RESERVED6|member|__IM uint32_t RESERVED6[697];
DECL|RESERVED6|member|__IM uint32_t RESERVED6[7];
DECL|RESERVED7|member|__IM uint32_t RESERVED7;
DECL|RESERVED7|member|__IM uint32_t RESERVED7[15];
DECL|RESERVED7|member|__IM uint32_t RESERVED7[2];
DECL|RESERVED7|member|__IM uint32_t RESERVED7[3];
DECL|RESERVED7|member|__IM uint32_t RESERVED7[5];
DECL|RESERVED7|member|__IM uint32_t RESERVED7[681];
DECL|RESERVED7|member|__IM uint32_t RESERVED7[683];
DECL|RESERVED7|member|__IM uint32_t RESERVED7[93];
DECL|RESERVED8|member|__IM uint32_t RESERVED8;
DECL|RESERVED8|member|__IM uint32_t RESERVED8[2];
DECL|RESERVED8|member|__IM uint32_t RESERVED8[31];
DECL|RESERVED8|member|__IM uint32_t RESERVED8[45];
DECL|RESERVED8|member|__IM uint32_t RESERVED8[47];
DECL|RESERVED9|member|__IM uint32_t RESERVED9;
DECL|RESERVED9|member|__IM uint32_t RESERVED9;
DECL|RESERVED9|member|__IM uint32_t RESERVED9[39];
DECL|RESERVED9|member|__IM uint32_t RESERVED9[64];
DECL|RESERVED9|member|__IM uint32_t RESERVED9[7];
DECL|RESERVED|member|__IM uint32_t RESERVED;
DECL|RESERVED|member|__IM uint32_t RESERVED;
DECL|RESERVED|member|__IM uint32_t RESERVED;
DECL|RESERVED|member|__IM uint32_t RESERVED[11];
DECL|RESERVED|member|__IM uint32_t RESERVED[256];
DECL|RESERVED|member|__IM uint32_t RESERVED[30];
DECL|RESERVED|member|__IM uint32_t RESERVED[312];
DECL|RESERVED|member|__IM uint32_t RESERVED[321];
DECL|RESERVED|member|__IM uint32_t RESERVED[330];
DECL|RESERVED|member|__IM uint32_t RESERVED[3];
DECL|RESERVED|member|__IM uint32_t RESERVED[4];
DECL|RESERVED|member|__IM uint32_t RESERVED[55];
DECL|RESERVED|member|__IM uint32_t RESERVED[57];
DECL|RESERVED|member|__IM uint32_t RESERVED[60];
DECL|RESERVED|member|__IM uint32_t RESERVED[60];
DECL|RESERVED|member|__IM uint32_t RESERVED[61];
DECL|RESERVED|member|__IM uint32_t RESERVED[61];
DECL|RESERVED|member|__IM uint32_t RESERVED[61];
DECL|RESERVED|member|__IM uint32_t RESERVED[62];
DECL|RESERVED|member|__IM uint32_t RESERVED[62];
DECL|RESERVED|member|__IM uint32_t RESERVED[62];
DECL|RESERVED|member|__IM uint32_t RESERVED[62];
DECL|RESERVED|member|__IM uint32_t RESERVED[63];
DECL|RESERVED|member|__IM uint32_t RESERVED[66];
DECL|RESERVED|member|__IM uint32_t RESERVED[9];
DECL|RESETREAS|member|__IOM uint32_t RESETREAS; /*!< (@ 0x00000400) Reset reason. */
DECL|RESET|member|__IOM uint32_t RESET; /*!< (@ 0x00000544) Pin reset functionality configuration register.
DECL|RESULT|member|__IM uint32_t RESULT; /*!< (@ 0x00000400) Result of last compare. */
DECL|RESULT|member|__IM uint32_t RESULT; /*!< (@ 0x00000508) Result of ADC conversion. */
DECL|RLENR0|member|__IOM uint32_t RLENR0; /*!< (@ 0x0000052C) Length of RAM region 0. */
DECL|RNG_IRQn|enumerator|RNG_IRQn = 13, /*!< 13 RNG */
DECL|RREN|member|__IOM uint32_t RREN; /*!< (@ 0x00000508) Reload request enable. */
DECL|RR|member|__OM uint32_t RR[8]; /*!< (@ 0x00000600) Reload requests registers. */
DECL|RSSISAMPLE|member|__IM uint32_t RSSISAMPLE; /*!< (@ 0x00000548) RSSI sample. */
DECL|RTC0_IRQn|enumerator|RTC0_IRQn = 11, /*!< 11 RTC0 */
DECL|RTC1_IRQn|enumerator|RTC1_IRQn = 17, /*!< 17 RTC1 */
DECL|RUNSTATUS|member|__IM uint32_t RUNSTATUS; /*!< (@ 0x00000400) Watchdog running status. */
DECL|RXADDRESSES|member|__IOM uint32_t RXADDRESSES; /*!< (@ 0x00000530) Receive address select. */
DECL|RXCRC|member|__IM uint32_t RXCRC; /*!< (@ 0x0000040C) Received CRC. */
DECL|RXDPTR|member|__IOM uint32_t RXDPTR; /*!< (@ 0x00000534) RX data pointer. */
DECL|RXD|member|__IM uint32_t RXD; /*!< (@ 0x00000518) RX data register. */
DECL|RXD|member|__IM uint32_t RXD; /*!< (@ 0x00000518) RX data. */
DECL|RXD|member|__IM uint32_t RXD; /*!< (@ 0x00000518) RXD register. On read action the buffer pointer
DECL|RXMATCH|member|__IM uint32_t RXMATCH; /*!< (@ 0x00000408) Received address. */
DECL|Reset_IRQn|enumerator|Reset_IRQn = -15, /*!< -15 Reset Vector, invoked on Power up and warm reset */
DECL|SAMPLEPER|member|__IOM uint32_t SAMPLEPER; /*!< (@ 0x00000508) Sample period. */
DECL|SAMPLE|member|__IM int32_t SAMPLE; /*!< (@ 0x0000050C) Motion sample value. */
DECL|SCRATCHPTR|member|__IOM uint32_t SCRATCHPTR; /*!< (@ 0x00000514) Pointer to a scratch data area used for temporary
DECL|SCRATCHPTR|member|__IOM uint32_t SCRATCHPTR; /*!< (@ 0x00000514) Pointer to a scratch data area used for temporary
DECL|SEMSTAT|member|__IM uint32_t SEMSTAT; /*!< (@ 0x00000400) Semaphore status. */
DECL|SHORTS|member|__IOM uint32_t SHORTS; /*!< (@ 0x00000200) Shortcuts for SPIS. */
DECL|SHORTS|member|__IOM uint32_t SHORTS; /*!< (@ 0x00000200) Shortcuts for TWI. */
DECL|SHORTS|member|__IOM uint32_t SHORTS; /*!< (@ 0x00000200) Shortcuts for Timer. */
DECL|SHORTS|member|__IOM uint32_t SHORTS; /*!< (@ 0x00000200) Shortcuts for UART. */
DECL|SHORTS|member|__IOM uint32_t SHORTS; /*!< (@ 0x00000200) Shortcuts for the CCM. */
DECL|SHORTS|member|__IOM uint32_t SHORTS; /*!< (@ 0x00000200) Shortcuts for the LPCOMP. */
DECL|SHORTS|member|__IOM uint32_t SHORTS; /*!< (@ 0x00000200) Shortcuts for the QDEC. */
DECL|SHORTS|member|__IOM uint32_t SHORTS; /*!< (@ 0x00000200) Shortcuts for the RNG. */
DECL|SHORTS|member|__IOM uint32_t SHORTS; /*!< (@ 0x00000200) Shortcuts for the radio. */
DECL|SIZERAMBLOCKS|member|__IM uint32_t SIZERAMBLOCKS; /*!< (@ 0x00000038) Size of RAM blocks in bytes. */
DECL|SIZERAMBLOCK|member|__IM uint32_t SIZERAMBLOCK[4]; /*!< (@ 0x00000038) Deprecated array of size of RAM block in bytes.
DECL|SPI0_TWI0_IRQn|enumerator|SPI0_TWI0_IRQn = 3, /*!< 3 SPI0_TWI0 */
DECL|SPI1_TWI1_IRQn|enumerator|SPI1_TWI1_IRQn = 4, /*!< 4 SPI1_TWI1 */
DECL|STATE|member|__IM uint32_t STATE; /*!< (@ 0x00000550) Current radio state. */
DECL|STATUS|member|__IM uint32_t STATUS; /*!< (@ 0x00000400) Resolution status. */
DECL|STATUS|member|__IOM uint32_t STATUS; /*!< (@ 0x00000440) Status from last transaction. */
DECL|SVCall_IRQn|enumerator|SVCall_IRQn = -5, /*!< -5 System Service Call via SVC instruction */
DECL|SWI0_IRQn|enumerator|SWI0_IRQn = 20, /*!< 20 SWI0 */
DECL|SWI1_IRQn|enumerator|SWI1_IRQn = 21, /*!< 21 SWI1 */
DECL|SWI2_IRQn|enumerator|SWI2_IRQn = 22, /*!< 22 SWI2 */
DECL|SWI3_IRQn|enumerator|SWI3_IRQn = 23, /*!< 23 SWI3 */
DECL|SWI4_IRQn|enumerator|SWI4_IRQn = 24, /*!< 24 SWI4 */
DECL|SWI5_IRQn|enumerator|SWI5_IRQn = 25 /*!< 25 SWI5 */
DECL|SYSTEMOFF|member|__OM uint32_t SYSTEMOFF; /*!< (@ 0x00000500) System off register. */
DECL|SysTick_IRQn|enumerator|SysTick_IRQn = -1, /*!< -1 System Tick Timer */
DECL|TASKS_ACQUIRE|member|__OM uint32_t TASKS_ACQUIRE; /*!< (@ 0x00000024) Acquire SPI semaphore. */
DECL|TASKS_BCSTART|member|__OM uint32_t TASKS_BCSTART; /*!< (@ 0x0000001C) Start the bit counter. */
DECL|TASKS_BCSTOP|member|__OM uint32_t TASKS_BCSTOP; /*!< (@ 0x00000020) Stop the bit counter. */
DECL|TASKS_CAL|member|__OM uint32_t TASKS_CAL; /*!< (@ 0x00000010) Start calibration of LFCLK RC oscillator. */
DECL|TASKS_CAPTURE|member|__OM uint32_t TASKS_CAPTURE[4]; /*!< (@ 0x00000040) Capture Timer value to CC[n] registers. */
DECL|TASKS_CHG|member|__IOM PPI_TASKS_CHG_Type TASKS_CHG[4]; /*!< (@ 0x00000000) Channel group tasks. */
DECL|TASKS_CLEAR|member|__OM uint32_t TASKS_CLEAR; /*!< (@ 0x00000008) Clear RTC Counter. */
DECL|TASKS_CLEAR|member|__OM uint32_t TASKS_CLEAR; /*!< (@ 0x0000000C) Clear timer. */
DECL|TASKS_CONSTLAT|member|__OM uint32_t TASKS_CONSTLAT; /*!< (@ 0x00000078) Enable constant latency mode. */
DECL|TASKS_COUNT|member|__OM uint32_t TASKS_COUNT; /*!< (@ 0x00000008) Increment Timer (In counter mode). */
DECL|TASKS_CRYPT|member|__OM uint32_t TASKS_CRYPT; /*!< (@ 0x00000004) Start encrypt/decrypt. This operation will stop
DECL|TASKS_CTSTART|member|__OM uint32_t TASKS_CTSTART; /*!< (@ 0x00000014) Start calibration timer. */
DECL|TASKS_CTSTOP|member|__OM uint32_t TASKS_CTSTOP; /*!< (@ 0x00000018) Stop calibration timer. */
DECL|TASKS_DISABLE|member|__OM uint32_t TASKS_DISABLE; /*!< (@ 0x00000010) Disable radio. */
DECL|TASKS_HFCLKSTART|member|__OM uint32_t TASKS_HFCLKSTART; /*!< (@ 0x00000000) Start HFCLK clock source. */
DECL|TASKS_HFCLKSTOP|member|__OM uint32_t TASKS_HFCLKSTOP; /*!< (@ 0x00000004) Stop HFCLK clock source. */
DECL|TASKS_KSGEN|member|__OM uint32_t TASKS_KSGEN; /*!< (@ 0x00000000) Start generation of key-stream. This operation
DECL|TASKS_LFCLKSTART|member|__OM uint32_t TASKS_LFCLKSTART; /*!< (@ 0x00000008) Start LFCLK clock source. */
DECL|TASKS_LFCLKSTOP|member|__OM uint32_t TASKS_LFCLKSTOP; /*!< (@ 0x0000000C) Stop LFCLK clock source. */
DECL|TASKS_LOWPWR|member|__OM uint32_t TASKS_LOWPWR; /*!< (@ 0x0000007C) Enable low power mode (variable latency). */
DECL|TASKS_OUT|member|__OM uint32_t TASKS_OUT[4]; /*!< (@ 0x00000000) Tasks asssociated with GPIOTE channels. */
DECL|TASKS_READCLRACC|member|__OM uint32_t TASKS_READCLRACC; /*!< (@ 0x00000008) Transfers the content from ACC registers to ACCREAD
DECL|TASKS_RELEASE|member|__OM uint32_t TASKS_RELEASE; /*!< (@ 0x00000028) Release SPI semaphore. */
DECL|TASKS_RESUME|member|__OM uint32_t TASKS_RESUME; /*!< (@ 0x00000020) Resume 2-Wire transaction. */
DECL|TASKS_RSSISTART|member|__OM uint32_t TASKS_RSSISTART; /*!< (@ 0x00000014) Start the RSSI and take one sample of the receive
DECL|TASKS_RSSISTOP|member|__OM uint32_t TASKS_RSSISTOP; /*!< (@ 0x00000018) Stop the RSSI measurement. */
DECL|TASKS_RXEN|member|__OM uint32_t TASKS_RXEN; /*!< (@ 0x00000004) Enable radio in RX mode. */
DECL|TASKS_SAMPLE|member|__OM uint32_t TASKS_SAMPLE; /*!< (@ 0x00000008) Sample comparator value. */
DECL|TASKS_SHUTDOWN|member|__OM uint32_t TASKS_SHUTDOWN; /*!< (@ 0x00000010) Shutdown timer. */
DECL|TASKS_STARTECB|member|__OM uint32_t TASKS_STARTECB; /*!< (@ 0x00000000) Start ECB block encrypt. If a crypto operation
DECL|TASKS_STARTRX|member|__OM uint32_t TASKS_STARTRX; /*!< (@ 0x00000000) Start 2-Wire master receive sequence. */
DECL|TASKS_STARTRX|member|__OM uint32_t TASKS_STARTRX; /*!< (@ 0x00000000) Start UART receiver. */
DECL|TASKS_STARTTX|member|__OM uint32_t TASKS_STARTTX; /*!< (@ 0x00000008) Start 2-Wire master transmit sequence. */
DECL|TASKS_STARTTX|member|__OM uint32_t TASKS_STARTTX; /*!< (@ 0x00000008) Start UART transmitter. */
DECL|TASKS_START|member|__OM uint32_t TASKS_START; /*!< (@ 0x00000000) Start RTC Counter. */
DECL|TASKS_START|member|__OM uint32_t TASKS_START; /*!< (@ 0x00000000) Start Timer. */
DECL|TASKS_START|member|__OM uint32_t TASKS_START; /*!< (@ 0x00000000) Start an ADC conversion. */
DECL|TASKS_START|member|__OM uint32_t TASKS_START; /*!< (@ 0x00000000) Start resolving addresses based on IRKs specified
DECL|TASKS_START|member|__OM uint32_t TASKS_START; /*!< (@ 0x00000000) Start temperature measurement. */
DECL|TASKS_START|member|__OM uint32_t TASKS_START; /*!< (@ 0x00000000) Start the comparator. */
DECL|TASKS_START|member|__OM uint32_t TASKS_START; /*!< (@ 0x00000000) Start the quadrature decoder. */
DECL|TASKS_START|member|__OM uint32_t TASKS_START; /*!< (@ 0x00000000) Start the random number generator. */
DECL|TASKS_START|member|__OM uint32_t TASKS_START; /*!< (@ 0x00000000) Start the watchdog. */
DECL|TASKS_START|member|__OM uint32_t TASKS_START; /*!< (@ 0x00000008) Start radio. */
DECL|TASKS_STOPECB|member|__OM uint32_t TASKS_STOPECB; /*!< (@ 0x00000004) Stop current ECB encryption. If a crypto operation
DECL|TASKS_STOPRX|member|__OM uint32_t TASKS_STOPRX; /*!< (@ 0x00000004) Stop UART receiver. */
DECL|TASKS_STOPTX|member|__OM uint32_t TASKS_STOPTX; /*!< (@ 0x0000000C) Stop UART transmitter. */
DECL|TASKS_STOP|member|__OM uint32_t TASKS_STOP; /*!< (@ 0x00000004) Stop ADC. */
DECL|TASKS_STOP|member|__OM uint32_t TASKS_STOP; /*!< (@ 0x00000004) Stop RTC Counter. */
DECL|TASKS_STOP|member|__OM uint32_t TASKS_STOP; /*!< (@ 0x00000004) Stop Timer. */
DECL|TASKS_STOP|member|__OM uint32_t TASKS_STOP; /*!< (@ 0x00000004) Stop temperature measurement. */
DECL|TASKS_STOP|member|__OM uint32_t TASKS_STOP; /*!< (@ 0x00000004) Stop the comparator. */
DECL|TASKS_STOP|member|__OM uint32_t TASKS_STOP; /*!< (@ 0x00000004) Stop the quadrature decoder. */
DECL|TASKS_STOP|member|__OM uint32_t TASKS_STOP; /*!< (@ 0x00000004) Stop the random number generator. */
DECL|TASKS_STOP|member|__OM uint32_t TASKS_STOP; /*!< (@ 0x00000008) Stop encrypt/decrypt. */
DECL|TASKS_STOP|member|__OM uint32_t TASKS_STOP; /*!< (@ 0x00000008) Stop resolving addresses. */
DECL|TASKS_STOP|member|__OM uint32_t TASKS_STOP; /*!< (@ 0x0000000C) Stop radio. */
DECL|TASKS_STOP|member|__OM uint32_t TASKS_STOP; /*!< (@ 0x00000014) Stop 2-Wire transaction. */
DECL|TASKS_SUSPEND|member|__OM uint32_t TASKS_SUSPEND; /*!< (@ 0x0000001C) Suspend 2-Wire transaction. */
DECL|TASKS_SUSPEND|member|__OM uint32_t TASKS_SUSPEND; /*!< (@ 0x0000001C) Suspend UART. */
DECL|TASKS_TRIGOVRFLW|member|__OM uint32_t TASKS_TRIGOVRFLW; /*!< (@ 0x0000000C) Set COUNTER to 0xFFFFFFF0. */
DECL|TASKS_TXEN|member|__OM uint32_t TASKS_TXEN; /*!< (@ 0x00000000) Enable radio in TX mode. */
DECL|TEMP_IRQn|enumerator|TEMP_IRQn = 12, /*!< 12 TEMP */
DECL|TEMP|member|__IM int32_t TEMP; /*!< (@ 0x00000508) Die temperature in degC, 2's complement format,
DECL|TEP|member|__IOM uint32_t TEP; /*!< (@ 0x00000004) Channel task end-point. */
DECL|TEST|member|__IOM uint32_t TEST; /*!< (@ 0x00000540) Test features enable register. */
DECL|TIFS|member|__IOM uint32_t TIFS; /*!< (@ 0x00000544) Inter Frame Spacing in microseconds. */
DECL|TIMER0_IRQn|enumerator|TIMER0_IRQn = 8, /*!< 8 TIMER0 */
DECL|TIMER1_IRQn|enumerator|TIMER1_IRQn = 9, /*!< 9 TIMER1 */
DECL|TIMER2_IRQn|enumerator|TIMER2_IRQn = 10, /*!< 10 TIMER2 */
DECL|TXADDRESS|member|__IOM uint32_t TXADDRESS; /*!< (@ 0x0000052C) Transmit address select. */
DECL|TXDPTR|member|__IOM uint32_t TXDPTR; /*!< (@ 0x00000544) TX data pointer. */
DECL|TXD|member|__IOM uint32_t TXD; /*!< (@ 0x0000051C) TX data register. */
DECL|TXD|member|__IOM uint32_t TXD; /*!< (@ 0x0000051C) TX data. */
DECL|TXD|member|__OM uint32_t TXD; /*!< (@ 0x0000051C) TXD register. */
DECL|TXPOWER|member|__IOM uint32_t TXPOWER; /*!< (@ 0x0000050C) Output power. */
DECL|UART0_IRQn|enumerator|UART0_IRQn = 2, /*!< 2 UART0 */
DECL|UNUSED|member|__IM uint32_t UNUSED; /*!< (@ 0x00000000) Unused. */
DECL|VALUE|member|__IM uint32_t VALUE; /*!< (@ 0x00000508) RNG random number. */
DECL|WDT_IRQn|enumerator|WDT_IRQn = 16, /*!< 16 WDT */
DECL|XTALFREQ|member|__IOM uint32_t XTALFREQ; /*!< (@ 0x00000008) Reset value for CLOCK XTALFREQ register. */
DECL|XTALFREQ|member|__IOM uint32_t XTALFREQ; /*!< (@ 0x00000550) Crystal frequency. */
DECL|__CM0_REV|macro|__CM0_REV
DECL|__IM|macro|__IM
DECL|__IOM|macro|__IOM
DECL|__MPU_PRESENT|macro|__MPU_PRESENT
DECL|__NVIC_PRIO_BITS|macro|__NVIC_PRIO_BITS
DECL|__OM|macro|__OM
DECL|__Vendor_SysTickConfig|macro|__Vendor_SysTickConfig
