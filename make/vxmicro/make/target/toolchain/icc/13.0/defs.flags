# defs.flags - build system

# Copyright (c) 2013-2014 Wind River Systems, Inc.

# The right to copy, distribute, modify or otherwise make use
# of this software may be licensed only pursuant to the terms
# of an applicable Wind River license agreement.

# This file contains items that are specific to ICC version 13.0 (including
# any work-arounds).  Present work-arounds include setting flags for stack
# canaries, and disabling various diagnostic messages.

# ICC version 13.0 can not use the -fstack-protector-all option at it generates
# stack canary code that utilizes GS:0x14 as part of the stack protection
# algorithm.  Depending upon the setup, this address may refer to the IDT.  In
# such circumstances, when the IDT is initialized at startup, this may result
# in the false detection of a stack overrun.  To work around this, the
# undocumented options -mCG_stack_security_check=0x1d and
# -mCG_stack_security_check=0 are used to replace the -fstack-protector-all and 
# -fno-fstack-protector compiler options respectively.

iKERN_STACK_CANARIES_1  ?= $(if $(CONFIG_USER_APP_STACK_CANARIES),-mCG_stack_security_check=0x1d,-mCG_stack_security_check=0)
iKERN_STACK_CANARIES_   ?= $(if $(CONFIG_STACK_CANARIES),-mCG_stack_security_check=0x1d,-mCG_stack_security_check=0)
iKERN_STACK_CANARIES    ?= $(iKERN_STACK_CANARIES_$(USAP))

iMAKE_STACK_CANARIES_y  ?= -mCG_stack_security_check=0
iMAKE_STACK_CANARIES_yes ?= -mCG_stack_security_check=0
iMAKE_STACK_CANARIES    ?= ${iMAKE_STACK_CANARIES_${STACK_CANARIES_DISABLE}}

# The following diagnostic numbers may change in future ICC versions.
# 
# Disable warning #47 (redeclaration of a macro).  This is needed to suppress
# a warning in a CodeSourcery header file.  This warning, becomes an error
# when the -Werror option is used (as is the case in the sanity scripts).
#
# Disable remark #111 (statement is unreachable).  ICC does not have anything
# like GCC's __builin_unreachable() statement to inform the compiler that a
# statement is unreachable.
#
# Disable remark #981 (operands are evaluated in unspecified order).  Of this
# class of remarks generated against the VxMicro code base, they were all noise.
#
# Disable remark #1418--external function definition with no prior declaration.
# This remark (safe to ignore) is generated when the implementation of a
# function is not preceded by a declaration in either a C header or C source
# file.
#
# Disable remark #1419--external declaration in primary source file.  This
# remark (safe to ignore) is generated when the function declaration exists in
# the C source file and not a C header file.
#
# Disable remark #1599--declaration hides variable.  This remark is generated
# when a variable name is re-defined in a routine but in a different scope.
# Although disabling this has the potential to mask a bug, it is not a problem
# with the VxMicro code.
#
# Disable remark #2259--non-pointer conversion from larger to smaller type
# may lose significant bits.  Disabling this remark prevents a sea of false
# positives from being generated.  Even if it was to be enabled, it would not
# be helpful as any valid cases would be lost in the noise.
#
# Disable remark #2557--comparison between signed and unsigned operands.
# Disabling this remark prevents a sea of false positives from being generated.
# Even if it were to be enabled, it would not be helpful as any valid cases
# would be lost in the noise.
#
# Disable remark #13384--Possible access beyond allocated symbol.
# This remark is not even yet documented by Intel. 
# From the Intel web site it provides the following:
# Thank you for your interest in this diagnostic message.We are still in the 
# process of documenting this specific diagnostic.
# It only occurs with the Windows version of ICC 13. 
#

iDIAG_DISABLE := 47,111,981,1418,1419,1599,2259,2557,13384

iICC_13.0_CFLAGS   = $(or ${iMAKE_STACK_CANARIES},${iKERN_STACK_CANARIES}) \
                     -diag-disable $(iDIAG_DISABLE)
iGCC_4.6_ASMFLAGS =
iGCC_4.6_LFLAGS   =
iGCC_4.6_ARFLAGS  =
